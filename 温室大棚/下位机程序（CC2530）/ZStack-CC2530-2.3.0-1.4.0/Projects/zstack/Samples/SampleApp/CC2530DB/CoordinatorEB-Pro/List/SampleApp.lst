###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.40194/W32 for 8051         16/Dec/2018  11:54:28 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\So #
#                          urce\SampleApp.c                                   #
#    Command line       =  -f F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg     #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg       #
#                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\So #
#                          urce\SampleApp.c -D ZIGBEEPRO -D ZTOOL_P1 -D       #
#                          xMT_TASK -D xMT_SYS_FUNC -D HAL_LCD -D             #
#                          xMT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC            #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\CoordinatorEB-Pro\List\ -lA                 #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\CoordinatorEB-Pro\List\ --diag_suppress     #
#                          Pe001,Pa010 -o F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530 #
#                          £©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sampl #
#                          es\SampleApp\CC2530DB\CoordinatorEB-Pro\Obj\ -e    #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\ -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£ #
#                          ©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\SOURCE\ -I                 #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\ZMAIN\TI2530DB\ -I                 #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\MT\ -I            #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I   #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530 #
#                          EB\ -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStac #
#                          k-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\C #
#                          CSOC\ -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZSt #
#                          ack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INC #
#                          LUDE\ -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZSt #
#                          ack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF #
#                          \ -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack- #
#                          CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\   #
#                          -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\ -I  #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\ -I    #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\ -I     #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\ -I     #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I      #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\ZMAC\ -I          #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\   #
#                          -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA #
#                          \ -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack- #
#                          CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\ #
#                           -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVE #
#                          L\ -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack #
#                          -CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sample #
#                          App\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEV #
#                          EL\srf04\ -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£© #
#                          \ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\ #
#                          LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz                  #
#    List file          =  F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\CoordinatorEB-Pro\List\SampleApp.lst        #
#    Object file        =  F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\CoordinatorEB-Pro\Obj\SampleApp.r51         #
#                                                                             #
#                                                                             #
###############################################################################

F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          /*********************************************************************
     75           * MACROS
     76           */
     77          
     78          /*********************************************************************
     79           * CONSTANTS
     80           */
     81          
     82          /*********************************************************************
     83           * TYPEDEFS
     84           */
     85          
     86          /*********************************************************************
     87           * GLOBAL VARIABLES
     88           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     89          uint8 LedState = 0;
   \                     LedState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     90          
     91          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     92          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0300         DW 3
   \   000006   0400         DW 4
     93          {
     94            SAMPLEAPP_PERIODIC_CLUSTERID,
     95            SAMPLEAPP_FLASH_CLUSTERID,
     96            SAMPLEAPP_COM_CLUSTERID,      
     97            SAMPLEAPP_P2P_CLUSTERID      
     98          };
     99          

   \                                 In  segment XDATA_ROM_C, align 1
    100          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   04           DB 4
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   04           DB 4
   \   00000A   ....         DW SampleApp_ClusterList
    101          {
    102            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    103            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    104            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    105            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    106            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    107            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    108            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    109            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    110            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    111          };
    112          
    113          // This is the Endpoint/Interface description.  It is defined here, but
    114          // filled-in in SampleApp_Init().  Another way to go would be to fill
    115          // in the structure here and make it a "const" (in code space).  The
    116          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    117          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    118          
    119          /*********************************************************************
    120           * EXTERNAL VARIABLES
    121           */
    122          
    123          /*********************************************************************
    124           * EXTERNAL FUNCTIONS
    125           */
    126          
    127          /*********************************************************************
    128           * LOCAL VARIABLES
    129           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    130          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    131                                    // This variable will be received when
    132                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    134          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    136          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          afAddrType_t SampleApp_Periodic_DstAddr;  //π„≤•
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          afAddrType_t SampleApp_Flash_DstAddr;//◊È≤•
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    139          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    141          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    144          uint8 flag_fun=1;//1Œ™÷‹∆⁄≤…ºØ£¨2Œ™ ˝æ›◊™∑¢£¨
   \                     flag_fun:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for flag_fun>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          uint8 sensor_value[20];//±£¥Ê¥´∏–∆˜÷µ
   \                     sensor_value:
   \   000000                DS 20
   \   000014                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          uint8 timer_num=0;
   \                     timer_num:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    147          
    148          /*********************************************************************
    149           * LOCAL FUNCTIONS
    150           */
    151          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    152          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    153          void SampleApp_SendPeriodicMessage( void );
    154          void SampleApp_SendFlashMessage( uint16 flashTime );
    155          
    156          void read_data(uint8 * pSensorValue);
    157          void DataChange(uint8 * pSensorValue,uint8 * pChBuf);
    158          static void rxCB(uint8 port,uint8 event);
    159          /*********************************************************************
    160           * NETWORK LAYER CALLBACKS
    161           */
    162          
    163          /*********************************************************************
    164           * PUBLIC FUNCTIONS
    165           */
    166          
    167          /*********************************************************************
    168           * @fn      SampleApp_Init
    169           *
    170           * @brief   Initialization function for the Generic App Task.
    171           *          This is called during initialization and should contain
    172           *          any application specific initialization (ie. hardware
    173           *          initialization/setup, table initialization, power up
    174           *          notificaiton ... ).
    175           *
    176           * @param   task_id - the ID assigned by OSAL.  This ID should be
    177           *                    used to send messages and set timers.
    178           *
    179           * @return  none
    180           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    181          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    182          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV     A,#-0x1d
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
    183            SampleApp_TaskID = task_id;
   \   00000B   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000E   F0           MOVX    @DPTR,A
    184            SampleApp_NwkState = DEV_INIT;
   \   00000F   90....       MOV     DPTR,#SampleApp_NwkState
   \   000012   7401         MOV     A,#0x1
   \   000014   F0           MOVX    @DPTR,A
    185            SampleApp_TransID = 0;
   \   000015   90....       MOV     DPTR,#SampleApp_TransID
   \   000018   E4           CLR     A
   \   000019   F0           MOVX    @DPTR,A
    186             //≥ı ºªØ¥Æø⁄µƒ
    187            halUARTCfg_t uartConfig;//∂•“ª∏ˆ¥Æø⁄Ω·ππÃÂ
    188            uartConfig.configured             =TRUE;//¥Æø⁄≈‰÷√Œ™’Ê
   \   00001A   85..82       MOV     DPL,?XSP + 0
   \   00001D   85..83       MOV     DPH,?XSP + 1
   \   000020   04           INC     A
   \   000021   F0           MOVX    @DPTR,A
    189            uartConfig.baudRate               =HAL_UART_BR_9600;//≤®Ãÿ¬ Œ™9600
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E4           CLR     A
   \   000026   F0           MOVX    @DPTR,A
    190            uartConfig.flowControl            =FALSE;//¡˜øÿ÷∆Œ™ºŸ
   \   000027   7402         MOV     A,#0x2
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E4           CLR     A
   \   00002D   F0           MOVX    @DPTR,A
    191            uartConfig.callBackFunc       =    rxCB;
   \   00002E   741B         MOV     A,#0x1b
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   74..         MOV     A,#??rxCB?relay & 0xff
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   74..         MOV     A,#(??rxCB?relay >> 8) & 0xff
   \   000039   F0           MOVX    @DPTR,A
    192            HalUARTOpen(HAL_UART_PORT_0,&uartConfig);// ¥Úø™¥Æø⁄0
   \   00003A                ; Setup parameters for call to function HalUARTOpen
   \   00003A   85..82       MOV     DPL,?XSP + 0
   \   00003D   85..83       MOV     DPH,?XSP + 1
   \   000040   AA82         MOV     R2,DPL
   \   000042   AB83         MOV     R3,DPH
   \   000044   7900         MOV     R1,#0x0
   \   000046   12....       LCALL   ??HalUARTOpen?relay
    193            
    194            // Device hardware initialization can be added here or in main() (Zmain.c).
    195            // If the hardware is application specific - add it here.
    196            // If the hardware is other parts of the device add it in main().
    197          
    198           #if defined ( BUILD_ALL_DEVICES )
    199            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    200            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    201            // together - if they are - we will start up a coordinator. Otherwise,
    202            // the device will start as a router.
    203            if ( readCoordinatorJumper() )
    204              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    205            else
    206              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    207          #endif // BUILD_ALL_DEVICES
    208          
    209          #if defined ( HOLD_AUTO_START )
    210            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    211            //  from starting the device and wait for the application to
    212            //  start the device.
    213            ZDOInitDevice(0);
    214          #endif
    215          
    216            // Setup for the periodic message's destination address
    217            // Broadcast to everyone
    218            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000049   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   00004C   740F         MOV     A,#0xf
   \   00004E   F0           MOVX    @DPTR,A
    219            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00004F   A3           INC     DPTR
   \   000050   7414         MOV     A,#0x14
   \   000052   F0           MOVX    @DPTR,A
    220            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000053   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000056   74FF         MOV     A,#-0x1
   \   000058   F0           MOVX    @DPTR,A
   \   000059   A3           INC     DPTR
   \   00005A   F0           MOVX    @DPTR,A
    221          
    222            // Setup for the flash command's destination address - Group 1
    223            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   00005B   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   00005E   7401         MOV     A,#0x1
   \   000060   F0           MOVX    @DPTR,A
    224            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000061   A3           INC     DPTR
   \   000062   7414         MOV     A,#0x14
   \   000064   F0           MOVX    @DPTR,A
    225            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP; //◊È∫≈1
   \   000065   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000068   7401         MOV     A,#0x1
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   A3           INC     DPTR
   \   00006C   E4           CLR     A
   \   00006D   F0           MOVX    @DPTR,A
    226            
    227            // Fill out the endpoint description.
    228            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   00006E   90....       MOV     DPTR,#SampleApp_epDesc
   \   000071   7414         MOV     A,#0x14
   \   000073   F0           MOVX    @DPTR,A
    229            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000074   A3           INC     DPTR
   \   000075   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000077   F0           MOVX    @DPTR,A
   \   000078   A3           INC     DPTR
   \   000079   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   00007B   F0           MOVX    @DPTR,A
    230            SampleApp_epDesc.simpleDesc
    231                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   00007C   A3           INC     DPTR
   \   00007D   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   A3           INC     DPTR
   \   000081   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000083   F0           MOVX    @DPTR,A
    232            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000084   A3           INC     DPTR
   \   000085   E4           CLR     A
   \   000086   F0           MOVX    @DPTR,A
    233          
    234            // Register the endpoint description with the AF
    235            afRegister( &SampleApp_epDesc );
   \   000087                ; Setup parameters for call to function afRegister
   \   000087   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000089   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   00008B   12....       LCALL   ??afRegister?relay
    236          
    237            // Register for all key events - This app will handle all key events
    238            RegisterForKeys( SampleApp_TaskID );
   \   00008E                ; Setup parameters for call to function RegisterForKeys
   \   00008E   90....       MOV     DPTR,#SampleApp_TaskID
   \   000091   E0           MOVX    A,@DPTR
   \   000092   F9           MOV     R1,A
   \   000093   12....       LCALL   ??RegisterForKeys?relay
    239          
    240            // By default, all devices start out in Group 1
    241            SampleApp_Group.ID = 0x0001;
   \   000096   90....       MOV     DPTR,#SampleApp_Group
   \   000099   7401         MOV     A,#0x1
   \   00009B   F0           MOVX    @DPTR,A
   \   00009C   A3           INC     DPTR
   \   00009D   E4           CLR     A
   \   00009E   F0           MOVX    @DPTR,A
    242            osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
   \   00009F                ; Setup parameters for call to function osal_memcpy
   \   00009F   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   0000A2   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   0000A5   F5..         MOV     ?V0 + 2,A
   \   0000A7   78..         MOV     R0,#?V0 + 0
   \   0000A9   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000AC   7C07         MOV     R4,#0x7
   \   0000AE   7D00         MOV     R5,#0x0
   \   0000B0   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000B2   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000B4   12....       LCALL   ??osal_memcpy?relay
   \   0000B7   7403         MOV     A,#0x3
   \   0000B9   12....       LCALL   ?DEALLOC_XSTACK8
    243            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000BC                ; Setup parameters for call to function aps_AddGroup
   \   0000BC   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000BE   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000C0   7914         MOV     R1,#0x14
   \   0000C2   12....       LCALL   ??aps_AddGroup?relay
    244          
    245          #if defined ( LCD_SUPPORTED )
    246           // HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 ); 
    247          #endif
    248          }
   \   0000C5   741D         MOV     A,#0x1d
   \   0000C7                REQUIRE ?Subroutine0
   \   0000C7                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F03         MOV     R7,#0x3
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    249          
    250          /*********************************************************************
    251           * @fn      SampleApp_ProcessEvent
    252           *
    253           * @brief   Generic Application Task event processor.  This function
    254           *          is called to process all events for the task.  Events
    255           *          include timers, messages and any other user defined events.
    256           *
    257           * @param   task_id  - The OSAL assigned task ID.
    258           * @param   events - events to process.  This is a bit map and can
    259           *                   contain more than one event.
    260           *
    261           * @return  none
    262           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    263          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    264          { uint8 i;
                         ^
Warning[Pe177]: variable "i" was declared but never referenced
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    265            afIncomingMSGPacket_t *MSGpkt;
    266            (void)task_id;  // Intentionally unreferenced parameter
    267          
    268            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6057         JZ      ??SampleApp_ProcessEvent_0
    269            {
    270              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8021         SJMP    ??SampleApp_ProcessEvent_1
    271              while ( MSGpkt )
    272              {
    273                switch ( MSGpkt->hdr.event )
    274                {
    275                  // Received when a key is pressed
    276                  case KEY_CHANGE:
    277                  //  SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    278                    break;
    279          
    280                  // Received when a messages is received (OTA) for this endpoint
    281                  case AF_INCOMING_MSG_CMD:
    282                    SampleApp_MessageMSGCB( MSGpkt );
    283                    break;
    284          
    285                  // Received whenever the device changes state in the network
    286                  case ZDO_STATE_CHANGE:
    287                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    288                    
    289                    if (SampleApp_NwkState == DEV_ZB_COORD) 
   \   000015   6409         XRL     A,#0x9
   \   000017   7010         JNZ     ??SampleApp_ProcessEvent_3
    290                    {
    291                     osal_start_timerEx( SampleApp_TaskID,SAMPLEAPP_SEND_PERIODIC_MSG_EVT,2000 );//2√Î≤…ºØ∆˜    
   \   000019                ; Setup parameters for call to function osal_start_timerEx
   \   000019   7CD0         MOV     R4,#-0x30
   \   00001B   7D07         MOV     R5,#0x7
   \   00001D   7A01         MOV     R2,#0x1
   \   00001F   7B00         MOV     R3,#0x0
   \   000021   90....       MOV     DPTR,#SampleApp_TaskID
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F9           MOV     R1,A
   \   000026   12....       LCALL   ??osal_start_timerEx?relay
    292                    }
    293                    else
    294                    {
    295                      // Device is no longer in the network
    296                    }
    297                    break;
    298          
    299                  default:
    300                    break;
    301                }
    302          
    303                // Release the memory
    304                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_3:
   \   000029                ; Setup parameters for call to function osal_msg_deallocate
   \   000029   AA..         MOV     R2,?V0 + 0
   \   00002B   AB..         MOV     R3,?V0 + 1
   \   00002D   12....       LCALL   ??osal_msg_deallocate?relay
    305          
    306                // Next - if one is available
    307                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000030                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000030   90....       MOV     DPTR,#SampleApp_TaskID
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F9           MOV     R1,A
   \   000035   12....       LCALL   ??osal_msg_receive?relay
   \   000038   8A..         MOV     ?V0 + 0,R2
   \   00003A   8B..         MOV     ?V0 + 1,R3
   \   00003C   E5..         MOV     A,?V0 + 0
   \   00003E   45..         ORL     A,?V0 + 1
   \   000040   601A         JZ      ??SampleApp_ProcessEvent_4
   \   000042   85..82       MOV     DPL,?V0 + 0
   \   000045   85..83       MOV     DPH,?V0 + 1
   \   000048   E0           MOVX    A,@DPTR
   \   000049   24E6         ADD     A,#-0x1a
   \   00004B   6006         JZ      ??SampleApp_ProcessEvent_5
   \   00004D   2449         ADD     A,#0x49
   \   00004F   60BE         JZ      ??SampleApp_ProcessEvent_2
   \   000051   80D6         SJMP    ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_5:
   \   000053                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000053   AA..         MOV     R2,?V0 + 0
   \   000055   AB..         MOV     R3,?V0 + 1
   \   000057   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   00005A   80CD         SJMP    ??SampleApp_ProcessEvent_3
    308              }
    309          
    310              // return unprocessed events
    311              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_4:
   \   00005C   EE           MOV     A,R6
   \   00005D   FA           MOV     R2,A
   \   00005E   EF           MOV     A,R7
   \   00005F   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_6:
   \   000061   FB           MOV     R3,A
   \   000062   8023         SJMP    ??SampleApp_ProcessEvent_7
    312            }
    313          
    314            // Send a message out - This event is generated by a timer
    315            //  (setup in SampleApp_Init()).
    316            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000064   EE           MOV     A,R6
   \   000065   A2E0         MOV     C,0xE0 /* A   */.0
   \   000067   501A         JNC     ??SampleApp_ProcessEvent_8
    317            {
    318              // Send the periodic message
    319              SampleApp_SendPeriodicMessage();
   \   000069                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   000069   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    320          
    321              // Setup to send message again in normal period (+ a little jitter)
    322              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    323                 2000);
   \   00006C                ; Setup parameters for call to function osal_start_timerEx
   \   00006C   7CD0         MOV     R4,#-0x30
   \   00006E   7D07         MOV     R5,#0x7
   \   000070   7A01         MOV     R2,#0x1
   \   000072   7B00         MOV     R3,#0x0
   \   000074   90....       MOV     DPTR,#SampleApp_TaskID
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F9           MOV     R1,A
   \   000079   12....       LCALL   ??osal_start_timerEx?relay
    324          
    325              // return unprocessed events
    326              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   00007C   EE           MOV     A,R6
   \   00007D   6401         XRL     A,#0x1
   \   00007F   FA           MOV     R2,A
   \   000080   EF           MOV     A,R7
   \   000081   80DE         SJMP    ??SampleApp_ProcessEvent_6
    327            }
    328          
    329            // Discard unknown events
    330            return 0;
   \                     ??SampleApp_ProcessEvent_8:
   \   000083   7A00         MOV     R2,#0x0
   \   000085   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_7:
   \   000087   7F04         MOV     R7,#0x4
   \   000089   02....       LJMP    ?BANKED_LEAVE_XDATA
    331          }
    332          
    333          
    334          /*********************************************************************
    335           * LOCAL FUNCTIONS
    336           */
    337          
    338          /*********************************************************************
    339           * @fn      SampleApp_MessageMSGCB
    340           *
    341           * @brief   Data message processor callback.  This function processes
    342           *          any incoming data - probably from other devices.  So, based
    343           *          on cluster ID, perform the intended action.
    344           *
    345           * @param   none
    346           *
    347           * @return  none
    348           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    349          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    350          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    351            uint8 end_to_pc[12],byte_len;
    352            switch ( pkt->clusterId )
   \   00000A   EA           MOV     A,R2
   \   00000B   241F         ADD     A,#0x1f
   \   00000D   F8           MOV     R0,A
   \   00000E   EB           MOV     A,R3
   \   00000F   3400         ADDC    A,#0x0
   \   000011   F9           MOV     R1,A
   \   000012   E8           MOV     A,R0
   \   000013   FE           MOV     R6,A
   \   000014   E9           MOV     A,R1
   \   000015   FF           MOV     R7,A
   \   000016   8A82         MOV     DPL,R2
   \   000018   8B83         MOV     DPH,R3
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0 + 0,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0 + 1,A
   \   000025   78..         MOV     R0,#?V0 + 0
   \   000027   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   00002A   0100         DW        1
   \   00002C   01           DB        1
   \   00002D   ....         DW        ??SampleApp_MessageMSGCB_0
   \   00002F   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000031   ....         DW        ??SampleApp_MessageMSGCB_2
    353            {    
    354              case SAMPLEAPP_PERIODIC_CLUSTERID:   
    355                  osal_memcpy(end_to_pc,pkt->cmd.Data,pkt->cmd.DataLength);   // ∂‘Œﬁœﬂ ˝æ›Ω¯––¥¶¿Ì
   \                     ??SampleApp_MessageMSGCB_1:
   \   000033                ; Setup parameters for call to function osal_memcpy
   \   000033   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000036   F5..         MOV     ?V0 + 0,A
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F5..         MOV     ?V0 + 1,A
   \   00003C   75..00       MOV     ?V0 + 2,#0x0
   \   00003F   78..         MOV     R0,#?V0 + 0
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   E0           MOVX    A,@DPTR
   \   000049   FC           MOV     R4,A
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   FD           MOV     R5,A
   \   00004D   7403         MOV     A,#0x3
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   AA82         MOV     R2,DPL
   \   000054   AB83         MOV     R3,DPH
   \   000056   12....       LCALL   ??osal_memcpy?relay
   \   000059   7403         MOV     A,#0x3
   \   00005B   12....       LCALL   ?DEALLOC_XSTACK8
    356                   byte_len=pkt->cmd.DataLength;
    357                 // if(end_to_pc[0]==0x01&&end_to_pc[1]==0x03)
    358                  {
    359                    HalUARTWrite(0, end_to_pc, byte_len); // ‰≥ˆΩ” ’µΩµƒ ˝æ›
   \   00005E                ; Setup parameters for call to function HalUARTWrite
   \   00005E   8E82         MOV     DPL,R6
   \   000060   8F83         MOV     DPH,R7
   \   000062   E0           MOVX    A,@DPTR
   \   000063   FC           MOV     R4,A
   \   000064   7D00         MOV     R5,#0x0
   \   000066   85..82       MOV     DPL,?XSP + 0
   \   000069   85..83       MOV     DPH,?XSP + 1
   \   00006C   AA82         MOV     R2,DPL
   \   00006E   AB83         MOV     R3,DPH
   \   000070   8010         SJMP    ??SampleApp_MessageMSGCB_3
    360                  }
    361                break;
    362                case SAMPLEAPP_FLASH_CLUSTERID:   
    363                     HalUARTWrite(0,pkt->cmd.Data,pkt->cmd.DataLength);   // ∂‘Œﬁœﬂ ˝æ›Ω¯––¥¶¿Ì
   \                     ??SampleApp_MessageMSGCB_2:
   \   000072                ; Setup parameters for call to function HalUARTWrite
   \   000072   8E82         MOV     DPL,R6
   \   000074   8F83         MOV     DPH,R7
   \   000076   E0           MOVX    A,@DPTR
   \   000077   FC           MOV     R4,A
   \   000078   A3           INC     DPTR
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   FD           MOV     R5,A
   \   00007B   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00007E   FA           MOV     R2,A
   \   00007F   A3           INC     DPTR
   \   000080   E0           MOVX    A,@DPTR
   \   000081   FB           MOV     R3,A
   \                     ??SampleApp_MessageMSGCB_3:
   \   000082   7900         MOV     R1,#0x0
   \   000084   12....       LCALL   ??HalUARTWrite?relay
    364                break;
    365          
    366            }
    367          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   000087   740C         MOV     A,#0xc
   \   000089   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EA           MOV     A,R2
   \   000001   2421         ADD     A,#0x21
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET
    368          
    369          /*********************************************************************
    370           * @fn      SampleApp_SendPeriodicMessage
    371           *
    372           * @brief   Send the periodic message.
    373           *
    374           * @param   none
    375           *
    376           * @return  none
    377           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    378          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    379          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    380             uint8 send_to_end[3];
    381             timer_num++;
   \   00000A   90....       MOV     DPTR,#timer_num
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   04           INC     A
   \   00000F   F0           MOVX    @DPTR,A
    382              if(timer_num>=120)timer_num=2;
   \   000010   C3           CLR     C
   \   000011   9478         SUBB    A,#0x78
   \   000013   4005         JC      ??SampleApp_SendPeriodicMessage_0
   \   000015   7402         MOV     A,#0x2
   \   000017   F0           MOVX    @DPTR,A
   \   000018   8013         SJMP    ??SampleApp_SendPeriodicMessage_1
    383              if(timer_num%2==1) //÷’∂À1
   \                     ??SampleApp_SendPeriodicMessage_0:
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00001D   500A         JNC     ??SampleApp_SendPeriodicMessage_2
    384              {
    385                send_to_end[0]=0x01;//÷’∂Àµÿ÷∑
   \   00001F   85..82       MOV     DPL,?XSP + 0
   \   000022   85..83       MOV     DPH,?XSP + 1
   \   000025   7401         MOV     A,#0x1
   \   000027   800C         SJMP    ??SampleApp_SendPeriodicMessage_3
    386              }
    387               if(timer_num%2==0) //÷’∂À3
   \                     ??SampleApp_SendPeriodicMessage_2:
   \   000029   A2E0         MOV     C,0xE0 /* A   */.0
   \   00002B   4009         JC      ??SampleApp_SendPeriodicMessage_4
    388              {
    389                send_to_end[0]=0x02;//÷’∂Àµÿ÷∑
   \                     ??SampleApp_SendPeriodicMessage_1:
   \   00002D   85..82       MOV     DPL,?XSP + 0
   \   000030   85..83       MOV     DPH,?XSP + 1
   \   000033   7402         MOV     A,#0x2
   \                     ??SampleApp_SendPeriodicMessage_3:
   \   000035   F0           MOVX    @DPTR,A
    390              }
    391             if(flag_fun==1)//÷‹∆⁄≤…ºØ
   \                     ??SampleApp_SendPeriodicMessage_4:
   \   000036   90....       MOV     DPTR,#flag_fun
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   6401         XRL     A,#0x1
   \   00003C   7057         JNZ     ??SampleApp_SendPeriodicMessage_5
    392             {
    393                send_to_end[1]=0x03;//π¶ƒ‹¬Î
   \   00003E   7401         MOV     A,#0x1
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   7403         MOV     A,#0x3
   \   000045   F0           MOVX    @DPTR,A
    394                send_to_end[2]=0x68;//Ω· ¯±Í÷æ
   \   000046   14           DEC     A
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   7468         MOV     A,#0x68
   \   00004C   F0           MOVX    @DPTR,A
    395                AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    396                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    397                                 3,send_to_end,
    398                                 &SampleApp_TransID,
    399                                AF_DISCV_ROUTE,
    400                                 AF_DEFAULT_RADIUS );//Œﬁœﬂ∑¢ÀÕ∫Ø ˝
   \   00004D                ; Setup parameters for call to function AF_DataRequest
   \   00004D   75..1E       MOV     ?V0 + 0,#0x1e
   \   000050   78..         MOV     R0,#?V0 + 0
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000055   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000058   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00005B   78..         MOV     R0,#?V0 + 0
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000060   7403         MOV     A,#0x3
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   8582..       MOV     ?V0 + 0,DPL
   \   000068   8583..       MOV     ?V0 + 1,DPH
   \   00006B   78..         MOV     R0,#?V0 + 0
   \   00006D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000070   75..03       MOV     ?V0 + 0,#0x3
   \   000073   75..00       MOV     ?V0 + 1,#0x0
   \   000076   78..         MOV     R0,#?V0 + 0
   \   000078   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007B   75..01       MOV     ?V0 + 0,#0x1
   \   00007E   78..         MOV     R0,#?V0 + 0
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   7920         MOV     R1,#0x20
   \   000085   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000087   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000089   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00008B   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00008D   12....       LCALL   ??AF_DataRequest?relay
   \   000090   7409         MOV     A,#0x9
   \   000092   12....       LCALL   ?DEALLOC_XSTACK8
    401             }
    402          }
   \                     ??SampleApp_SendPeriodicMessage_5:
   \   000095                REQUIRE ?Subroutine1
   \   000095                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7403         MOV     A,#0x3
   \   000002                REQUIRE ??Subroutine3_0
   \   000002                ; // Fall through to label ??Subroutine3_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine3_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    403          
    404          /*********************************************************************
    405           * @fn      SampleApp_SendFlashMessage
    406           *
    407           * @brief   Send the flash message to group 1.
    408           *
    409           * @param   flashTime - in milliseconds
    410           *
    411           * @return  none
    412           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    413          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    414          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    415            uint8 buffer[3];
    416            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    417            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    418            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    419          
    420            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    421                                 SAMPLEAPP_FLASH_CLUSTERID,
    422                                 3,
    423                                 buffer,
    424                                 &SampleApp_TransID,
    425                                 AF_DISCV_ROUTE,
    426                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??AF_DataRequest?relay
   \   00006C   7409         MOV     A,#0x9
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
    427            {
    428            }
    429            else
    430            {
    431              // Error occurred in request to send.
    432            }
    433          }
   \   000071   80..         SJMP    ?Subroutine1
    434          //œ¬√Ê’‚∏ˆªÿµ˜∫Ø ˝ «Œ“º”µƒ£¨¥”¥Æø⁄0∂¡»°3∏ˆ◊÷∑˚£¨∑≈Ω¯uartbuf

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    435          static void rxCB(uint8 port,uint8 event)
   \                     rxCB:
    436          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    437            uint8 uartbuf[4];
    438            HalUARTRead(0,uartbuf,4);//≤Œ ˝œ¬∑¢
   \   00000A                ; Setup parameters for call to function HalUARTRead
   \   00000A   7C04         MOV     R4,#0x4
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   AA82         MOV     R2,DPL
   \   000016   AB83         MOV     R3,DPH
   \   000018   7900         MOV     R1,#0x0
   \   00001A   12....       LCALL   ??HalUARTRead?relay
    439              //Œﬁœﬂ¥´ ‰∏¯÷’∂À
    440            AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    441                                 SAMPLEAPP_FLASH_CLUSTERID,
    442                                 4,
    443                                 uartbuf,
    444                                 &SampleApp_TransID,
    445                                 AF_DISCV_ROUTE,
    446                                 AF_DEFAULT_RADIUS );
   \   00001D                ; Setup parameters for call to function AF_DataRequest
   \   00001D   75..1E       MOV     ?V0 + 0,#0x1e
   \   000020   78..         MOV     R0,#?V0 + 0
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000025   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000028   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00002B   78..         MOV     R0,#?V0 + 0
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000030   7403         MOV     A,#0x3
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   8582..       MOV     ?V0 + 0,DPL
   \   000038   8583..       MOV     ?V0 + 1,DPH
   \   00003B   78..         MOV     R0,#?V0 + 0
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   75..04       MOV     ?V0 + 0,#0x4
   \   000043   75..00       MOV     ?V0 + 1,#0x0
   \   000046   78..         MOV     R0,#?V0 + 0
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   75..02       MOV     ?V0 + 0,#0x2
   \   00004E   78..         MOV     R0,#?V0 + 0
   \   000050   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000053   7920         MOV     R1,#0x20
   \   000055   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000057   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000059   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00005B   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00005D   12....       LCALL   ??AF_DataRequest?relay
   \   000060   7409         MOV     A,#0x9
   \   000062   12....       LCALL   ?DEALLOC_XSTACK8
    447          }
   \   000065   7404         MOV     A,#0x4
   \   000067   02....       LJMP    ??Subroutine3_0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for flag_fun>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxCB

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_Init                     0      0     43
       -> HalUARTOpen                   0      0     80
       -> afRegister                    0      0     80
       -> RegisterForKeys               0      0     80
       -> osal_memcpy                   0      0     86
       -> aps_AddGroup                  0      0     80
     SampleApp_MessageMSGCB             0      0     38
       -> osal_memcpy                   0      0     52
       -> HalUARTWrite                  0      0     46
       -> HalUARTWrite                  0      0     46
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_SendPeriodicMessage
                                        0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     22
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      0      0     34
       -> AF_DataRequest                0      0     44
     rxCB                               0      0     23
       -> HalUARTRead                   0      0     28
       -> AF_DataRequest                0      0     46


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     LedState                                 1
     SampleApp_ClusterList                    8
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     flag_fun                                 1
     sensor_value                            20
     timer_num                                1
     SampleApp_Init                         199
     ?Subroutine0                             8
     SampleApp_ProcessEvent                 140
     SampleApp_MessageMSGCB                 140
     ?Subroutine2                            12
     SampleApp_SendPeriodicMessage          149
     ?Subroutine1                             2
     ??Subroutine3_0                          8
     SampleApp_SendFlashMessage             115
     rxCB                                   106
     ?<Initializer for flag_fun>              1
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ??rxCB?relay                             6
     ?<Constant "Group 1">                    8

 
 879 bytes in segment BANKED_CODE
  36 bytes in segment BANK_RELAYS
   1 byte  in segment XDATA_I
   1 byte  in segment XDATA_ID
  28 bytes in segment XDATA_ROM_C
  75 bytes in segment XDATA_Z
 
 916 bytes of CODE  memory
  28 bytes of CONST memory
  76 bytes of XDATA memory

Errors: none
Warnings: 1
