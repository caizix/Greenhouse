###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.40194/W32 for 8051         16/Dec/2018  12:23:31 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\So #
#                          urce\SampleApp-end.c                               #
#    Command line       =  -f F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg     #
#                          (-DCPU32MHZ -DROOT=__near_func -DBLINK_LEDS) -f    #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg       #
#                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\So #
#                          urce\SampleApp-end.c -D ZIGBEEPRO -D               #
#                          NWK_AUTO_POLL -D ZTOOL_P1 -D xMT_TASK -D           #
#                          xMT_SYS_FUNC -D xMT_ZDO_FUNC -D                    #
#                          LCD_SUPPORTED=DEBUG -lC F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã– #
#                          Ú£®CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\Lis #
#                          t\ -lA F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStac #
#                          k-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\EndDeviceEB-Pro\List\                #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\EndDeviceEB-Pro\Obj\ -e --debug             #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã– #
#                          Ú£®CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\ -I                 #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\SOURCE\ -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£® #
#                          CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530D #
#                          B\ -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack #
#                          -CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sample #
#                          App\CC2530DB\..\..\..\..\..\COMPONENTS\MT\ -I      #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I   #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530 #
#                          EB\ -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStac #
#                          k-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\C #
#                          CSOC\ -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZSt #
#                          ack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INC #
#                          LUDE\ -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZSt #
#                          ack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF #
#                          \ -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack- #
#                          CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\   #
#                          -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\ -I  #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\ -I    #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\ -I     #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\ -I     #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I      #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\ZMAC\ -I          #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\   #
#                          -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA #
#                          \ -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack- #
#                          CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\ #
#                           -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVE #
#                          L\ -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack #
#                          -CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sample #
#                          App\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEV #
#                          EL\srf04\ -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£© #
#                          \ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\ #
#                          LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz                  #
#                          --require_prototypes                               #
#    List file          =  F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\EndDeviceEB-Pro\List\SampleApp-end.lst      #
#    Object file        =  F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\EndDeviceEB-Pro\Obj\SampleApp-end.r51       #
#                                                                             #
#                                                                             #
###############################################################################

F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp-end.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf6
   \   unsigned char volatile __sfr P1INP
   \                     P1INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "ADC.h"
     75          #include "dht11.h"
     76          /*********************************************************************
     77           * MACROS
     78           */
     79          
     80          /*********************************************************************
     81           * CONSTANTS
     82           */
     83          
     84          /*********************************************************************
     85           * TYPEDEFS
     86           */
     87          
     88          /*********************************************************************
     89           * GLOBAL VARIABLES
     90           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     91          uint8 LedState = 0;
   \                     LedState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
     92          uint8 set_shidu=60;//…Ë÷√µƒ ™∂»÷µ
   \                     set_shidu:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for set_shidu>`
   \   000001                REQUIRE __INIT_XDATA_I
     93          
     94          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     95          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0300         DW 3
   \   000006   0400         DW 4
     96          {
     97            SAMPLEAPP_PERIODIC_CLUSTERID,
     98            SAMPLEAPP_FLASH_CLUSTERID,
     99            SAMPLEAPP_COM_CLUSTERID,      
    100            SAMPLEAPP_P2P_CLUSTERID      
    101          };
    102          

   \                                 In  segment XDATA_ROM_C, align 1
    103          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   04           DB 4
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   04           DB 4
   \   00000A   ....         DW SampleApp_ClusterList
    104          {
    105            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    106            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    107            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    108            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    109            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    110            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    111            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    112            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    113            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    114          };
    115          
    116          // This is the Endpoint/Interface description.  It is defined here, but
    117          // filled-in in SampleApp_Init().  Another way to go would be to fill
    118          // in the structure here and make it a "const" (in code space).  The
    119          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    120          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    121          
    122          /*********************************************************************
    123           * EXTERNAL VARIABLES
    124           */
    125          
    126          /*********************************************************************
    127           * EXTERNAL FUNCTIONS
    128           */
    129          
    130          /*********************************************************************
    131           * LOCAL VARIABLES
    132           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    134                                    // This variable will be received when
    135                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    137          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    139          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          afAddrType_t SampleApp_Periodic_DstAddr;  //π„≤•
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          afAddrType_t SampleApp_Flash_DstAddr;//◊È≤•
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    142          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    144          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          uint8 sensor_value[20];//±£¥Ê¥´∏–∆˜÷µ
   \                     sensor_value:
   \   000000                DS 20
   \   000014                REQUIRE __INIT_XDATA_Z
    148          
    149          /*********************************************************************
    150           * LOCAL FUNCTIONS
    151           */
    152          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    153          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    154          void SampleApp_SendPeriodicMessage( void );
    155          void SampleApp_SendFlashMessage( uint16 flashTime );
    156          /*********************************************************************
    157           * NETWORK LAYER CALLBACKS
    158           */
    159          
    160          /*********************************************************************
    161           * PUBLIC FUNCTIONS
    162           */
    163          
    164          /*********************************************************************
    165           * @fn      SampleApp_Init
    166           *
    167           * @brief   Initialization function for the Generic App Task.
    168           *          This is called during initialization and should contain
    169           *          any application specific initialization (ie. hardware
    170           *          initialization/setup, table initialization, power up
    171           *          notificaiton ... ).
    172           *
    173           * @param   task_id - the ID assigned by OSAL.  This ID should be
    174           *                    used to send messages and set timers.
    175           *
    176           * @return  none
    177           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    178          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    179          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    180            SampleApp_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#SampleApp_TaskID
   \   000009   F0           MOVX    @DPTR,A
    181            SampleApp_NwkState = DEV_INIT;
   \   00000A   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    182            SampleApp_TransID = 0;
   \   000010   90....       MOV     DPTR,#SampleApp_TransID
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
    183          
    184           
    185            
    186            // Device hardware initialization can be added here or in main() (Zmain.c).
    187            // If the hardware is application specific - add it here.
    188            // If the hardware is other parts of the device add it in main().
    189          
    190           #if defined ( BUILD_ALL_DEVICES )
    191            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    192            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    193            // together - if they are - we will start up a coordinator. Otherwise,
    194            // the device will start as a router.
    195            if ( readCoordinatorJumper() )
    196              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    197            else
    198              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    199          #endif // BUILD_ALL_DEVICES
    200          
    201          #if defined ( HOLD_AUTO_START )
    202            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    203            //  from starting the device and wait for the application to
    204            //  start the device.
    205            ZDOInitDevice(0);
    206          #endif
    207          
    208            // Setup for the periodic message's destination address
    209            // Broadcast to everyone
    210            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000015   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000018   740F         MOV     A,#0xf
   \   00001A   F0           MOVX    @DPTR,A
    211            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00001B   A3           INC     DPTR
   \   00001C   7414         MOV     A,#0x14
   \   00001E   F0           MOVX    @DPTR,A
    212            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   00001F   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000022   74FF         MOV     A,#-0x1
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   F0           MOVX    @DPTR,A
    213          
    214            // Setup for the flash command's destination address - Group 1
    215            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000027   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   00002A   7401         MOV     A,#0x1
   \   00002C   F0           MOVX    @DPTR,A
    216            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00002D   A3           INC     DPTR
   \   00002E   7414         MOV     A,#0x14
   \   000030   F0           MOVX    @DPTR,A
    217            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP; //◊È∫≈1
   \   000031   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000034   7401         MOV     A,#0x1
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   E4           CLR     A
   \   000039   F0           MOVX    @DPTR,A
    218            
    219            // Fill out the endpoint description.
    220            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   00003A   90....       MOV     DPTR,#SampleApp_epDesc
   \   00003D   7414         MOV     A,#0x14
   \   00003F   F0           MOVX    @DPTR,A
    221            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000040   A3           INC     DPTR
   \   000041   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000043   F0           MOVX    @DPTR,A
   \   000044   A3           INC     DPTR
   \   000045   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000047   F0           MOVX    @DPTR,A
    222            SampleApp_epDesc.simpleDesc
    223                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000048   A3           INC     DPTR
   \   000049   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   A3           INC     DPTR
   \   00004D   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   00004F   F0           MOVX    @DPTR,A
    224            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000050   A3           INC     DPTR
   \   000051   E4           CLR     A
   \   000052   F0           MOVX    @DPTR,A
    225          
    226            // Register the endpoint description with the AF
    227            afRegister( &SampleApp_epDesc );
   \   000053                ; Setup parameters for call to function afRegister
   \   000053   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000055   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000057   12....       LCALL   ??afRegister?relay
    228          
    229            // Register for all key events - This app will handle all key events
    230            RegisterForKeys( SampleApp_TaskID );
   \   00005A                ; Setup parameters for call to function RegisterForKeys
   \   00005A   90....       MOV     DPTR,#SampleApp_TaskID
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F9           MOV     R1,A
   \   00005F   12....       LCALL   ??RegisterForKeys?relay
    231          
    232            // By default, all devices start out in Group 1
    233            SampleApp_Group.ID = 0x0001;
   \   000062   90....       MOV     DPTR,#SampleApp_Group
   \   000065   7401         MOV     A,#0x1
   \   000067   F0           MOVX    @DPTR,A
   \   000068   A3           INC     DPTR
   \   000069   E4           CLR     A
   \   00006A   F0           MOVX    @DPTR,A
    234            osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
   \   00006B                ; Setup parameters for call to function osal_memcpy
   \   00006B   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   00006E   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000071   F5..         MOV     ?V0 + 2,A
   \   000073   78..         MOV     R0,#?V0 + 0
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000078   7C07         MOV     R4,#0x7
   \   00007A   7D00         MOV     R5,#0x0
   \   00007C   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   00007E   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   000080   12....       LCALL   ??osal_memcpy?relay
   \   000083   7403         MOV     A,#0x3
   \   000085   12....       LCALL   ?DEALLOC_XSTACK8
    235            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   000088                ; Setup parameters for call to function aps_AddGroup
   \   000088   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   00008A   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   00008C   7914         MOV     R1,#0x14
   \   00008E   12....       LCALL   ??aps_AddGroup?relay
    236          
    237          #if defined ( LCD_SUPPORTED )
    238           // HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 ); 
    239          #endif
    240          }
   \   000091   7F03         MOV     R7,#0x3
   \   000093   02....       LJMP    ?BANKED_LEAVE_XDATA
    241          
    242          /*********************************************************************
    243           * @fn      SampleApp_ProcessEvent
    244           *
    245           * @brief   Generic Application Task event processor.  This function
    246           *          is called to process all events for the task.  Events
    247           *          include timers, messages and any other user defined events.
    248           *
    249           * @param   task_id  - The OSAL assigned task ID.
    250           * @param   events - events to process.  This is a bit map and can
    251           *                   contain more than one event.
    252           *
    253           * @return  none
    254           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    255          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    256          { uint8 i;
                         ^
Warning[Pe177]: variable "i" was declared but never referenced
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    257            afIncomingMSGPacket_t *MSGpkt;
    258            (void)task_id;  // Intentionally unreferenced parameter
    259          
    260            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6064         JZ      ??SampleApp_ProcessEvent_0
    261            {
    262              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   802E         SJMP    ??SampleApp_ProcessEvent_1
    263              while ( MSGpkt )
    264              {
    265                switch ( MSGpkt->hdr.event )
    266                {
    267                  // Received when a key is pressed
    268                  case KEY_CHANGE:
    269                  //  SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    270                    break;
    271          
    272                  // Received when a messages is received (OTA) for this endpoint
    273                  case AF_INCOMING_MSG_CMD:
    274                    SampleApp_MessageMSGCB( MSGpkt );
    275                    break;
    276          
    277                  // Received whenever the device changes state in the network
    278                  case ZDO_STATE_CHANGE:
    279                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    280                    if ((SampleApp_NwkState == DEV_ROUTER)|| (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7018         JNZ     ??SampleApp_ProcessEvent_4
    281                    {
    282                        P1SEL&=~0x20;//◊˜Œ™∆’Õ®IOø⁄ 
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E   53F4DF       ANL     0xf4,#0xdf
    283                        P1DIR|=0x20;  //P1_5∂®“ÂŒ™ ‰≥ˆ 
   \   000021   43FE20       ORL     0xfe,#0x20
    284                        P1INP&=~0x20; //¥Úø™…œ¿≠
   \   000024   53F6DF       ANL     0xf6,#0xdf
    285                        P1_5=0;//ºÃµÁ∆˜ƒ¨»œπÿ
   \   000027   C295         CLR     0x90.5
    286                        HalLedBlink (HAL_LED_1,4, 50, 500);
   \   000029                ; Setup parameters for call to function HalLedBlink
   \   000029   7CF4         MOV     R4,#-0xc
   \   00002B   7D01         MOV     R5,#0x1
   \   00002D   7B32         MOV     R3,#0x32
   \   00002F   7A04         MOV     R2,#0x4
   \   000031   7901         MOV     R1,#0x1
   \   000033   12....       LCALL   ??HalLedBlink?relay
    287                      // osal_start_timerEx( SampleApp_TaskID,SAMPLEAPP_SEND_PERIODIC_MSG_EVT,2000 );//÷‹∆⁄≤…ºØ¥´∏–∆˜÷µ  
    288                    }
    289                    else
    290                    {
    291                      // Device is no longer in the network
    292                    }
    293                    break;
    294          
    295                  default:
    296                    break;
    297                }
    298          
    299                // Release the memory
    300                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   000036                ; Setup parameters for call to function osal_msg_deallocate
   \   000036   AA..         MOV     R2,?V0 + 0
   \   000038   AB..         MOV     R3,?V0 + 1
   \   00003A   12....       LCALL   ??osal_msg_deallocate?relay
    301          
    302                // Next - if one is available
    303                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00003D                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   00003D   90....       MOV     DPTR,#SampleApp_TaskID
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F9           MOV     R1,A
   \   000042   12....       LCALL   ??osal_msg_receive?relay
   \   000045   8A..         MOV     ?V0 + 0,R2
   \   000047   8B..         MOV     ?V0 + 1,R3
   \   000049   E5..         MOV     A,?V0 + 0
   \   00004B   45..         ORL     A,?V0 + 1
   \   00004D   601A         JZ      ??SampleApp_ProcessEvent_5
   \   00004F   85..82       MOV     DPL,?V0 + 0
   \   000052   85..83       MOV     DPH,?V0 + 1
   \   000055   E0           MOVX    A,@DPTR
   \   000056   24E6         ADD     A,#-0x1a
   \   000058   6006         JZ      ??SampleApp_ProcessEvent_6
   \   00005A   2449         ADD     A,#0x49
   \   00005C   60B1         JZ      ??SampleApp_ProcessEvent_2
   \   00005E   80D6         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000060                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000060   AA..         MOV     R2,?V0 + 0
   \   000062   AB..         MOV     R3,?V0 + 1
   \   000064   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000067   80CD         SJMP    ??SampleApp_ProcessEvent_4
    304              }
    305          
    306              // return unprocessed events
    307              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000069   EE           MOV     A,R6
   \   00006A   FA           MOV     R2,A
   \   00006B   EF           MOV     A,R7
   \   00006C   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_7:
   \   00006E   FB           MOV     R3,A
   \   00006F   8020         SJMP    ??SampleApp_ProcessEvent_8
    308            }
    309          
    310            // Send a message out - This event is generated by a timer
    311            //  (setup in SampleApp_Init()).
    312            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000071   EE           MOV     A,R6
   \   000072   A2E0         MOV     C,0xE0 /* A   */.0
   \   000074   5017         JNC     ??SampleApp_ProcessEvent_9
    313            {
    314              // Setup to send message again in normal period (+ a little jitter)
    315              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    316                 2000);
   \   000076                ; Setup parameters for call to function osal_start_timerEx
   \   000076   7CD0         MOV     R4,#-0x30
   \   000078   7D07         MOV     R5,#0x7
   \   00007A   7A01         MOV     R2,#0x1
   \   00007C   7B00         MOV     R3,#0x0
   \   00007E   90....       MOV     DPTR,#SampleApp_TaskID
   \   000081   E0           MOVX    A,@DPTR
   \   000082   F9           MOV     R1,A
   \   000083   12....       LCALL   ??osal_start_timerEx?relay
    317          
    318              // return unprocessed events
    319              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   000086   EE           MOV     A,R6
   \   000087   6401         XRL     A,#0x1
   \   000089   FA           MOV     R2,A
   \   00008A   EF           MOV     A,R7
   \   00008B   80E1         SJMP    ??SampleApp_ProcessEvent_7
    320            }
    321          
    322            // Discard unknown events
    323            return 0;
   \                     ??SampleApp_ProcessEvent_9:
   \   00008D   7A00         MOV     R2,#0x0
   \   00008F   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_8:
   \   000091   7F04         MOV     R7,#0x4
   \   000093   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000096                REQUIRE P1SEL
   \   000096                REQUIRE P1DIR
   \   000096                REQUIRE P1INP
   \   000096                REQUIRE _A_P1
    324          }
    325          
    326          
    327          /*********************************************************************
    328           * LOCAL FUNCTIONS
    329           */
    330          
    331          /*********************************************************************
    332           * @fn      SampleApp_MessageMSGCB
    333           *
    334           * @brief   Data message processor callback.  This function processes
    335           *          any incoming data - probably from other devices.  So, based
    336           *          on cluster ID, perform the intended action.
    337           *
    338           * @param   none
    339           *
    340           * @return  none
    341           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    342          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    343          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV     A,#-0x17
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    344            uint8 coor_to_end[4];//Ω” ’µƒŒﬁœﬂ ˝æ›£®≤…ºØ£©
    345            uint8 coor_to_con[4];//Ω” ’µƒŒﬁœﬂ ˝æ›(øÿ÷∆)
    346            uint8 byte_len;//◊÷Ω⁄≥§∂»
                         ^
Warning[Pe550]: variable "byte_len" was set but never used
    347            uint8 end_sensor[12];
    348            uint8 end_con[3];
    349            uint8 shidu_cel=0;// ™∂» µ ±÷µ
    350            float temp;
    351            switch ( pkt->clusterId )
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V0 + 0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 1,A
   \   000019   78..         MOV     R0,#?V0 + 0
   \   00001B   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   00001E   0100         DW        1
   \   000020   01           DB        1
   \   000021   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000023   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000025   ....         DW        ??SampleApp_MessageMSGCB_2
    352            {    
    353              case SAMPLEAPP_PERIODIC_CLUSTERID: //±Ì æ÷‹∆⁄∫Ø ˝
    354                    osal_memcpy(coor_to_end,pkt->cmd.Data,pkt->cmd.DataLength);   // ∂‘Œﬁœﬂ ˝æ›Ω¯––¥¶¿Ì
   \                     ??SampleApp_MessageMSGCB_1:
   \   000027                ; Setup parameters for call to function osal_memcpy
   \   000027   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00002D   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000030   7416         MOV     A,#0x16
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   AA82         MOV     R2,DPL
   \   000037   AB83         MOV     R3,DPH
   \   000039   12....       LCALL   ??osal_memcpy?relay
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?DEALLOC_XSTACK8
    355                    byte_len=pkt->cmd.DataLength;
    356                    if(coor_to_end[0]==0x01&&coor_to_end[1]==0x03)
   \   000041   7413         MOV     A,#0x13
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   E0           MOVX    A,@DPTR
   \   000047   6401         XRL     A,#0x1
   \   000049   6003         JZ      $+5
   \   00004B   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
   \   00004E   7414         MOV     A,#0x14
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   E0           MOVX    A,@DPTR
   \   000054   6403         XRL     A,#0x3
   \   000056   6003         JZ      $+5
   \   000058   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
    357                    {
    358                        end_sensor[0]=0x01;//µÿ÷∑
   \   00005B   7407         MOV     A,#0x7
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   7401         MOV     A,#0x1
   \   000062   F0           MOVX    @DPTR,A
    359                        end_sensor[1]=0x03;//π¶ƒ‹¥˙¬Î
   \   000063   7408         MOV     A,#0x8
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   7403         MOV     A,#0x3
   \   00006A   F0           MOVX    @DPTR,A
    360                        DHT11();  //ªÒ»°Œ¬ ™∂»
   \   00006B                ; Setup parameters for call to function DHT11
   \   00006B   12....       LCALL   ??DHT11?relay
    361                        end_sensor[2]=wendu_shi;
   \   00006E   90....       MOV     DPTR,#wendu_shi
   \   000071   E0           MOVX    A,@DPTR
   \   000072   C0E0         PUSH    A
   \   000074   7409         MOV     A,#0x9
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   D0E0         POP     A
   \   00007B   F0           MOVX    @DPTR,A
    362                        end_sensor[3]=wendu_ge;
   \   00007C   90....       MOV     DPTR,#wendu_ge
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   C0E0         PUSH    A
   \   000082   740A         MOV     A,#0xa
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   D0E0         POP     A
   \   000089   F0           MOVX    @DPTR,A
    363                        end_sensor[4]=shidu_shi;
   \   00008A   90....       MOV     DPTR,#shidu_shi
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   C0E0         PUSH    A
   \   000090   740B         MOV     A,#0xb
   \   000092   12....       LCALL   ?XSTACK_DISP0_8
   \   000095   D0E0         POP     A
   \   000097   F0           MOVX    @DPTR,A
    364                        end_sensor[5]=shidu_ge;
   \   000098   90....       MOV     DPTR,#shidu_ge
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   C0E0         PUSH    A
   \   00009E   740C         MOV     A,#0xc
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   D0E0         POP     A
   \   0000A5   F0           MOVX    @DPTR,A
    365                        temp=3.33-get5();//ªÒ»°—ÃŒÌ÷µ
   \   0000A6   75..B8       MOV     ?V0 + 4,#-0x48
   \   0000A9   75..1E       MOV     ?V0 + 5,#0x1e
   \   0000AC   75..55       MOV     ?V0 + 6,#0x55
   \   0000AF   75..40       MOV     ?V0 + 7,#0x40
   \   0000B2                ; Setup parameters for call to function get5
   \   0000B2   12....       LCALL   ??get5?relay
   \   0000B5   8A..         MOV     ?V0 + 0,R2
   \   0000B7   8B..         MOV     ?V0 + 1,R3
   \   0000B9   8C..         MOV     ?V0 + 2,R4
   \   0000BB   8D..         MOV     ?V0 + 3,R5
   \   0000BD   78..         MOV     R0,#?V0 + 4
   \   0000BF   79..         MOV     R1,#?V0 + 0
   \   0000C1   12....       LCALL   ?FLT_SUB
    366                        end_sensor[6]=(char)(temp)%10;
   \   0000C4   85....       MOV     ?V0 + 0,?V0 + 4
   \   0000C7   85....       MOV     ?V0 + 1,?V0 + 5
   \   0000CA   85....       MOV     ?V0 + 2,?V0 + 6
   \   0000CD   85....       MOV     ?V0 + 3,?V0 + 7
   \   0000D0   78..         MOV     R0,#?V0 + 0
   \   0000D2   12....       LCALL   ?FLT_TO_L
   \   0000D5   E5..         MOV     A,?V0 + 0
   \   0000D7   75F00A       MOV     B,#0xa
   \   0000DA   84           DIV     AB
   \   0000DB   740D         MOV     A,#0xd
   \   0000DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E0   12....       LCALL   ?Subroutine2 & 0xFFFF
    367                        end_sensor[7]=(char)(temp*10)%10;
   \                     ??CrossCallReturnLabel_4:
   \   0000E3   90....       MOV     DPTR,#__Constant_41200000
   \   0000E6   78..         MOV     R0,#?V0 + 8
   \   0000E8   12....       LCALL   ?L_MOV_X
   \   0000EB   78..         MOV     R0,#?V0 + 0
   \   0000ED   79..         MOV     R1,#?V0 + 8
   \   0000EF   12....       LCALL   ?FLT_MUL
   \   0000F2   78..         MOV     R0,#?V0 + 0
   \   0000F4   12....       LCALL   ?FLT_TO_L
   \   0000F7   E5..         MOV     A,?V0 + 0
   \   0000F9   75F00A       MOV     B,#0xa
   \   0000FC   84           DIV     AB
   \   0000FD   740E         MOV     A,#0xe
   \   0000FF   12....       LCALL   ?XSTACK_DISP0_8
   \   000102   12....       LCALL   ?Subroutine2 & 0xFFFF
    368                        end_sensor[8]=(char)(temp*100)%10;
   \                     ??CrossCallReturnLabel_5:
   \   000105   90....       MOV     DPTR,#__Constant_42c80000
   \   000108   78..         MOV     R0,#?V0 + 8
   \   00010A   12....       LCALL   ?L_MOV_X
   \   00010D   78..         MOV     R0,#?V0 + 0
   \   00010F   79..         MOV     R1,#?V0 + 8
   \   000111   12....       LCALL   ?FLT_MUL
   \   000114   78..         MOV     R0,#?V0 + 0
   \   000116   12....       LCALL   ?FLT_TO_L
   \   000119   E5..         MOV     A,?V0 + 0
   \   00011B   75F00A       MOV     B,#0xa
   \   00011E   84           DIV     AB
   \   00011F   740F         MOV     A,#0xf
   \   000121   12....       LCALL   ?XSTACK_DISP0_8
   \   000124   E5F0         MOV     A,B
   \   000126   F0           MOVX    @DPTR,A
    369                        end_sensor[9]=(char)(temp*1000)%10;
   \   000127   90....       MOV     DPTR,#__Constant_447a0000
   \   00012A   78..         MOV     R0,#?V0 + 0
   \   00012C   12....       LCALL   ?L_MOV_X
   \   00012F   78..         MOV     R0,#?V0 + 4
   \   000131   79..         MOV     R1,#?V0 + 0
   \   000133   12....       LCALL   ?FLT_MUL
   \   000136   78..         MOV     R0,#?V0 + 4
   \   000138   12....       LCALL   ?FLT_TO_L
   \   00013B   E5..         MOV     A,?V0 + 4
   \   00013D   75F00A       MOV     B,#0xa
   \   000140   84           DIV     AB
   \   000141   7410         MOV     A,#0x10
   \   000143   12....       LCALL   ?XSTACK_DISP0_8
   \   000146   E5F0         MOV     A,B
   \   000148   F0           MOVX    @DPTR,A
    370                        end_sensor[10]=0x68;
   \   000149   7411         MOV     A,#0x11
   \   00014B   12....       LCALL   ?XSTACK_DISP0_8
   \   00014E   7468         MOV     A,#0x68
   \   000150   F0           MOVX    @DPTR,A
    371                         if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    372                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    373                                 11,
    374                                 end_sensor,
    375                                 &SampleApp_TransID,
    376                                 AF_DISCV_ROUTE,
    377                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000151                ; Setup parameters for call to function AF_DataRequest
   \   000151   75..1E       MOV     ?V0 + 0,#0x1e
   \   000154   78..         MOV     R0,#?V0 + 0
   \   000156   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000159   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00015C   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00015F   78..         MOV     R0,#?V0 + 0
   \   000161   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000164   740A         MOV     A,#0xa
   \   000166   12....       LCALL   ?XSTACK_DISP0_8
   \   000169   8582..       MOV     ?V0 + 0,DPL
   \   00016C   8583..       MOV     ?V0 + 1,DPH
   \   00016F   78..         MOV     R0,#?V0 + 0
   \   000171   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000174   75..0B       MOV     ?V0 + 0,#0xb
   \   000177   75..00       MOV     ?V0 + 1,#0x0
   \   00017A   78..         MOV     R0,#?V0 + 0
   \   00017C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00017F   75..01       MOV     ?V0 + 0,#0x1
   \   000182   78..         MOV     R0,#?V0 + 0
   \   000184   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000187   7920         MOV     R1,#0x20
   \   000189   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00018B   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00018D   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00018F   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   000191   12....       LCALL   ??AF_DataRequest?relay
   \   000194   7409         MOV     A,#0x9
   \   000196   12....       LCALL   ?DEALLOC_XSTACK8
   \   000199   E9           MOV     A,R1
   \   00019A   6003         JZ      $+5
   \   00019C   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
    378                          {
    379                            
    380                            //∂‘¥´∏–∆˜Ω¯––¥¶¿Ì
    381                            shidu_cel=shidu_shi*10+shidu_ge;                
    382                            if(shidu_cel>set_shidu)// ™∂»◊„πª£¨πÿºÃµÁ∆˜
   \   00019F   90....       MOV     DPTR,#shidu_ge
   \   0001A2   C082         PUSH    DPL
   \   0001A4   75F00A       MOV     B,#0xa
   \   0001A7   90....       MOV     DPTR,#shidu_shi
   \   0001AA   E0           MOVX    A,@DPTR
   \   0001AB   A4           MUL     AB
   \   0001AC   7583..       MOV     DPH,#(shidu_ge >> 8) & 0xff
   \   0001AF   D082         POP     DPL
   \   0001B1   F8           MOV     R0,A
   \   0001B2   E0           MOVX    A,@DPTR
   \   0001B3   28           ADD     A,R0
   \   0001B4   F8           MOV     R0,A
   \   0001B5   90....       MOV     DPTR,#set_shidu
   \   0001B8   E0           MOVX    A,@DPTR
   \   0001B9   C3           CLR     C
   \   0001BA   98           SUBB    A,R0
   \   0001BB   5005         JNC     ??SampleApp_MessageMSGCB_3
    383                            {
    384                               P1_5=0;
   \   0001BD   C295         CLR     0x90.5
   \   0001BF   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
    385                            }
    386                            else
    387                            {
    388                               P1_5=1;//ø™ºÃµÁ∆˜£¨ƒ£ƒ‚ΩΩÀÆ
   \                     ??SampleApp_MessageMSGCB_3:
   \   0001C2   D295         SETB    0x90.5
   \   0001C4   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
    389                            }
    390                            
    391                          }
    392                          else
    393                          {
    394                            // Error occurred in request to send.
    395                          }            
    396                    }
    397                   break;
    398                  case  SAMPLEAPP_FLASH_CLUSTERID: //±Ì æ≤Œ ˝œ¬∑¢
    399                     osal_memcpy(coor_to_con,pkt->cmd.Data,pkt->cmd.DataLength);   // ∂‘Œﬁœﬂ ˝æ›Ω¯––¥¶¿Ì
   \                     ??SampleApp_MessageMSGCB_2:
   \   0001C7                ; Setup parameters for call to function osal_memcpy
   \   0001C7   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0001CA   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001CD   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0001D0   7406         MOV     A,#0x6
   \   0001D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D5   AA82         MOV     R2,DPL
   \   0001D7   AB83         MOV     R3,DPH
   \   0001D9   12....       LCALL   ??osal_memcpy?relay
   \   0001DC   7403         MOV     A,#0x3
   \   0001DE   12....       LCALL   ?DEALLOC_XSTACK8
    400                     if(coor_to_con[0]==0x01)
   \   0001E1   7403         MOV     A,#0x3
   \   0001E3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E6   E0           MOVX    A,@DPTR
   \   0001E7   6401         XRL     A,#0x1
   \   0001E9   7073         JNZ     ??SampleApp_MessageMSGCB_0
    401                     {
    402                        if(coor_to_con[1]==0x05)
   \   0001EB   7404         MOV     A,#0x4
   \   0001ED   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F0   E0           MOVX    A,@DPTR
   \   0001F1   6405         XRL     A,#0x5
   \   0001F3   7069         JNZ     ??SampleApp_MessageMSGCB_0
    403                       {
    404                         set_shidu=coor_to_con[3];
   \   0001F5   7406         MOV     A,#0x6
   \   0001F7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FA   E0           MOVX    A,@DPTR
   \   0001FB   90....       MOV     DPTR,#set_shidu
   \   0001FE   F0           MOVX    @DPTR,A
    405                         end_con[0]=0x01;
   \   0001FF   85..82       MOV     DPL,?XSP + 0
   \   000202   85..83       MOV     DPH,?XSP + 1
   \   000205   7401         MOV     A,#0x1
   \   000207   F0           MOVX    @DPTR,A
    406                         end_con[1]=0x05;
   \   000208   12....       LCALL   ?XSTACK_DISP0_8
   \   00020B   7405         MOV     A,#0x5
   \   00020D   F0           MOVX    @DPTR,A
    407                         end_con[2]=0x68;
   \   00020E   7402         MOV     A,#0x2
   \   000210   12....       LCALL   ?XSTACK_DISP0_8
   \   000213   7468         MOV     A,#0x68
   \   000215   F0           MOVX    @DPTR,A
    408                         AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    409                                 SAMPLEAPP_FLASH_CLUSTERID,3,end_con,
    410                                 &SampleApp_TransID,
    411                                 AF_DISCV_ROUTE,
    412                                 AF_DEFAULT_RADIUS);
   \   000216                ; Setup parameters for call to function AF_DataRequest
   \   000216   75..1E       MOV     ?V0 + 0,#0x1e
   \   000219   78..         MOV     R0,#?V0 + 0
   \   00021B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00021E   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000221   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000224   78..         MOV     R0,#?V0 + 0
   \   000226   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000229   7403         MOV     A,#0x3
   \   00022B   12....       LCALL   ?XSTACK_DISP0_8
   \   00022E   8582..       MOV     ?V0 + 0,DPL
   \   000231   8583..       MOV     ?V0 + 1,DPH
   \   000234   78..         MOV     R0,#?V0 + 0
   \   000236   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000239   75..03       MOV     ?V0 + 0,#0x3
   \   00023C   75..00       MOV     ?V0 + 1,#0x0
   \   00023F   78..         MOV     R0,#?V0 + 0
   \   000241   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000244   75..02       MOV     ?V0 + 0,#0x2
   \   000247   78..         MOV     R0,#?V0 + 0
   \   000249   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00024C   7920         MOV     R1,#0x20
   \   00024E   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000250   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000252   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   000254   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   000256   12....       LCALL   ??AF_DataRequest?relay
   \   000259   7409         MOV     A,#0x9
   \   00025B   12....       LCALL   ?DEALLOC_XSTACK8
    413                       }
    414                     }
    415                    
    416              
    417                break;
    418          
    419            }
    420          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   00025E   7417         MOV     A,#0x17
   \   000260   12....       LCALL   ?DEALLOC_XSTACK8
   \   000263   7F0C         MOV     R7,#0xc
   \   000265   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000268                REQUIRE _A_P1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E5F0         MOV     A,B
   \   000002   F0           MOVX    @DPTR,A
   \   000003   85....       MOV     ?V0 + 0,?V0 + 4
   \   000006   85....       MOV     ?V0 + 1,?V0 + 5
   \   000009   85....       MOV     ?V0 + 2,?V0 + 6
   \   00000C   85....       MOV     ?V0 + 3,?V0 + 7
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   EA           MOV     A,R2
   \   000001   241F         ADD     A,#0x1f
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FC           MOV     R4,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FD           MOV     R5,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   EA           MOV     A,R2
   \   000001   2421         ADD     A,#0x21
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F5..         MOV     ?V0 + 0,A
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F5..         MOV     ?V0 + 1,A
   \   000011   75..00       MOV     ?V0 + 2,#0x0
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   22           RET
    421          
    422          /*********************************************************************
    423           * @fn      SampleApp_SendPeriodicMessage
    424           *
    425           * @brief   Send the periodic message.
    426           *
    427           * @param   none
    428           *
    429           * @return  none
    430           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    431          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    432          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    433            
    434            
    435            
    436          }
   \   000000   02....       LJMP    ?BRET
    437          
    438          /*********************************************************************
    439           * @fn      SampleApp_SendFlashMessage
    440           *
    441           * @brief   Send the flash message to group 1.
    442           *
    443           * @param   flashTime - in milliseconds
    444           *
    445           * @return  none
    446           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    447          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    448          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    449           
    450          }
   \   000000   02....       LJMP    ?BRET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for set_shidu>`:
   \   000000   3C           DB 60

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_41200000:
   \   000000   00002041     DD 41200000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_42c80000:
   \   000000   0000C842     DD 42C80000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_447a0000:
   \   000000   00007A44     DD 447A0000H
    451          
    452          
    453          

   Maximum stack usage in bytes:

     Function                      ISTACK PSTACK XSTACK
     --------                      ------ ------ ------
     SampleApp_Init                    0      0     14
       -> afRegister                   0      0     22
       -> RegisterForKeys              0      0     22
       -> osal_memcpy                  0      0     28
       -> aps_AddGroup                 0      0     22
     SampleApp_MessageMSGCB            2      0     64
       -> osal_memcpy                  0      0     92
       -> DHT11                        0      0     86
       -> get5                         0      0     86
       -> AF_DataRequest               0      0    104
       -> osal_memcpy                  0      0     92
       -> AF_DataRequest               0      0    104
     SampleApp_ProcessEvent            0      0     12
       -> osal_msg_receive             0      0     24
       -> HalLedBlink                  0      0     24
       -> osal_msg_deallocate          0      0     24
       -> osal_msg_receive             0      0     24
       -> SampleApp_MessageMSGCB       0      0     24
       -> osal_start_timerEx           0      0     24
     SampleApp_SendFlashMessage        0      0      0
     SampleApp_SendPeriodicMessage     0      0      0


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     _A_P1                                    1
     P1SEL                                    1
     P1INP                                    1
     P1DIR                                    1
     LedState                                 1
     set_shidu                                1
     SampleApp_ClusterList                    8
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     sensor_value                            20
     SampleApp_Init                         150
     SampleApp_ProcessEvent                 150
     SampleApp_MessageMSGCB                 616
     ?Subroutine2                            16
     ?Subroutine1                            16
     ?Subroutine0                            23
     SampleApp_SendPeriodicMessage            3
     SampleApp_SendFlashMessage               3
     ?<Initializer for set_shidu>             1
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ?<Constant "Group 1">                    8
     __Constant_41200000                      4
     __Constant_42c80000                      4
     __Constant_447a0000                      4

 
 977 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
   4 bytes in segment SFR_AN
   1 byte  in segment XDATA_I
   1 byte  in segment XDATA_ID
  40 bytes in segment XDATA_ROM_C
  74 bytes in segment XDATA_Z
 
 1 008 bytes of CODE  memory
    28 bytes of CONST memory (+ 12 bytes shared)
     0 bytes of DATA  memory (+  4 bytes shared)
    75 bytes of XDATA memory

Errors: none
Warnings: 2
