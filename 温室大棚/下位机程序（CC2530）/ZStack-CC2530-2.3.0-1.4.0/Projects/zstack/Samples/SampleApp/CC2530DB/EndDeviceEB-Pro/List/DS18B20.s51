///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.40194/W32 for 8051        05/Oct/2018  13:44:21 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\Source\DS18B20.c                           /
//    Command line       =  -f F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\Z /
//                          Stack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\ /
//                          SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEnd /
//                          ev.cfg (-DCPU32MHZ -DROOT=__near_func             /
//                          -DBLINK_LEDS) -f F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³Ì /
//                          Ðò£¨zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\Tools\C /
//                          C2530DB\f8wConfig.cfg (-DSECURE=0                 /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 F:\2019\Íõ¼üÄþ-20181005\ÏÂ /
//                          Î»»ú³ÌÐò£¨zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Proj /
//                          ects\zstack\Samples\SampleApp\Source\DS18B20.c    /
//                          -D ZIGBEEPRO -D NWK_AUTO_POLL -D ZTOOL_P1 -D      /
//                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D       /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\EndDeviceEB-Pro\List\ -lA         /
//                          F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\EndDeviceEB-Pro\List\             /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\EndDeviceEB-Pro\Obj\ -e --debug   /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»» /
//                          ú³ÌÐò£¨zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\    /
//                          -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\Z /
//                          Stack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\ /
//                          SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I    /
//                          F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\ -I  /
//                          F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INC /
//                          LUDE\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigb /
//                          ee£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\HAL\TARGET\CC2530EB\ -I                         /
//                          F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MC /
//                          U\CCSOC\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨z /
//                          igbee£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\OSAL\INCLUDE\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ /
//                          »»ú³ÌÐò£¨zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. /
//                          \..\COMPONENTS\STACK\AF\ -I                       /
//                          F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\N /
//                          WK\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee /
//                          £©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ /
//                          STACK\SEC\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£ /
//                          ¨zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zsta /
//                          ck\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\STACK\SAPI\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ /
//                          »»ú³ÌÐò£¨zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. /
//                          \..\COMPONENTS\STACK\SYS\ -I                      /
//                          F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\Z /
//                          DO\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee /
//                          £©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ /
//                          ZMAC\F8W\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨ /
//                          zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstac /
//                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPO /
//                          NENTS\ZMAC\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò /
//                          £¨zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zst /
//                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\SERVICES\SADDR\ -I                        /
//                          F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICE /
//                          S\SDATA\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨z /
//                          igbee£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\MAC\INCLUDE\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ» /
//                          »ú³ÌÐò£¨zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Projec /
//                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ /
//                          ..\COMPONENTS\MAC\HIGH_LEVEL\ -I                  /
//                          F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW /
//                          _LEVEL\srf04\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³Ì /
//                          Ðò£¨zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz   /
//                          --require_prototypes                              /
//    List file          =  F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\EndDeviceEB-Pro\List\DS18B20.s51  /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME DS18B20

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?S_SHL
        EXTERN ?US_DIV_MOD
        EXTERN ?V0
        EXTERN __INIT_XDATA_Z

        PUBLIC ??DataChange?relay
        FUNCTION ??DataChange?relay,0203H
        PUBLIC ??Delay_nus?relay
        FUNCTION ??Delay_nus?relay,0203H
        PUBLIC ??init_1820?relay
        FUNCTION ??init_1820?relay,0203H
        PUBLIC ??match_rom?relay
        FUNCTION ??match_rom?relay,0203H
        PUBLIC ??read_1820?relay
        FUNCTION ??read_1820?relay,0203H
        PUBLIC ??read_data?relay
        FUNCTION ??read_data?relay,0203H
        PUBLIC ??write_1820?relay
        FUNCTION ??write_1820?relay,0203H
        PUBLIC DataChange
        FUNCTION DataChange,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC Delay_nus
        FUNCTION Delay_nus,080203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBWEAK P0DIR
        PUBWEAK _A_P0
        PUBLIC ch1
        PUBLIC flag
        PUBLIC id
        PUBLIC init_1820
        FUNCTION init_1820,0a1203H
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC match_rom
        FUNCTION match_rom,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC read_1820
        FUNCTION read_1820,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC read_data
        FUNCTION read_data,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC sensor_data_value
        PUBLIC write_1820
        FUNCTION write_1820,0a1203H
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
DataChange          SYMBOL "DataChange"
??DataChange?relay  SYMBOL "?relay", DataChange
Delay_nus           SYMBOL "Delay_nus"
??Delay_nus?relay   SYMBOL "?relay", Delay_nus
init_1820           SYMBOL "init_1820"
??init_1820?relay   SYMBOL "?relay", init_1820
match_rom           SYMBOL "match_rom"
??match_rom?relay   SYMBOL "?relay", match_rom
read_1820           SYMBOL "read_1820"
??read_1820?relay   SYMBOL "?relay", read_1820
read_data           SYMBOL "read_data"
??read_data?relay   SYMBOL "?relay", read_data
write_1820          SYMBOL "write_1820"
??write_1820?relay  SYMBOL "?relay", write_1820

        EXTERN sensor_value

// F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\DS18B20.c
//    1 #include "DS18B20.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1
//    2 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//    3 uint8 id[8];
id:
        DS 8
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//    4 uint8 sensor_data_value[2];
sensor_data_value:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//    5 uint8 ch1[9];
ch1:
        DS 9
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//    6 uint8 flag; 
flag:
        DS 1
        REQUIRE __INIT_XDATA_Z
//    7 extern uint8 cgq_router[20];
//    8 extern uint8 cgq_end[20];
//    9 extern uint8 sensor_value[20];//±£´æ´«¸ÐÆ÷Öµ
//   10 
//   11 /*
//   12 cc2430µÄ1¸ö»úÆ÷ÖÜÆÚ = 1¸öÕñµ´ÖÜÆÚ
//   13 ÔÚ32MHzÖ÷ÆµÏÂ¹¤×÷£º
//   14 1¸öÕñµ´ÖÜÆÚ = 1/32  uS £¬¼´ 1¸ö»úÆ÷ÖÜÆÚÒ²ÊÇ1/32 uS
//   15 ËùÒÔÈç¹ûÖ´ÐÐÒ»Ìõ¼õ·¨Ö¸ÁîÐèÒª1¸ö»úÆ÷ÖÜÆÚ£¬ÄÇÃ´¾Í¿ÉÒÔÍ¨¹ý¼ÆÊýÀ´ÊµÏÖ¶¨Ê±
//   16 */
//   17 
//   18 //#pragma optimize=none

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   19 uint8 Delay_nus(uint16 s) 
Delay_nus:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Delay_nus
        CODE
//   20 {  
        ; Saved register size: 0
        ; Auto size: 0
        SJMP    ??Delay_nus_0
//   21   while (s--)
//   22   {
//   23     asm("NOP");
??Delay_nus_1:
        NOP
//   24     asm("NOP");
        NOP
//   25     asm("NOP");
        NOP
//   26     
//   27     asm("NOP");
        NOP
//   28     asm("NOP");
        NOP
//   29     asm("NOP");
        NOP
//   30   }
??Delay_nus_0:
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R2
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R3,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??Delay_nus_1
//   31  return 0;
        MOV     R1,#0x0
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
//   32 }
//   33 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   34 void init_1820(void) 
init_1820:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function init_1820
        CODE
//   35 {
        FUNCALL init_1820, Delay_nus
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL init_1820, Delay_nus
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL init_1820, Delay_nus
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL init_1820, Delay_nus
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   36   SET_OUT; 
        ORL     0xfd,#0x80
        NOP
//   37   SET_DQ;//Êä³ö1
        SETB    0x80.7
        NOP
//   38   CL_DQ; 
        CLR     0x80.7
        NOP
//   39   Delay_nus(550);//À­µÍÒ»¶ÎÊ±¼ä 550
        ; Setup parameters for call to function Delay_nus
        MOV     R2,#0x26
        MOV     R3,#0x2
        LCALL   ??Delay_nus?relay
//   40   SET_DQ;//ÊÍ·Å 
        SETB    0x80.7
        NOP
//   41   SET_IN;//ÊäÈë 
        ANL     0xfd,#0x7f
        NOP
//   42   Delay_nus(40); //ÊÍ·Å×ÜÏßºóµÈ´ý15-60us 40
        ; Setup parameters for call to function Delay_nus
        MOV     R2,#0x28
        MOV     R3,#0x0
        LCALL   ??Delay_nus?relay
//   43   while((IN_DQ)&&Delay_nus(200)) 
??init_1820_0:
        MOV     C,0x80.7
        JNC     ??init_1820_1
        ; Setup parameters for call to function Delay_nus
        MOV     R2,#-0x38
        MOV     R3,#0x0
        LCALL   ??Delay_nus?relay
        MOV     A,R1
        JNZ     ??init_1820_0
//   44   {;}//µÈ´ý»Ø¸´ 
//   45   Delay_nus(240);//»Ø¸´µÄµÍµçÆ½ÔÚ60µ½240us  
??init_1820_1:
        ; Setup parameters for call to function Delay_nus
        MOV     R2,#-0x10
        MOV     R3,#0x0
        LCALL   ??Delay_nus?relay
//   46   SET_OUT; 
        ORL     0xfd,#0x80
        NOP
//   47   SET_DQ;//»Øµ½³õÊ¼DQ=1£»
        SETB    0x80.7
        NOP
//   48 }
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
        REQUIRE P0DIR
        REQUIRE _A_P0
//   49 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   50 void write_1820(uint8 x)  
write_1820:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function write_1820
        CODE
//   51 {  
        FUNCALL write_1820, Delay_nus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
//   52   uint8 m;    
//   53   SET_OUT;
        ORL     0xfd,#0x80
        NOP
//   54   for(m=0;m<8;m++)  
        MOV     R6,#0x0
//   55   {  
//   56      CL_DQ;
??write_1820_0:
        CLR     0x80.7
        NOP
//   57      if(x&(1<<m))    //Ð´Êý¾Ý£¬´ÓµÍÎ»¿ªÊ¼  
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     A,R6
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        ANL     A,R7
        JZ      ??write_1820_1
//   58      {
//   59       SET_DQ; 
        SETB    0x80.7
        SJMP    ??write_1820_2
//   60      }
//   61      else  
//   62      {
//   63       CL_DQ;
??write_1820_1:
        CLR     0x80.7
??write_1820_2:
        NOP
//   64      }
//   65      Delay_nus(40);   //15~60us  
        ; Setup parameters for call to function Delay_nus
        MOV     R2,#0x28
        MOV     R3,#0x0
        LCALL   ??Delay_nus?relay
//   66      SET_DQ;  
        SETB    0x80.7
        NOP
//   67   }
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x8
        JC      ??write_1820_0
//   68   SET_DQ;  
        SETB    0x80.7
        NOP
//   69 } 
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
        REQUIRE P0DIR
        REQUIRE _A_P0
//   70 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   71 uint8 read_1820(void)  
read_1820:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function read_1820
        CODE
//   72 {   
        FUNCALL read_1820, Delay_nus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//   73   uint8 temp,k,n;    
//   74   temp=0;  
        MOV     ?V0 + 0,#0x0
//   75   for(n=0;n<8;n++)  
        MOV     R6,#0x0
//   76   {  
//   77     CL_DQ;     
??read_1820_0:
        CLR     0x80.7
        NOP
//   78     SET_DQ; 
        SETB    0x80.7
        NOP
//   79     SET_IN;  
        ANL     0xfd,#0x7f
        NOP
        MOV     ?V0 + 2,#0x1
        MOV     ?V0 + 3,#0x0
        MOV     A,R6
        MOV     R0,#?V0 + 2
        LCALL   ?S_SHL
        MOV     A,?V0 + 2
        MOV     C,0x80.7
        JNC     ??read_1820_1
//   80     k=IN_DQ;    //¶ÁÊý¾Ý,´ÓµÍÎ»¿ªÊ¼  
//   81     if(k)  
//   82     temp|=(1<<n);  
        ORL     ?V0 + 0,A
        SJMP    ??read_1820_2
//   83     else  
//   84     temp&=~(1<<n);  
??read_1820_1:
        CPL     A
        ANL     ?V0 + 0,A
//   85     Delay_nus(70); //60~120us      70
??read_1820_2:
        ; Setup parameters for call to function Delay_nus
        MOV     R2,#0x46
        MOV     R3,#0x0
        LCALL   ??Delay_nus?relay
//   86     SET_OUT; 
        ORL     0xfd,#0x80
        NOP
//   87   }  
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x8
        JC      ??read_1820_0
//   88   return (temp);  
        MOV     R1,?V0 + 0
        CFI EndBlock cfiBlock3
        REQUIRE ?Subroutine0
        REQUIRE _A_P0
        REQUIRE P0DIR
        ; // Fall through to label ?Subroutine0
//   89 }  

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock4
//   90 //ËÑË÷ID
//   91 /*void get_id()
//   92 {     
//   93   init_1820();        //resert
//   94   write_1820(0x33); 
//   95   
//   96   for(unsigned char ii=0;ii<8;ii++)
//   97   {
//   98     id[ii]=read_1820();
//   99   }
//  100 }*/
//  101 
//  102 /*¹¦ÄÜÆ¥Åä*/
//  103 uint8 match_rom(uint8 *rom);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  104 uint8 match_rom(uint8 *rom)
match_rom:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function match_rom
        CODE
//  105 {
        FUNCALL match_rom, init_1820
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL match_rom, write_1820
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL match_rom, write_1820
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  106   unsigned char i;
//  107   init_1820();
        ; Setup parameters for call to function init_1820
        LCALL   ??init_1820?relay
//  108   write_1820(0x55);
        ; Setup parameters for call to function write_1820
        MOV     R1,#0x55
        LCALL   ??write_1820?relay
//  109   for(i=8;i>0;i--)
        MOV     ?V0 + 2,#0x8
//  110   {
//  111           write_1820(*(rom+i-1));
??match_rom_0:
        ; Setup parameters for call to function write_1820
        MOV     ?V0 + 0,?V0 + 2
        MOV     A,R6
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??write_1820?relay
//  112   }
        DEC     ?V0 + 2
        MOV     A,?V0 + 2
        JNZ     ??match_rom_0
//  113   return 1;
        MOV     R1,#0x1
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock5
//  114 }
//  115  

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  116 void read_data(uint8 * pSensorValue)
read_data:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function read_data
        CODE
//  117 {
        FUNCALL read_data, init_1820
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL read_data, write_1820
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL read_data, write_1820
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL read_data, Delay_nus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL read_data, init_1820
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL read_data, write_1820
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL read_data, write_1820
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL read_data, read_1820
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL read_data, read_1820
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  118   uint8 temh,teml; 
//  119   uint8 a,b,c;
//  120   int j=0;
//  121 
//  122   init_1820();  //¸´Î»18b20  
        ; Setup parameters for call to function init_1820
        LCALL   ?Subroutine2 & 0xFFFF
//  123   write_1820(0xcc);   // ·¢³ö×ª»»ÃüÁî ËÑË÷Æ÷¼þ 
//  124   write_1820(0x44);     //Æô¶¯  
??CrossCallReturnLabel_2:
        ; Setup parameters for call to function write_1820
        MOV     R1,#0x44
        LCALL   ??write_1820?relay
//  125   //Delay_nus(50000);
//  126   for(j=20;j>1;j--)  
        MOV     ?V0 + 0,#0x13
//  127     Delay_nus(500);
??read_data_0:
        ; Setup parameters for call to function Delay_nus
        MOV     R2,#-0xc
        MOV     R3,#0x1
        LCALL   ??Delay_nus?relay
        DEC     ?V0 + 0
        MOV     A,?V0 + 0
        JNZ     ??read_data_0
//  128   init_1820();  
        ; Setup parameters for call to function init_1820
        LCALL   ?Subroutine2 & 0xFFFF
//  129   write_1820(0xcc);
//  130   write_1820(0xbe); 
??CrossCallReturnLabel_3:
        ; Setup parameters for call to function write_1820
        MOV     R1,#-0x42
        LCALL   ??write_1820?relay
//  131        
//  132   teml=read_1820();  //¶ÁÊý¾Ý  
        ; Setup parameters for call to function read_1820
        LCALL   ??read_1820?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
//  133   temh=read_1820();  
        ; Setup parameters for call to function read_1820
        LCALL   ??read_1820?relay
        MOV     A,R1
//  134   if(temh&0x80)//ÅÐ¶ÏÕý¸º
        MOV     C,0xE0 /* A   */.7
        MOV     DPTR,#flag
        JNC     ??read_data_1
//  135   {
//  136     flag=1;
        MOV     A,#0x1
        MOVX    @DPTR,A
//  137     c=0;
//  138     c=c|temh;
//  139     c=c&0x00ff;
//  140     c=c<<8;
//  141     a=c;
//  142 
//  143     a=c|teml;
//  144 
//  145     a=(a^0xffff);//Òì»ò
//  146     a=a+1;  //È¡·´¼Ó1
        MOV     A,#-0x1
        XRL     A,?V0 + 0
        INC     A
        MOV     R0,A
//  147     teml=a&0x0f;
        MOV     A,#0xf
        ANL     A,R0
        MOV     ?V0 + 0,A
//  148     temh=a>>4;
        MOV     A,R0
        SWAP    A
        ANL     A,#0xf
        MOV     R1,A
        SJMP    ??read_data_2
//  149   }
//  150   else
//  151   {
//  152     flag=0;   //ÎªÕý
??read_data_1:
        CLR     A
        MOVX    @DPTR,A
//  153     a=temh<<4;
//  154     a+=(teml&0xf0)>>4; //µÃµ½¸ßÎ»µÄÖµ
//  155     b=teml&0x0f;
//  156     temh=a;
        MOV     A,?V0 + 0
        SWAP    A
        ANL     A,#0xf
        MOV     R0,A
        MOV     A,R1
        SWAP    A
        ANL     A,#0xf0
        ADD     A,R0
        MOV     R1,A
//  157     teml=b&0x00ff;
        ANL     ?V0 + 0,#0xf
//  158   }
//  159   pSensorValue[0]=teml;
??read_data_2:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  160   pSensorValue[1]=temh;
        MOV     A,R1
        INC     DPTR
        MOVX    @DPTR,A
//  161 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond7 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        LCALL   ??init_1820?relay
        ; Setup parameters for call to function write_1820
        ; Setup parameters for call to function write_1820
        MOV     R1,#-0x34
        LCALL   ??write_1820?relay
        RET
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9
//  162 
//  163     
//  164 ////////////´¦ÀíÊý¾Ý²¿·Ö/////////////////

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  165 void DataChange(uint8 * pSensorValue,uint8 * pChBuf)
DataChange:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function DataChange
        CODE
//  166 {
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  167   uint8 temh,teml;
//  168   uint16 num;
//  169 
//  170   
//  171   teml=pSensorValue[0];
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R0,A
//  172   temh=pSensorValue[1];
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
//  173   pChBuf[0]='T';//µ±Ç°ÏÔÊ¾µÄ´«¸ÐÆ÷µÄ±àºÅ
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     A,#0x54
        MOVX    @DPTR,A
//  174   pChBuf[1]=':';
        INC     DPTR
        MOV     A,#0x3a
        MOVX    @DPTR,A
//  175   num=teml*625;          //Ð¡Êý²¿·ÖµÄÈ¡ÖµÃ¿Î»´ú±í0.0625£¨¾«¶È£©
        MOV     A,R0
        MOV     B,#0x71
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x2
        MUL     AB
        ADD     A,R2
        MOV     R1,A
//  176   if(flag==1)            //ÅÐ¶ÏÕý¸ºÎÂ¶È
        MOV     A,R4
        ADD     A,#0x2
        MOV     R2,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R3,A
        MOV     DPTR,#flag
        MOVX    A,@DPTR
        XRL     A,#0x1
        MOV     DPL,R2
        MOV     DPH,R3
        JNZ     ??DataChange_0
//  177   {
//  178     pChBuf[2]='-';              //+0x2d Îª±ä"-"ASCIIÂë
        MOV     A,#0x2d
        SJMP    ??DataChange_1
//  179   }
//  180   else 
//  181     pChBuf[2]='+';   
??DataChange_0:
        MOV     A,#0x2b
??DataChange_1:
        MOVX    @DPTR,A
//  182   if(temh/100==0)
        MOV     A,R4
        ADD     A,#0x3
        MOV     DPL,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     B,#0x64
        MOV     A,?V0 + 2
        DIV     AB
        MOV     R2,A
        JNZ     ??DataChange_2
//  183     pChBuf[3]=' ';
        MOV     A,#0x20
        SJMP    ??DataChange_3
//  184   else
//  185     pChBuf[3]=temh/100+0x30;      //+0x30 Îª±ä 0~9 ASCIIÂë
??DataChange_2:
        MOV     A,#0x30
        ADD     A,R2
??DataChange_3:
        MOVX    @DPTR,A
//  186   // if((temh/10%10==0)&&(temh/100==0))
//  187   // pChBuf[4]=' ';
//  188  // else
//  189     pChBuf[4]=temh/10%10+0x30;
        MOV     B,#0xa
        MOV     A,?V0 + 2
        DIV     AB
        MOV     B,#0xa
        DIV     AB
        MOV     A,B
        ADD     A,#0x30
        MOV     ?V0 + 3,A
        MOV     A,R4
        ADD     A,#0x4
        MOV     R2,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R3,A
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
//  190   pChBuf[5]=temh%10+0x30;
        MOV     A,R4
        ADD     A,#0x5
        INC     R2
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R3,A
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 2
        MOV     B,#0xa
        DIV     AB
        MOV     A,B
        ADD     A,#0x30
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine1 & 0xFFFF
//  191   pChBuf[6]='.';
??CrossCallReturnLabel_0:
        MOV     A,#0x2e
        MOVX    @DPTR,A
//  192   pChBuf[7]=num/1000+0x30;//ºöÂÔÐ¡Êýµãºó1Î»µÄÊý
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ?US_DIV_MOD
        MOV     A,R0
        ADD     A,#0x30
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine1 & 0xFFFF
//  193   pChBuf[8]='\0';
??CrossCallReturnLabel_1:
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  194   if(pChBuf[4]>='5')
        MOV     A,?V0 + 3
        CLR     C
        SUBB    A,#0x35
        JC      ??DataChange_4
//  195     pChBuf[4]='2';
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x32
        MOVX    @DPTR,A
//  196 
//  197   sensor_value[1]=pChBuf[4];
??DataChange_4:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     DPTR,#sensor_value + 1
        MOVX    @DPTR,A
//  198   sensor_value[2]=pChBuf[5]; 
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     DPTR,#sensor_value + 2
        MOVX    @DPTR,A
//  199 }
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock10

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond11 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        MOVX    @DPTR,A
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Delay_nus?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Delay_nus

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??init_1820?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    init_1820

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??write_1820?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    write_1820

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??read_1820?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    read_1820

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??match_rom?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    match_rom

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??read_data?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    read_data

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??DataChange?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    DataChange

        END
//  200 
//  201 
//  202 
//  203 
//  204 
// 
// 651 bytes in segment BANKED_CODE
//  42 bytes in segment BANK_RELAYS
//   2 bytes in segment SFR_AN
//  20 bytes in segment XDATA_Z
// 
// 693 bytes of CODE  memory
//   0 bytes of DATA  memory (+ 2 bytes shared)
//  20 bytes of XDATA memory
//
//Errors: none
//Warnings: none
