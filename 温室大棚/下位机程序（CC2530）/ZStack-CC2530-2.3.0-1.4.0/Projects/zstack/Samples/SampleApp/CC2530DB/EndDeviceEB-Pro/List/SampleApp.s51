///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.40194/W32 for 8051        05/Oct/2018  13:58:25 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\Source\SampleApp.c                         /
//    Command line       =  -f F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\Z /
//                          Stack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\ /
//                          SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEnd /
//                          ev.cfg (-DCPU32MHZ -DROOT=__near_func             /
//                          -DBLINK_LEDS) -f F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³Ì /
//                          Ðò£¨zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\Tools\C /
//                          C2530DB\f8wConfig.cfg (-DSECURE=0                 /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 F:\2019\Íõ¼üÄþ-20181005\ÏÂ /
//                          Î»»ú³ÌÐò£¨zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Proj /
//                          ects\zstack\Samples\SampleApp\Source\SampleApp.c  /
//                          -D ZIGBEEPRO -D NWK_AUTO_POLL -D ZTOOL_P1 -D      /
//                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D       /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\EndDeviceEB-Pro\List\ -lA         /
//                          F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\EndDeviceEB-Pro\List\             /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\EndDeviceEB-Pro\Obj\ -e --debug   /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»» /
//                          ú³ÌÐò£¨zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\    /
//                          -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\Z /
//                          Stack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\ /
//                          SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I    /
//                          F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\ -I  /
//                          F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INC /
//                          LUDE\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigb /
//                          ee£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\HAL\TARGET\CC2530EB\ -I                         /
//                          F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MC /
//                          U\CCSOC\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨z /
//                          igbee£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\OSAL\INCLUDE\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ /
//                          »»ú³ÌÐò£¨zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. /
//                          \..\COMPONENTS\STACK\AF\ -I                       /
//                          F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\N /
//                          WK\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee /
//                          £©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ /
//                          STACK\SEC\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£ /
//                          ¨zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zsta /
//                          ck\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\STACK\SAPI\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ /
//                          »»ú³ÌÐò£¨zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. /
//                          \..\COMPONENTS\STACK\SYS\ -I                      /
//                          F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\Z /
//                          DO\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee /
//                          £©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ /
//                          ZMAC\F8W\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨ /
//                          zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstac /
//                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPO /
//                          NENTS\ZMAC\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò /
//                          £¨zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zst /
//                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\SERVICES\SADDR\ -I                        /
//                          F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICE /
//                          S\SDATA\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨z /
//                          igbee£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\MAC\INCLUDE\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ» /
//                          »ú³ÌÐò£¨zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Projec /
//                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ /
//                          ..\COMPONENTS\MAC\HIGH_LEVEL\ -I                  /
//                          F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW /
//                          _LEVEL\srf04\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³Ì /
//                          Ðò£¨zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz   /
//                          --require_prototypes                              /
//    List file          =  F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\EndDeviceEB-Pro\List\SampleApp.s5 /
//                          1                                                 /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME SampleApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_GE
        EXTERN ?FLT_MUL
        EXTERN ?FLT_TO_L
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??SampleApp_HandleKeys?relay
        FUNCTION ??SampleApp_HandleKeys?relay,0203H
        PUBLIC ??SampleApp_Init?relay
        FUNCTION ??SampleApp_Init?relay,0203H
        PUBLIC ??SampleApp_MessageMSGCB?relay
        FUNCTION ??SampleApp_MessageMSGCB?relay,0203H
        PUBLIC ??SampleApp_ProcessEvent?relay
        FUNCTION ??SampleApp_ProcessEvent?relay,0203H
        PUBLIC ??SampleApp_SendFlashMessage?relay
        FUNCTION ??SampleApp_SendFlashMessage?relay,0203H
        PUBLIC ??SampleApp_SendPeriodicMessage?relay
        FUNCTION ??SampleApp_SendPeriodicMessage?relay,0203H
        PUBLIC ??delay?relay
        FUNCTION ??delay?relay,0203H
        PUBLIC ??delay_nus?relay
        FUNCTION ??delay_nus?relay,0203H
        FUNCTION ??rxCB?relay,0203H
        PUBLIC LedState
        PUBWEAK P0DIR
        PUBWEAK P0SEL
        PUBWEAK P1DIR
        PUBWEAK P1INP
        PUBWEAK P1SEL
        PUBLIC SampleAppFlashCounter
        PUBLIC SampleAppPeriodicCounter
        PUBLIC SampleApp_ClusterList
        PUBLIC SampleApp_Flash_DstAddr
        PUBLIC SampleApp_Group
        PUBLIC SampleApp_HandleKeys
        FUNCTION SampleApp_HandleKeys,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC SampleApp_Init
        FUNCTION SampleApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        PUBLIC SampleApp_MessageMSGCB
        FUNCTION SampleApp_MessageMSGCB,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC SampleApp_NwkState
        PUBLIC SampleApp_Periodic_DstAddr
        PUBLIC SampleApp_ProcessEvent
        FUNCTION SampleApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC SampleApp_SendFlashMessage
        FUNCTION SampleApp_SendFlashMessage,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC SampleApp_SendPeriodicMessage
        FUNCTION SampleApp_SendPeriodicMessage,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 40, STACK
        PUBLIC SampleApp_SimpleDesc
        PUBLIC SampleApp_TaskID
        PUBLIC SampleApp_TransID
        PUBLIC SampleApp_epDesc
        PUBWEAK _A_P0
        PUBWEAK _A_P1
        PUBWEAK __Constant_41200000
        PUBWEAK __Constant_42040000
        PUBWEAK __Constant_425c0001
        PUBWEAK __Constant_42c60000
        PUBWEAK __Constant_42c80000
        PUBWEAK __Constant_447a0000
        PUBLIC delay
        FUNCTION delay,080203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC delay_nus
        FUNCTION delay_nus,080203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC flag_coord
        PUBLIC flag_end_1
        FUNCTION rxCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC sensor_value
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
HalUARTOpen         SYMBOL "HalUARTOpen"
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
osal_memcpy         SYMBOL "osal_memcpy"
aps_AddGroup        SYMBOL "aps_AddGroup"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
HalLcd_HW_Init      SYMBOL "HalLcd_HW_Init"
LCD_P16x16Ch        SYMBOL "LCD_P16x16Ch"
LCD_P8x16Str        SYMBOL "LCD_P8x16Str"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
HalUARTWrite        SYMBOL "HalUARTWrite"
read_data           SYMBOL "read_data"
DataChange          SYMBOL "DataChange"
getHR202_6          SYMBOL "getHR202_6"
getLight_5          SYMBOL "getLight_5"
Onboard_wait        SYMBOL "Onboard_wait"
AF_DataRequest      SYMBOL "AF_DataRequest"
LCD_CLS             SYMBOL "LCD_CLS"
HalUARTRead         SYMBOL "HalUARTRead"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??DataChange?relay  SYMBOL "?relay", DataChange
??HalLcd_HW_Init?relay SYMBOL "?relay", HalLcd_HW_Init
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??LCD_CLS?relay     SYMBOL "?relay", LCD_CLS
??LCD_P16x16Ch?relay SYMBOL "?relay", LCD_P16x16Ch
??LCD_P8x16Str?relay SYMBOL "?relay", LCD_P8x16Str
??Onboard_wait?relay SYMBOL "?relay", Onboard_wait
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??afRegister?relay  SYMBOL "?relay", afRegister
??aps_AddGroup?relay SYMBOL "?relay", aps_AddGroup
??getHR202_6?relay  SYMBOL "?relay", getHR202_6
??getLight_5?relay  SYMBOL "?relay", getLight_5
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??read_data?relay   SYMBOL "?relay", read_data
SampleApp_HandleKeys SYMBOL "SampleApp_HandleKeys"
??SampleApp_HandleKeys?relay SYMBOL "?relay", SampleApp_HandleKeys
SampleApp_Init      SYMBOL "SampleApp_Init"
??SampleApp_Init?relay SYMBOL "?relay", SampleApp_Init
SampleApp_MessageMSGCB SYMBOL "SampleApp_MessageMSGCB"
??SampleApp_MessageMSGCB?relay SYMBOL "?relay", SampleApp_MessageMSGCB
SampleApp_ProcessEvent SYMBOL "SampleApp_ProcessEvent"
??SampleApp_ProcessEvent?relay SYMBOL "?relay", SampleApp_ProcessEvent
SampleApp_SendFlashMessage SYMBOL "SampleApp_SendFlashMessage"
??SampleApp_SendFlashMessage?relay SYMBOL "?relay", SampleApp_SendFlashMessage
SampleApp_SendPeriodicMessage SYMBOL "SampleApp_SendPeriodicMessage"
??SampleApp_SendPeriodicMessage?relay SYMBOL "?relay", SampleApp_SendPeriodicMessage
delay               SYMBOL "delay"
??delay?relay       SYMBOL "?relay", delay
delay_nus           SYMBOL "delay_nus"
??delay_nus?relay   SYMBOL "?relay", delay_nus

        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_AddGroup
        FUNCTION aps_AddGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcd_HW_Init
        FUNCTION HalLcd_HW_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_P16x16Ch
        FUNCTION LCD_P16x16Ch,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_P8x16Str
        FUNCTION LCD_P8x16Str,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN read_data
        FUNCTION read_data,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN DataChange
        FUNCTION DataChange,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN getHR202_6
        FUNCTION getHR202_6,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN getLight_5
        FUNCTION getLight_5,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_wait
        FUNCTION Onboard_wait,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_CLS
        FUNCTION LCD_CLS,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??DataChange?relay
        FUNCTION ??DataChange?relay,00H
        EXTERN ??HalLcd_HW_Init?relay
        FUNCTION ??HalLcd_HW_Init?relay,00H
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??LCD_CLS?relay
        FUNCTION ??LCD_CLS?relay,00H
        EXTERN ??LCD_P16x16Ch?relay
        FUNCTION ??LCD_P16x16Ch?relay,00H
        EXTERN ??LCD_P8x16Str?relay
        FUNCTION ??LCD_P8x16Str?relay,00H
        EXTERN ??Onboard_wait?relay
        FUNCTION ??Onboard_wait?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??aps_AddGroup?relay
        FUNCTION ??aps_AddGroup?relay,00H
        EXTERN ??getHR202_6?relay
        FUNCTION ??getHR202_6?relay,00H
        EXTERN ??getLight_5?relay
        FUNCTION ??getLight_5?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??read_data?relay
        FUNCTION ??read_data?relay,00H
        EXTERN ch1
        EXTERN sensor_data_value

// F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
//    1 /**************************************************************************************************
//    2   Filename:       SampleApp.c
//    3   Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
//    4   Revision:       $Revision: 19453 $
//    5 
//    6   Description:    Sample Application (no Profile).
//    7 
//    8 
//    9   Copyright 2007 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This application isn't intended to do anything useful, it is
//   42   intended to be a simple example of an application's structure.
//   43 
//   44   This application sends it's messages either as broadcast or
//   45   broadcast filtered group messages.  The other (more normal)
//   46   message addressing is unicast.  Most of the other sample
//   47   applications are written to support the unicast message model.
//   48 
//   49   Key control:
//   50     SW1:  Sends a flash command to all devices in Group 1.
//   51     SW2:  Adds/Removes (toggles) this device in and out
//   52           of Group 1.  This will enable and disable the
//   53           reception of the flash command.
//   54 *********************************************************************/
//   55 
//   56 /*********************************************************************
//   57  * INCLUDES
//   58  */
//   59 #include "OSAL.h"
//   60 #include "ZGlobals.h"
//   61 #include "AF.h"
//   62 #include "aps_groups.h"
//   63 #include "ZDApp.h"
//   64 
//   65 #include "SampleApp.h"
//   66 #include "SampleAppHw.h"
//   67 
//   68 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f6H
// unsigned char volatile __sfr P1INP
P1INP:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//   69 
//   70 /* HAL */
//   71 #include "hal_lcd.h"
//   72 #include "hal_led.h"
//   73 #include "hal_key.h"
//   74 #include "ADC.h"
//   75 #include "DS18B20.h"
//   76 /*********************************************************************
//   77  * MACROS
//   78  */
//   79 #define DATA_PIN_1 P0_4            //¶¨ÒåP0.4¿ÚÎª¼ÌµçÆ÷µÄ¿ØÖÆ¶Ë
//   80 
//   81 /*********************************************************************
//   82  * CONSTANTS
//   83  */
//   84 
//   85 /*********************************************************************
//   86  * TYPEDEFS
//   87  */
//   88 
//   89 /*********************************************************************
//   90  * GLOBAL VARIABLES
//   91  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   92 uint8 LedState = 0;
LedState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   93 
//   94 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   95 const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
SampleApp_ClusterList:
        DATA16
        DW 1
        DW 2
        DW 3
        DW 4
//   96 {
//   97   SAMPLEAPP_PERIODIC_CLUSTERID,
//   98   SAMPLEAPP_FLASH_CLUSTERID,
//   99   SAMPLEAPP_COM_CLUSTERID,      
//  100   SAMPLEAPP_P2P_CLUSTERID      
//  101 };
//  102 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  103 const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
SampleApp_SimpleDesc:
        DB 20
        DATA16
        DW 3848
        DW 1
        DATA8
        DB 0
        DB 4
        DATA16
        DW SampleApp_ClusterList
        DATA8
        DB 4
        DATA16
        DW SampleApp_ClusterList
//  104 {
//  105   SAMPLEAPP_ENDPOINT,              //  int Endpoint;
//  106   SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
//  107   SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  108   SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//  109   SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
//  110   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//  111   (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
//  112   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//  113   (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
//  114 };
//  115 
//  116 // This is the Endpoint/Interface description.  It is defined here, but
//  117 // filled-in in SampleApp_Init().  Another way to go would be to fill
//  118 // in the structure here and make it a "const" (in code space).  The
//  119 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  120 endPointDesc_t SampleApp_epDesc;
SampleApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  121 
//  122 /*********************************************************************
//  123  * EXTERNAL VARIABLES
//  124  */
//  125 
//  126 /*********************************************************************
//  127  * EXTERNAL FUNCTIONS
//  128  */
//  129 
//  130 /*********************************************************************
//  131  * LOCAL VARIABLES
//  132  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  133 uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
SampleApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  134                           // This variable will be received when
//  135                           // SampleApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  136 devStates_t SampleApp_NwkState;
SampleApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  137 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  138 uint8 SampleApp_TransID;  // This is the unique message ID (counter)
SampleApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  139 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  140 afAddrType_t SampleApp_Periodic_DstAddr;  //¹ã²¥
SampleApp_Periodic_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  141 afAddrType_t SampleApp_Flash_DstAddr;//×é²¥
SampleApp_Flash_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  142 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  143 aps_Group_t SampleApp_Group;
SampleApp_Group:
        DS 18
        REQUIRE __INIT_XDATA_Z
//  144 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  145 uint8 SampleAppPeriodicCounter = 0;
SampleAppPeriodicCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  146 uint8 SampleAppFlashCounter = 0;
SampleAppFlashCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  147 uint8 flag_coord=0,flag_end_1=0;//Éè±¸±êÖ¾
flag_coord:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
flag_end_1:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  148 extern uint8 sensor_data_value[2];

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  149 uint8 sensor_value[20];//±£´æ´«¸ÐÆ÷Öµ
sensor_value:
        DS 20
        REQUIRE __INIT_XDATA_Z
//  150 
//  151 /*********************************************************************
//  152  * LOCAL FUNCTIONS
//  153  */
//  154 void SampleApp_HandleKeys( uint8 shift, uint8 keys );
//  155 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  156 void SampleApp_SendPeriodicMessage( void );
//  157 void SampleApp_SendFlashMessage( uint16 flashTime );
//  158 
//  159 void LCD_Init(void) ;
//  160 void delay(void);
//  161 uint8 delay_nus(uint16 i);
//  162 void read_data(uint8 * pSensorValue);
//  163 void DataChange(uint8 * pSensorValue,uint8 * pChBuf);
//  164 static void rxCB(uint8 port,uint8 event);
//  165 /*********************************************************************
//  166  * NETWORK LAYER CALLBACKS
//  167  */
//  168 
//  169 /*********************************************************************
//  170  * PUBLIC FUNCTIONS
//  171  */
//  172 
//  173 /*********************************************************************
//  174  * @fn      SampleApp_Init
//  175  *
//  176  * @brief   Initialization function for the Generic App Task.
//  177  *          This is called during initialization and should contain
//  178  *          any application specific initialization (ie. hardware
//  179  *          initialization/setup, table initialization, power up
//  180  *          notificaiton ... ).
//  181  *
//  182  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  183  *                    used to send messages and set timers.
//  184  *
//  185  * @return  none
//  186  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  187 void SampleApp_Init( uint8 task_id )
SampleApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function SampleApp_Init
        CODE
//  188 {
        FUNCALL SampleApp_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 40)
        MOV     A,R1
//  189   SampleApp_TaskID = task_id;
        MOV     DPTR,#SampleApp_TaskID
        MOVX    @DPTR,A
//  190   SampleApp_NwkState = DEV_INIT;
        MOV     DPTR,#SampleApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  191   SampleApp_TransID = 0;
        MOV     DPTR,#SampleApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  192 
//  193  P0SEL &= ~0x10;                 //ÉèÖÃP0.4ÎªÆÕÍ¨IO¿Ú
        ANL     0xf3,#0xef
//  194  P0DIR &= ~0x10;                 //P0.4¶¨ÒåÎªÊäÈë¿Ú
        ANL     0xfd,#0xef
//  195    //ÏÂÃæÁù¾äÊÇÎÒ¼ÓµÄ£¬³õÊ¼»¯´®¿ÚµÄ
//  196   halUARTCfg_t uartConfig;//¶¥Ò»¸ö´®¿Ú½á¹¹Ìå
//  197   uartConfig.configured             =TRUE;//´®¿ÚÅäÖÃÎªÕæ
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        INC     A
        MOVX    @DPTR,A
//  198   uartConfig.baudRate               =HAL_UART_BR_9600;//²¨ÌØÂÊÎª9600
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  199   uartConfig.flowControl            =FALSE;//Á÷¿ØÖÆÎª¼Ù
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  200   uartConfig.callBackFunc       =    rxCB;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??rxCB?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??rxCB?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  201   HalUARTOpen(HAL_UART_PORT_0,&uartConfig);// ´ò¿ª´®¿Ú0
        ; Setup parameters for call to function HalUARTOpen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay
//  202   
//  203   // Device hardware initialization can be added here or in main() (Zmain.c).
//  204   // If the hardware is application specific - add it here.
//  205   // If the hardware is other parts of the device add it in main().
//  206 
//  207  #if defined ( BUILD_ALL_DEVICES )
//  208   // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
//  209   // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
//  210   // together - if they are - we will start up a coordinator. Otherwise,
//  211   // the device will start as a router.
//  212   if ( readCoordinatorJumper() )
//  213     zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
//  214   else
//  215     zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
//  216 #endif // BUILD_ALL_DEVICES
//  217 
//  218 #if defined ( HOLD_AUTO_START )
//  219   // HOLD_AUTO_START is a compile option that will surpress ZDApp
//  220   //  from starting the device and wait for the application to
//  221   //  start the device.
//  222   ZDOInitDevice(0);
//  223 #endif
//  224 
//  225   // Setup for the periodic message's destination address
//  226   // Broadcast to everyone
//  227   SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  228   SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  229   SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
        MOV     DPTR,#SampleApp_Periodic_DstAddr
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  230 
//  231   // Setup for the flash command's destination address - Group 1
//  232   SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
        MOV     DPTR,#SampleApp_Flash_DstAddr + 8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  233   SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  234   SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP; //×éºÅ1
        MOV     DPTR,#SampleApp_Flash_DstAddr
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  235   
//  236   // Fill out the endpoint description.
//  237   SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
        MOV     DPTR,#SampleApp_epDesc
        MOV     A,#0x14
        MOVX    @DPTR,A
//  238   SampleApp_epDesc.task_id = &SampleApp_TaskID;
        INC     DPTR
        MOV     A,#SampleApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  239   SampleApp_epDesc.simpleDesc
//  240             = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
        INC     DPTR
        MOV     A,#SampleApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  241   SampleApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  242 
//  243   // Register the endpoint description with the AF
//  244   afRegister( &SampleApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#SampleApp_epDesc & 0xff
        MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  245 
//  246   // Register for all key events - This app will handle all key events
//  247   RegisterForKeys( SampleApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  248 
//  249   // By default, all devices start out in Group 1
//  250   SampleApp_Group.ID = 0x0001;
        MOV     DPTR,#SampleApp_Group
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  251   osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 43)
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     R2,#(SampleApp_Group + 2) & 0xff
        MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 40)
//  252   aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
        ; Setup parameters for call to function aps_AddGroup
        MOV     R2,#SampleApp_Group & 0xff
        MOV     R3,#(SampleApp_Group >> 8) & 0xff
        MOV     R1,#0x14
        LCALL   ??aps_AddGroup?relay
//  253 
//  254 #if defined ( LCD_SUPPORTED )
//  255  // HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 ); 
//  256 #endif
//  257 }
        MOV     A,#0x1d
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
        REQUIRE P0SEL
        REQUIRE P0DIR
//  258 
//  259 /*********************************************************************
//  260  * @fn      SampleApp_ProcessEvent
//  261  *
//  262  * @brief   Generic Application Task event processor.  This function
//  263  *          is called to process all events for the task.  Events
//  264  *          include timers, messages and any other user defined events.
//  265  *
//  266  * @param   task_id  - The OSAL assigned task ID.
//  267  * @param   events - events to process.  This is a bit map and can
//  268  *                   contain more than one event.
//  269  *
//  270  * @return  none
//  271  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  272 uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
SampleApp_ProcessEvent:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function SampleApp_ProcessEvent
        CODE
//  273 { uint8 i;
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalLcd_HW_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, LCD_P16x16Ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, LCD_P16x16Ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, LCD_P16x16Ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, LCD_P8x16Str
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_SendPeriodicMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  274   afIncomingMSGPacket_t *MSGpkt;
//  275   (void)task_id;  // Intentionally unreferenced parameter
//  276 
//  277   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     $+5
        LJMP    ??SampleApp_ProcessEvent_0 & 0xFFFF
//  278   {
//  279     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??SampleApp_ProcessEvent_1
//  280     while ( MSGpkt )
//  281     {
//  282       switch ( MSGpkt->hdr.event )
//  283       {
//  284         // Received when a key is pressed
//  285         case KEY_CHANGE:
//  286           SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  287           break;
//  288 
//  289         // Received when a messages is received (OTA) for this endpoint
//  290         case AF_INCOMING_MSG_CMD:
//  291           SampleApp_MessageMSGCB( MSGpkt );
//  292           break;
//  293 
//  294         // Received whenever the device changes state in the network
//  295         case ZDO_STATE_CHANGE:
//  296           SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  297           if ( (SampleApp_NwkState == DEV_ZB_COORD) ||
//  298                  (SampleApp_NwkState == DEV_ROUTER)
//  299               || (SampleApp_NwkState == DEV_END_DEVICE) )
//  300           {
//  301            
//  302            HalLcd_HW_Init(); //oled ³õÊ¼»¯
//  303             for(i=0; i<5; i++)
//  304             {
//  305                  LCD_P16x16Ch(16+16*i, 0, i);//ÏÔÊ¾¶à¹¦ÄÜÊß²Ë
//  306             }
//  307             for(i=0; i<5; i++)
//  308             {
//  309                  LCD_P16x16Ch(16+16*i, 2, 5+i);//ÏÔÊ¾´óÅïµÄÉè¼Æ
//  310             }
//  311             
//  312             for(i=0; i<3; i++)
//  313             {
//  314                  LCD_P16x16Ch(32+16*i, 4, 10+i);//ÏÔÊ¾Íõ¼üÁÖ
//  315             }
//  316             LCD_P8x16Str(16, 6, "3158116124");         
//  317              if ( SampleApp_NwkState == DEV_ZB_COORD)
//  318              {
//  319                  flag_coord=1;flag_end_1=0;
//  320                  
//  321              } else if  (    (SampleApp_NwkState == DEV_ROUTER)  || (SampleApp_NwkState == DEV_END_DEVICE) )
//  322                      {
//  323                          flag_coord=0,flag_end_1=1;//ÖÕ¶Ë½Úµã
//  324                          P1_0=1;P1_1=1;
//  325                           P1SEL&=~0x20;//×÷ÎªÆÕÍ¨IO¿Ú 
//  326                P1DIR|=0x20;  //P1_5¶¨ÒåÎªÊä³ö 
//  327                P1INP&=~0x20; //´ò¿ªÉÏÀ­
//  328 
//  329                P1SEL&=~0x40;//×÷ÎªÆÕÍ¨IO¿Ú 
//  330                P1DIR|=0x40;  //P1_6¶¨ÒåÎªÊä³ö 
//  331                P1INP&=~0x40; //´ò¿ªÉÏÀ­
//  332 
//  333                P1SEL&=~0x80;//×÷ÎªÆÕÍ¨IO¿Ú 
//  334                P1DIR|=0x80;  //P1_7¶¨ÒåÎªÊä³ö 
//  335                P1INP&=~0x80; //´ò¿ªÉÏÀ­
//  336                          osal_start_timerEx( SampleApp_TaskID,
//  337                               SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  338                               2000 );//ÖÜÆÚ²É¼¯´«¸ÐÆ÷Öµ
//  339                       }
//  340                  else {
//  341                               flag_coord=0;flag_end_1=0;;
??SampleApp_ProcessEvent_2:
        MOV     DPTR,#flag_coord
        CLR     A
        MOVX    @DPTR,A
        MOV     DPTR,#flag_end_1
??SampleApp_ProcessEvent_3:
        MOVX    @DPTR,A
//  342                       }
//  343           
//  344           }
//  345           else
//  346           {
//  347             // Device is no longer in the network
//  348           }
//  349           break;
//  350 
//  351         default:
//  352           break;
//  353       }
//  354 
//  355       // Release the memory
//  356       osal_msg_deallocate( (uint8 *)MSGpkt );
??SampleApp_ProcessEvent_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  357 
//  358       // Next - if one is available
//  359       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??SampleApp_ProcessEvent_1:
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??SampleApp_ProcessEvent_5 & 0xFFFF
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??SampleApp_ProcessEvent_6
        ADD     A,#0x49
        JZ      ??SampleApp_ProcessEvent_7
        SJMP    ??SampleApp_ProcessEvent_4
??SampleApp_ProcessEvent_6:
        ; Setup parameters for call to function SampleApp_MessageMSGCB
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??SampleApp_MessageMSGCB?relay
        SJMP    ??SampleApp_ProcessEvent_4
??SampleApp_ProcessEvent_7:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SampleApp_NwkState
        MOVX    @DPTR,A
        XRL     A,#0x9
        JZ      ??SampleApp_ProcessEvent_8
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??SampleApp_ProcessEvent_8
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??SampleApp_ProcessEvent_4
??SampleApp_ProcessEvent_8:
        ; Setup parameters for call to function HalLcd_HW_Init
        LCALL   ??HalLcd_HW_Init?relay
        MOV     ?V0 + 2,#0x0
??SampleApp_ProcessEvent_9:
        ; Setup parameters for call to function LCD_P16x16Ch
        MOV     R3,?V0 + 2
        MOV     R2,#0x0
        MOV     A,R3
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_0:
        JC      ??SampleApp_ProcessEvent_9
        MOV     ?V0 + 2,#0x0
??SampleApp_ProcessEvent_10:
        ; Setup parameters for call to function LCD_P16x16Ch
        MOV     A,#0x5
        ADD     A,?V0 + 2
        MOV     R3,A
        MOV     R2,#0x2
        MOV     A,?V0 + 2
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_1:
        JC      ??SampleApp_ProcessEvent_10
        MOV     ?V0 + 2,#0x0
??SampleApp_ProcessEvent_11:
        ; Setup parameters for call to function LCD_P16x16Ch
        MOV     A,#0xa
        ADD     A,?V0 + 2
        MOV     R3,A
        MOV     R2,#0x4
        MOV     A,?V0 + 2
        SWAP    A
        ANL     A,#0xf0
        ADD     A,#0x20
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_8:
        SUBB    A,#0x3
        JC      ??SampleApp_ProcessEvent_11
        ; Setup parameters for call to function LCD_P8x16Str
        MOV     R4,#`?<Constant "3158116124">` & 0xff
        MOV     R5,#(`?<Constant "3158116124">` >> 8) & 0xff
        MOV     R2,#0x6
        MOV     R1,#0x10
        LCALL   ??LCD_P8x16Str?relay
        MOV     DPTR,#SampleApp_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x9
        JNZ     ??SampleApp_ProcessEvent_12
        MOV     DPTR,#flag_coord
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     DPTR,#flag_end_1
        CLR     A
        LJMP    ??SampleApp_ProcessEvent_3 & 0xFFFF
??SampleApp_ProcessEvent_12:
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??SampleApp_ProcessEvent_13
        MOVX    A,@DPTR
        XRL     A,#0x6
        JZ      $+5
        LJMP    ??SampleApp_ProcessEvent_2 & 0xFFFF
??SampleApp_ProcessEvent_13:
        MOV     DPTR,#flag_coord
        CLR     A
        MOVX    @DPTR,A
        MOV     DPTR,#flag_end_1
        INC     A
        MOVX    @DPTR,A
        SETB    0x90.0
        SETB    0x90.1
        ANL     0xf4,#0xdf
        ORL     0xfe,#0x20
        ANL     0xf6,#0xdf
        ANL     0xf4,#0xbf
        ORL     0xfe,#0x40
        ANL     0xf6,#0xbf
        ANL     0xf4,#0x7f
        ORL     0xfe,#0x80
        ANL     0xf6,#0x7f
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x30
        MOV     R5,#0x7
        MOV     R2,A
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        LJMP    ??SampleApp_ProcessEvent_4 & 0xFFFF
//  360     }
//  361 
//  362     // return unprocessed events
//  363     return (events ^ SYS_EVENT_MSG);
??SampleApp_ProcessEvent_5:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??SampleApp_ProcessEvent_14:
        MOV     R3,A
        SJMP    ??SampleApp_ProcessEvent_15
//  364   }
//  365 
//  366   // Send a message out - This event is generated by a timer
//  367   //  (setup in SampleApp_Init()).
//  368   if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
??SampleApp_ProcessEvent_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_ProcessEvent_16
//  369   {
//  370     // Send the periodic message
//  371     SampleApp_SendPeriodicMessage();//²É¼¯ÎÂ¶È+Êª¶È+¹âÃô+ÈËÌåºìÍâ
        ; Setup parameters for call to function SampleApp_SendPeriodicMessage
        LCALL   ??SampleApp_SendPeriodicMessage?relay
//  372 
//  373     // Setup to send message again in normal period (+ a little jitter)
//  374     osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  375        2000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x30
        MOV     R5,#0x7
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  376 
//  377     // return unprocessed events
//  378     return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
        MOV     A,R6
        XRL     A,#0x1
        MOV     R2,A
        MOV     A,R7
        SJMP    ??SampleApp_ProcessEvent_14
//  379   }
//  380 
//  381   // Discard unknown events
//  382   return 0;
??SampleApp_ProcessEvent_16:
        MOV     R2,#0x0
        MOV     R3,#0x0
??SampleApp_ProcessEvent_15:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
        REQUIRE _A_P1
        REQUIRE P1SEL
        REQUIRE P1DIR
        REQUIRE P1INP
//  383 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond2 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond3 Using cfiCommon0
        CFI (cfiCond3) NoFunction
        CFI (cfiCond3) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond3) CFA_SP SP+0
        CFI (cfiCond3) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker4 Using cfiCommon1
        CFI (cfiPicker4) NoFunction
        CFI (cfiPicker4) Picker
        SWAP    A
        ANL     A,#0xf0
        ADD     A,#0x10
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_9:
        SUBB    A,#0x5
        RET
        CFI EndBlock cfiCond2
        CFI EndBlock cfiCond3
        CFI EndBlock cfiPicker4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond5 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_9, ??CrossCallReturnLabel_0
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_9, ??CrossCallReturnLabel_1
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker8 Using cfiCommon1
        CFI (cfiPicker8) NoFunction
        CFI (cfiPicker8) Picker
        MOV     R1,A
        LCALL   ??LCD_P16x16Ch?relay
        INC     ?V0 + 2
        MOV     A,?V0 + 2
        CLR     C
        RET
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiPicker8
//  384 
//  385 /*********************************************************************
//  386  * Event Generation Functions
//  387  */
//  388 /*********************************************************************
//  389  * @fn      SampleApp_HandleKeys
//  390  *
//  391  * @brief   Handles all key events for this device.
//  392  *
//  393  * @param   shift - true if in shift/alt.
//  394  * @param   keys - bit field for key events. Valid entries:
//  395  *                 HAL_KEY_SW_2
//  396  *                 HAL_KEY_SW_1
//  397  *
//  398  * @return  none
//  399  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  400 void SampleApp_HandleKeys( uint8 shift, uint8 keys )
SampleApp_HandleKeys:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function SampleApp_HandleKeys
        CODE
//  401 {
        ; Saved register size: 0
        ; Auto size: 0
//  402 
//  403   (void)shift;  // Intentionally unreferenced parameter
//  404   
//  405   if ( keys & HAL_KEY_SW_6 )
//  406   {
//  407  
//  408   }
//  409 
//  410   if ( keys & HAL_KEY_SW_1 )
//  411   {
//  412     /* The Flashr Command is sent to Group 1.
//  413      * This key toggles this device in and out of group 1.
//  414      * If this device doesn't belong to group 1, this application
//  415      * will not receive the Flash command sent to group 1.
//  416      */
//  417   /*  aps_Group_t *grp;
//  418     grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
//  419     if ( grp )
//  420     {
//  421       // Remove from the group
//  422       aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
//  423     }
//  424     else
//  425     {
//  426       // Add to the flash group
//  427       aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
//  428     }*/
//  429   }
//  430   
//  431 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock9
//  432 
//  433 /*********************************************************************
//  434  * LOCAL FUNCTIONS
//  435  */
//  436 
//  437 /*********************************************************************
//  438  * @fn      SampleApp_MessageMSGCB
//  439  *
//  440  * @brief   Data message processor callback.  This function processes
//  441  *          any incoming data - probably from other devices.  So, based
//  442  *          on cluster ID, perform the intended action.
//  443  *
//  444  * @param   none
//  445  *
//  446  * @return  none
//  447  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  448 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
SampleApp_MessageMSGCB:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function SampleApp_MessageMSGCB
        CODE
//  449 {
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  450   uint8 buffer[2];
//  451   switch ( pkt->clusterId )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??SampleApp_MessageMSGCB_0
        INC     DPTR
        MOVX    A,@DPTR
??SampleApp_MessageMSGCB_0:
        JNZ     ??SampleApp_MessageMSGCB_1
//  452   {    
//  453     case SAMPLEAPP_PERIODIC_CLUSTERID:   
//  454       if(flag_coord==1)
        MOV     DPTR,#flag_coord
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??SampleApp_MessageMSGCB_1
//  455       {
//  456       HalUARTWrite(0, pkt->cmd.Data, pkt->cmd.DataLength); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
        ; Setup parameters for call to function HalUARTWrite
        MOV     A,R2
        ADD     A,#0x1f
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R2
        ADD     A,#0x21
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  457       }
//  458        
//  459     
//  460       break;
//  461 
//  462   }
//  463 }
??SampleApp_MessageMSGCB_1:
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock10
//  464 
//  465 /*********************************************************************
//  466  * @fn      SampleApp_SendPeriodicMessage
//  467  *
//  468  * @brief   Send the periodic message.
//  469  *
//  470  * @param   none
//  471  *
//  472  * @return  none
//  473  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  474 void SampleApp_SendPeriodicMessage( void )
SampleApp_SendPeriodicMessage:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function SampleApp_SendPeriodicMessage
        CODE
//  475 {
        FUNCALL SampleApp_SendPeriodicMessage, read_data
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, DataChange
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, getHR202_6
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, getLight_5
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, LCD_CLS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, LCD_P16x16Ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, LCD_P16x16Ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, LCD_P16x16Ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, LCD_P8x16Str
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, LCD_P8x16Str
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, LCD_P16x16Ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, LCD_P16x16Ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, LCD_P16x16Ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, LCD_P16x16Ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, LCD_P8x16Str
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, LCD_P8x16Str
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, LCD_P8x16Str
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, LCD_P16x16Ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, LCD_P8x16Str
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, LCD_P8x16Str
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, LCD_P8x16Str
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, LCD_P16x16Ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, LCD_P16x16Ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, LCD_P16x16Ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, LCD_P16x16Ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, LCD_P8x16Str
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, LCD_P16x16Ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, LCD_P16x16Ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, LCD_P16x16Ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, LCD_P16x16Ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 11
        MOV     A,#-0xb
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
//  476    float temp;
//  477    uint8 wendu[3];
//  478    uint8 HR2[3];
//  479    uint8 Light_5[5];
//  480    uint8 i;
//  481   sensor_value[0]='R';//ÖÕ¶Ë±êÖ¾
        MOV     DPTR,#sensor_value
        MOV     A,#0x52
        MOVX    @DPTR,A
//  482   read_data(sensor_data_value);// ¶ÁÈ¡ÎÂ¶È
        ; Setup parameters for call to function read_data
        MOV     R2,#sensor_data_value & 0xff
        MOV     R3,#(sensor_data_value >> 8) & 0xff
        LCALL   ??read_data?relay
//  483   DataChange(sensor_data_value,ch1); //Êý¾Ý´¦Àí£¨1,2£©
        ; Setup parameters for call to function DataChange
        MOV     R4,#ch1 & 0xff
        MOV     R5,#(ch1 >> 8) & 0xff
        MOV     R2,#sensor_data_value & 0xff
        MOV     R3,#(sensor_data_value >> 8) & 0xff
        LCALL   ??DataChange?relay
//  484   wendu[0]=sensor_value[1];
        MOV     DPTR,#sensor_value + 1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
//  485   wendu[1]=sensor_value[2];
        MOV     DPTR,#sensor_value + 2
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  486   wendu[2]='\0';//½áÊø±êÖ¾ 
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  487   if(sensor_value[1]<'3')
        MOV     A,R0
        CLR     C
        SUBB    A,#0x33
        JNC     ??SampleApp_SendPeriodicMessage_0
//  488   {
//  489     P1_0=0;//ÔöÎÂ
        CLR     0x90.0
        SJMP    ??SampleApp_SendPeriodicMessage_1
//  490   }
//  491   else{
//  492     P1_0=1;//
??SampleApp_SendPeriodicMessage_0:
        SETB    0x90.0
//  493   }
//  494   temp=getHR202_6()*33;//»ñÈ¡Êª¶ÈÖµ£¨0-100£©
??SampleApp_SendPeriodicMessage_1:
        ; Setup parameters for call to function getHR202_6
        LCALL   ??getHR202_6?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     DPTR,#__Constant_42040000
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_MUL
//  495   if(temp>=99)temp=99;
        MOV     DPTR,#__Constant_42c60000
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_GE
        JNC     ??SampleApp_SendPeriodicMessage_2
        MOV     DPTR,#__Constant_42c60000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        SJMP    ??SampleApp_SendPeriodicMessage_3
//  496   
//  497   if(temp>55)
??SampleApp_SendPeriodicMessage_2:
        MOV     DPTR,#__Constant_425c0001
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_GE
        JNC     ??SampleApp_SendPeriodicMessage_4
//  498   {
//  499      P1_1=1;//
??SampleApp_SendPeriodicMessage_3:
        SETB    0x90.1
        SJMP    ??SampleApp_SendPeriodicMessage_5
//  500   }
//  501   else{
//  502      P1_1=0;//¼ÓÊª
??SampleApp_SendPeriodicMessage_4:
        CLR     0x90.1
//  503   }
//  504   
//  505   HR2[0]=(char)(temp)%10+48;
??SampleApp_SendPeriodicMessage_5:
        MOV     R0,#?V0 + 4
        LCALL   ?FLT_TO_L
        MOV     R0,?V0 + 4
        MOV     A,R0
        MOV     B,#0xa
        DIV     AB
        MOV     A,B
        ADD     A,#0x30
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  506   HR2[1]=(char)(temp)/10+48;
        MOV     B,#0xa
        MOV     A,R0
        DIV     AB
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  507   HR2[2]='\0';//½áÊø±êÖ¾ 
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  508   for(i=0;i<2;i++)
        MOV     ?V0 + 0,A
//  509   sensor_value[3+i]=HR2[i];//Êý¾Ý´¦Àí£¨3,4£©
??SampleApp_SendPeriodicMessage_6:
        MOV     DPL,?V0 + 0
        MOV     R0,DPL
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_6:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#(sensor_value + 3) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((sensor_value + 3) >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     ?V0 + 0
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,#0x2
        JC      ??SampleApp_SendPeriodicMessage_6
//  510 
//  511   temp=getLight_5();//»ñÈ¡¹âÕÕÖµ
        ; Setup parameters for call to function getLight_5
        LCALL   ??getLight_5?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
//  512   Light_5[0]=(char)(temp)%10+48;
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     A,?V0 + 0
        MOV     B,#0xa
        DIV     AB
        MOV     A,B
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine2 & 0xFFFF
//  513   Light_5[1]=(char)(temp*10)%10+48;
??CrossCallReturnLabel_2:
        MOV     DPTR,#__Constant_41200000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     A,?V0 + 0
        MOV     B,#0xa
        DIV     AB
        MOV     A,B
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine2 & 0xFFFF
//  514   Light_5[2]=(char)(temp*100)%10+48;
??CrossCallReturnLabel_3:
        MOV     DPTR,#__Constant_42c80000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     A,?V0 + 0
        MOV     B,#0xa
        DIV     AB
        MOV     A,B
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  515   Light_5[3]=(char)(temp*1000)%10+48;
        MOV     DPTR,#__Constant_447a0000
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 4
        LCALL   ?FLT_TO_L
        MOV     A,?V0 + 4
        MOV     B,#0xa
        DIV     AB
        MOV     A,B
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  516   Light_5[4]='\0';//½áÊø±êÖ¾ 
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  517   for(i=0;i<4;i++)
        MOV     ?V0 + 0,A
//  518   sensor_value[5+i]=Light_5[i];
??SampleApp_SendPeriodicMessage_7:
        MOV     DPL,?V0 + 0
        MOV     R0,DPL
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_7:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#(sensor_value + 5) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((sensor_value + 5) >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     ?V0 + 0
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,#0x4
        JC      ??SampleApp_SendPeriodicMessage_7
//  519   
//  520    if(DATA_PIN_1 == 1)
        MOV     C,0x80.4
        JNC     ??SampleApp_SendPeriodicMessage_8
//  521   { 
//  522     MicroWait (10000);     // Wait 10ms
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0x10
        MOV     R3,#0x27
        LCALL   ??Onboard_wait?relay
//  523     if(DATA_PIN_1 == 1)
        MOV     C,0x80.4
        JNC     ??SampleApp_SendPeriodicMessage_9
//  524     {     
//  525        sensor_value[9] = 0x31;       //ÓÐÈË½øÈë
        MOV     DPTR,#sensor_value + 9
        MOV     A,#0x31
        MOVX    @DPTR,A
//  526        P1_5=0;
        CLR     0x90.5
        SJMP    ??SampleApp_SendPeriodicMessage_9
//  527     }
//  528   }  
//  529   else 
//  530   {  
//  531       sensor_value[9] = 0x30; 
??SampleApp_SendPeriodicMessage_8:
        MOV     DPTR,#sensor_value + 9
        MOV     A,#0x30
        MOVX    @DPTR,A
//  532      P1_5=1;
        SETB    0x90.5
//  533   }  
//  534  
//  535   sensor_value[10]='#';
??SampleApp_SendPeriodicMessage_9:
        MOV     DPTR,#sensor_value + 10
        MOV     A,#0x23
        MOVX    @DPTR,A
//  536   if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
//  537                        SAMPLEAPP_PERIODIC_CLUSTERID,
//  538                        11,
//  539                        sensor_value,
//  540                        &SampleApp_TransID,
//  541                        AF_DISCV_ROUTE,
//  542                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V0 + 0,#sensor_value & 0xff
        MOV     ?V0 + 1,#(sensor_value >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     ?V0 + 0,#0xb
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 40)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
        MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
//  543   {
//  544     
//  545   }
//  546   else
//  547   {
//  548     // Error occurred in request to send.
//  549   }
//  550    LCD_CLS();//ÇåÆÁ
        ; Setup parameters for call to function LCD_CLS
        LCALL   ??LCD_CLS?relay
//  551    LCD_P16x16Ch(8, 0, 13);//ÏÔÊ¾ÎÂ
        ; Setup parameters for call to function LCD_P16x16Ch
        MOV     R3,#0xd
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   ??LCD_P16x16Ch?relay
//  552    LCD_P16x16Ch(24,0, 15);//ÏÔÊ¾¶È
        ; Setup parameters for call to function LCD_P16x16Ch
        MOV     R3,#0xf
        MOV     R2,#0x0
        MOV     R1,#0x18
        LCALL   ??LCD_P16x16Ch?relay
//  553    LCD_P16x16Ch(40,0, 16);//ÏÔÊ¾Öµ
        ; Setup parameters for call to function LCD_P16x16Ch
        MOV     R3,#0x10
        MOV     R2,#0x0
        MOV     R1,#0x28
        LCALL   ??LCD_P16x16Ch?relay
//  554    LCD_P8x16Str(56, 0, ":");//:
        ; Setup parameters for call to function LCD_P8x16Str
        MOV     R4,#`?<Constant ":">` & 0xff
        MOV     R5,#(`?<Constant ":">` >> 8) & 0xff
        MOV     R2,#0x0
        MOV     R1,#0x38
        LCALL   ??LCD_P8x16Str?relay
//  555    LCD_P8x16Str(64, 0, wendu);//ÑÌÎíÖµ
        ; Setup parameters for call to function LCD_P8x16Str
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x0
        MOV     R1,#0x40
        LCALL   ??LCD_P8x16Str?relay
//  556    LCD_P16x16Ch(80,0, 24);//ÏÔÊ¾¡æ
        ; Setup parameters for call to function LCD_P16x16Ch
        MOV     R3,#0x18
        MOV     R2,#0x0
        MOV     R1,#0x50
        LCALL   ??LCD_P16x16Ch?relay
//  557    
//  558    LCD_P16x16Ch(8, 2, 14);//ÏÔÊ¾Êª
        ; Setup parameters for call to function LCD_P16x16Ch
        MOV     R3,#0xe
        MOV     R2,#0x2
        MOV     R1,#0x8
        LCALL   ??LCD_P16x16Ch?relay
//  559    LCD_P16x16Ch(24,2, 15);//ÏÔÊ¾¶È
        ; Setup parameters for call to function LCD_P16x16Ch
        MOV     R3,#0xf
        MOV     R2,#0x2
        MOV     R1,#0x18
        LCALL   ??LCD_P16x16Ch?relay
//  560    LCD_P16x16Ch(40,2, 16);//ÏÔÊ¾Öµ
        ; Setup parameters for call to function LCD_P16x16Ch
        MOV     R3,#0x10
        MOV     R2,#0x2
        MOV     R1,#0x28
        LCALL   ??LCD_P16x16Ch?relay
//  561    LCD_P8x16Str(56, 2, ":");//:
        ; Setup parameters for call to function LCD_P8x16Str
        MOV     R4,#`?<Constant ":">` & 0xff
        MOV     R5,#(`?<Constant ":">` >> 8) & 0xff
        MOV     R2,#0x2
        MOV     R1,#0x38
        LCALL   ??LCD_P8x16Str?relay
//  562    LCD_P8x16Str(64, 2, HR2);//ÑÌÎíÖµ
        ; Setup parameters for call to function LCD_P8x16Str
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x2
        MOV     R1,#0x40
        LCALL   ??LCD_P8x16Str?relay
//  563    LCD_P8x16Str(80, 2, "%");//:
        ; Setup parameters for call to function LCD_P8x16Str
        MOV     R4,#`?<Constant "%">` & 0xff
        MOV     R5,#(`?<Constant "%">` >> 8) & 0xff
        MOV     R2,#0x2
        MOV     R1,#0x50
        LCALL   ??LCD_P8x16Str?relay
//  564    for(i=0; i<2; i++)
        MOV     ?V0 + 0,#0x0
//  565    {
//  566      LCD_P16x16Ch(8+16*i, 4, 17+i);//ÏÔÊ¾¹âÕÕ
??SampleApp_SendPeriodicMessage_10:
        ; Setup parameters for call to function LCD_P16x16Ch
        MOV     A,#0x11
        ADD     A,?V0 + 0
        MOV     R3,A
        MOV     R2,#0x4
        MOV     A,?V0 + 0
        SWAP    A
        ANL     A,#0xf0
        ADD     A,#0x8
        MOV     R1,A
        LCALL   ??LCD_P16x16Ch?relay
//  567    }
        INC     ?V0 + 0
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,#0x2
        JC      ??SampleApp_SendPeriodicMessage_10
//  568     LCD_P8x16Str(40, 4, ":");//:
        ; Setup parameters for call to function LCD_P8x16Str
        MOV     R4,#`?<Constant ":">` & 0xff
        MOV     R5,#(`?<Constant ":">` >> 8) & 0xff
        MOV     R2,#0x4
        MOV     R1,#0x28
        LCALL   ??LCD_P8x16Str?relay
//  569     LCD_P8x16Str(48, 4, Light_5);//huoyan
        ; Setup parameters for call to function LCD_P8x16Str
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x4
        MOV     R1,#0x30
        LCALL   ??LCD_P8x16Str?relay
//  570     LCD_P8x16Str(80, 4, "Lx");//mmol
        ; Setup parameters for call to function LCD_P8x16Str
        MOV     R4,#`?<Constant "Lx">` & 0xff
        MOV     R5,#(`?<Constant "Lx">` >> 8) & 0xff
        MOV     R2,#0x4
        MOV     R1,#0x50
        LCALL   ??LCD_P8x16Str?relay
//  571     
//  572     if(sensor_value[9]==0x31)
        MOV     DPTR,#sensor_value + 9
        MOVX    A,@DPTR
        XRL     A,#0x31
        JNZ     ??SampleApp_SendPeriodicMessage_11
//  573     {
//  574       LCD_P16x16Ch(8, 6, 19);//ÏÔÊ¾ÎÂ
        ; Setup parameters for call to function LCD_P16x16Ch
        MOV     R3,#0x13
        LCALL   ?Subroutine3 & 0xFFFF
//  575       LCD_P16x16Ch(24,6, 21);//ÏÔÊ¾¶È
//  576       LCD_P16x16Ch(40,6, 22);//ÏÔÊ¾Öµ
//  577       LCD_P16x16Ch(56,6, 23);//ÏÔÊ¾Öµ
//  578       LCD_P8x16Str(72, 6, "!!!");//mmol
??CrossCallReturnLabel_4:
        ; Setup parameters for call to function LCD_P8x16Str
        MOV     R4,#`?<Constant "!!!">` & 0xff
        MOV     R5,#(`?<Constant "!!!">` >> 8) & 0xff
        MOV     R2,#0x6
        MOV     R1,#0x48
        LCALL   ??LCD_P8x16Str?relay
        SJMP    ??CrossCallReturnLabel_5
//  579     }
//  580     else
//  581     {
//  582       LCD_P16x16Ch(8, 6, 20);//ÏÔÊ¾ÎÂ
??SampleApp_SendPeriodicMessage_11:
        ; Setup parameters for call to function LCD_P16x16Ch
        MOV     R3,#0x14
        LCALL   ?Subroutine3 & 0xFFFF
//  583       LCD_P16x16Ch(24,6, 21);//ÏÔÊ¾¶È
//  584       LCD_P16x16Ch(40,6, 22);//ÏÔÊ¾Öµ
//  585       LCD_P16x16Ch(56,6, 23);//ÏÔÊ¾Öµ
//  586     }
//  587       
//  588      
//  589 }
??CrossCallReturnLabel_5:
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock11
        REQUIRE _A_P1
        REQUIRE _A_P0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond12 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker14 Using cfiCommon1
        CFI (cfiPicker14) NoFunction
        CFI (cfiPicker14) Picker
        MOV     A,DPL
        ADD     A,R0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiPicker14

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond15 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker17 Using cfiCommon1
        CFI (cfiPicker17) NoFunction
        CFI (cfiPicker17) Picker
        MOV     R2,#0x6
        MOV     R1,#0x8
        LCALL   ??LCD_P16x16Ch?relay
        ; Setup parameters for call to function LCD_P16x16Ch
        ; Setup parameters for call to function LCD_P16x16Ch
        MOV     R3,#0x15
        MOV     R2,#0x6
        MOV     R1,#0x18
        LCALL   ??LCD_P16x16Ch?relay
        ; Setup parameters for call to function LCD_P16x16Ch
        ; Setup parameters for call to function LCD_P16x16Ch
        MOV     R3,#0x16
        MOV     R2,#0x6
        MOV     R1,#0x28
        LCALL   ??LCD_P16x16Ch?relay
        ; Setup parameters for call to function LCD_P16x16Ch
        ; Setup parameters for call to function LCD_P16x16Ch
        MOV     R3,#0x17
        MOV     R2,#0x6
        MOV     R1,#0x38
        LCALL   ??LCD_P16x16Ch?relay
        RET
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiPicker17

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond18 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        MOVX    @DPTR,A
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        RET
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20
//  590 
//  591 /*********************************************************************
//  592  * @fn      SampleApp_SendFlashMessage
//  593  *
//  594  * @brief   Send the flash message to group 1.
//  595  *
//  596  * @param   flashTime - in milliseconds
//  597  *
//  598  * @return  none
//  599  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  600 void SampleApp_SendFlashMessage( uint16 flashTime )
SampleApp_SendFlashMessage:
        CFI Block cfiBlock21 Using cfiCommon0
        CFI Function SampleApp_SendFlashMessage
        CODE
//  601 {
        FUNCALL SampleApp_SendFlashMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  602   uint8 buffer[3];
//  603   buffer[0] = (uint8)(SampleAppFlashCounter++);
        MOV     DPTR,#SampleAppFlashCounter
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     DPTR,#SampleAppFlashCounter
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  604   buffer[1] = LO_UINT16( flashTime );
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
//  605   buffer[2] = HI_UINT16( flashTime );
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R3
        MOVX    @DPTR,A
//  606 
//  607   if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
//  608                        SAMPLEAPP_FLASH_CLUSTERID,
//  609                        3,
//  610                        buffer,
//  611                        &SampleApp_TransID,
//  612                        AF_DISCV_ROUTE,
//  613                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V0 + 0,#0x3
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_Flash_DstAddr & 0xff
        MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  614   {
//  615   }
//  616   else
//  617   {
//  618     // Error occurred in request to send.
//  619   }
//  620 }
        MOV     A,#0x3
        CFI EndBlock cfiBlock21
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Valid
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock22
//  621 
//  622 /*********************************************************************
//  623 *********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  624 void delay(void)
delay:
        CFI Block cfiBlock23 Using cfiCommon0
        CFI Function delay
        CODE
//  625 {
        ; Saved register size: 0
        ; Auto size: 0
//  626   unsigned int i;
//  627   unsigned char j;
//  628 
//  629   for(i=0;i<1000;i++)
        MOV     R0,#-0x18
        MOV     R1,#0x3
//  630   {
//  631     for(j=0;j<200;j++)
??delay_0:
        MOV     A,#-0x38
//  632     {
//  633       asm("NOP");
??delay_1:
        NOP
//  634       asm("NOP");
        NOP
//  635       asm("NOP");
        NOP
//  636     }
        DEC     A
        JNZ     ??delay_1
//  637   }
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??delay_0
//  638 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock23
//  639 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  640 uint8 delay_nus(uint16 i)
delay_nus:
        CFI Block cfiBlock24 Using cfiCommon0
        CFI Function delay_nus
        CODE
//  641 {
        ; Saved register size: 0
        ; Auto size: 0
        SJMP    ??delay_nus_0
//  642    while(i--)
//  643    {
//  644       asm("NOP"); 
??delay_nus_1:
        NOP
//  645       asm("NOP");
        NOP
//  646       asm("NOP");
        NOP
//  647    }
??delay_nus_0:
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R2
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R3,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??delay_nus_1
//  648    return 0;
        MOV     R1,#0x0
        LJMP    ?BRET
        CFI EndBlock cfiBlock24
//  649 }
//  650 //ÏÂÃæÕâ¸ö»Øµ÷º¯ÊýÊÇÎÒ¼ÓµÄ£¬´Ó´®¿Ú0¶ÁÈ¡2¸ö×Ö·û£¬·Å½øuartbuf

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  651 static void rxCB(uint8 port,uint8 event)
rxCB:
        CFI Block cfiBlock25 Using cfiCommon0
        CFI Function rxCB
        CODE
//  652 {
        FUNCALL rxCB, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  653   uint8 uartbuf[2];
//  654   HalUARTRead(0,uartbuf,2);//½ÓÊÕÖ¸Ê¾µÆ¿ØÖÆÐÅÏ¢
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTRead?relay
//  655     //ÎÞÏß´«Êä¸øÖÕ¶Ë
//  656    AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
//  657                        SAMPLEAPP_PERIODIC_CLUSTERID,
//  658                        2,
//  659                        uartbuf,
//  660                        &SampleApp_TransID,
//  661                        AF_DISCV_ROUTE,
//  662                        AF_DEFAULT_RADIUS );
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#0x2
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
        MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  663 
//  664 }
        MOV     A,#0x2
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock25

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_SendPeriodicMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_SendPeriodicMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_SendFlashMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_SendFlashMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??delay?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    delay

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??delay_nus?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    delay_nus

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxCB

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Group 1">`:
        DB "Group 1"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "3158116124">`:
        DB "3158116124"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant ":">`:
        DB ":"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant "%">`:
        DB "%"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Lx">`:
        DB "Lx"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant "!!!">`:
        DB "!!!"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_42040000:
        DD 42040000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_42c60000:
        DD 42C60000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_425c0001:
        DD 425C0001H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_41200000:
        DD 41200000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_42c80000:
        DD 42C80000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_447a0000:
        DD 447A0000H

        END
// 
// 1 763 bytes in segment BANKED_CODE
//    54 bytes in segment BANK_RELAYS
//     7 bytes in segment SFR_AN
//    74 bytes in segment XDATA_ROM_C
//    76 bytes in segment XDATA_Z
// 
// 1 817 bytes of CODE  memory
//    50 bytes of CONST memory (+ 24 bytes shared)
//     0 bytes of DATA  memory (+  7 bytes shared)
//    76 bytes of XDATA memory
//
//Errors: none
//Warnings: 1
