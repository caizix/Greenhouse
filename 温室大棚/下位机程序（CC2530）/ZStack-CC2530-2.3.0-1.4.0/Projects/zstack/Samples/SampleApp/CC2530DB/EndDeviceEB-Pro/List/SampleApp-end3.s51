///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.40194/W32 for 8051        03/Dec/2018  19:12:56 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\2019\¹ú´´-1100\ÏÂÎ»»ú³ÌÐò£¨CC2530£©\ZStack-CC2 /
//                          530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp /
//                          \Source\SampleApp-end3.c                          /
//    Command line       =  -f F:\2019\¹ú´´-1100\ÏÂÎ»»ú³ÌÐò£¨CC2530£©\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg /
//                           (-DCPU32MHZ -DROOT=__near_func -DBLINK_LEDS) -f  /
//                          F:\2019\¹ú´´-1100\ÏÂÎ»»ú³ÌÐò£¨CC2530£©\ZStack-CC2 /
//                          530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg   /
//                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR     /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 F:\2019\¹ú´´-1100\ÏÂÎ»»ú³Ì /
//                          Ðò£¨CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\z /
//                          stack\Samples\SampleApp\Source\SampleApp-end3.c   /
//                          -D ZIGBEEPRO -D NWK_AUTO_POLL -D ZTOOL_P1 -D      /
//                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D       /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          F:\2019\¹ú´´-1100\ÏÂÎ»»ú³ÌÐò£¨CC2530£©\ZStack-CC2 /
//                          530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\EndDeviceEB-Pro\List\ -lA               /
//                          F:\2019\¹ú´´-1100\ÏÂÎ»»ú³ÌÐò£¨CC2530£©\ZStack-CC2 /
//                          530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\EndDeviceEB-Pro\List\ --diag_suppress   /
//                          Pe001,Pa010 -o F:\2019\¹ú´´-1100\ÏÂÎ»»ú³ÌÐò£¨CC25 /
//                          30£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\EndDeviceEB-Pro\Obj\ -e  /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I F:\2019\¹ú´´-1100\ÏÂÎ»»ú³ÌÐò£¨CC2530£©\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\ -I F:\2019\¹ú´´-1100\ÏÂÎ»»ú³ÌÐò£¨CC /
//                          2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\ /
//                          Samples\SampleApp\CC2530DB\..\SOURCE\ -I          /
//                          F:\2019\¹ú´´-1100\ÏÂÎ»»ú³ÌÐò£¨CC2530£©\ZStack-CC2 /
//                          530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I             /
//                          F:\2019\¹ú´´-1100\ÏÂÎ»»ú³ÌÐò£¨CC2530£©\ZStack-CC2 /
//                          530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\MT\ -I        /
//                          F:\2019\¹ú´´-1100\ÏÂÎ»»ú³ÌÐò£¨CC2530£©\ZStack-CC2 /
//                          530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\  /
//                          -I F:\2019\¹ú´´-1100\ÏÂÎ»»ú³ÌÐò£¨CC2530£©\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET /
//                          \CC2530EB\ -I F:\2019\¹ú´´-1100\ÏÂÎ»»ú³ÌÐò£¨CC253 /
//                          0£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS /
//                          \OSAL\MCU\CCSOC\ -I F:\2019\¹ú´´-1100\ÏÂÎ»»ú³ÌÐò£ /
//                          ¨CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zsta /
//                          ck\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\OSAL\INCLUDE\ -I                           /
//                          F:\2019\¹ú´´-1100\ÏÂÎ»»ú³ÌÐò£¨CC2530£©\ZStack-CC2 /
//                          530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\ -I  /
//                          F:\2019\¹ú´´-1100\ÏÂÎ»»ú³ÌÐò£¨CC2530£©\ZStack-CC2 /
//                          530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\    /
//                          -I F:\2019\¹ú´´-1100\ÏÂÎ»»ú³ÌÐò£¨CC2530£©\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\ /
//                           -I F:\2019\¹ú´´-1100\ÏÂÎ»»ú³ÌÐò£¨CC2530£©\ZStack /
//                          -CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAP /
//                          I\ -I F:\2019\¹ú´´-1100\ÏÂÎ»»ú³ÌÐò£¨CC2530£©\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          YS\ -I F:\2019\¹ú´´-1100\ÏÂÎ»»ú³ÌÐò£¨CC2530£©\ZSt /
//                          ack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ /
//                          ZDO\ -I F:\2019\¹ú´´-1100\ÏÂÎ»»ú³ÌÐò£¨CC2530£©\ZS /
//                          tack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\ /
//                          F8W\ -I F:\2019\¹ú´´-1100\ÏÂÎ»»ú³ÌÐò£¨CC2530£©\ZS /
//                          tack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\ /
//                           -I F:\2019\¹ú´´-1100\ÏÂÎ»»ú³ÌÐò£¨CC2530£©\ZStack /
//                          -CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\ /
//                          SADDR\ -I F:\2019\¹ú´´-1100\ÏÂÎ»»ú³ÌÐò£¨CC2530£©\ /
//                          ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples /
//                          \SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SER /
//                          VICES\SDATA\ -I F:\2019\¹ú´´-1100\ÏÂÎ»»ú³ÌÐò£¨CC2 /
//                          530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONEN /
//                          TS\MAC\INCLUDE\ -I F:\2019\¹ú´´-1100\ÏÂÎ»»ú³ÌÐò£¨ /
//                          CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstac /
//                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPO /
//                          NENTS\MAC\HIGH_LEVEL\ -I                          /
//                          F:\2019\¹ú´´-1100\ÏÂÎ»»ú³ÌÐò£¨CC2530£©\ZStack-CC2 /
//                          530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL /
//                          \srf04\ -I F:\2019\¹ú´´-1100\ÏÂÎ»»ú³ÌÐò£¨CC2530£© /
//                          \ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MA /
//                          C\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz               /
//                          --require_prototypes                              /
//    List file          =  F:\2019\¹ú´´-1100\ÏÂÎ»»ú³ÌÐò£¨CC2530£©\ZStack-CC2 /
//                          530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\EndDeviceEB-Pro\List\SampleApp-end3.s51 /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME `SampleApp-end3`

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_MUL
        EXTERN ?FLT_SUB
        EXTERN ?FLT_TO_L
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??SampleApp_Init?relay
        FUNCTION ??SampleApp_Init?relay,0203H
        PUBLIC ??SampleApp_MessageMSGCB?relay
        FUNCTION ??SampleApp_MessageMSGCB?relay,0203H
        PUBLIC ??SampleApp_ProcessEvent?relay
        FUNCTION ??SampleApp_ProcessEvent?relay,0203H
        PUBLIC ??SampleApp_SendFlashMessage?relay
        FUNCTION ??SampleApp_SendFlashMessage?relay,0203H
        PUBLIC ??SampleApp_SendPeriodicMessage?relay
        FUNCTION ??SampleApp_SendPeriodicMessage?relay,0203H
        PUBLIC LedState
        PUBWEAK P1DIR
        PUBWEAK P1INP
        PUBWEAK P1SEL
        PUBLIC SampleAppFlashCounter
        PUBLIC SampleAppPeriodicCounter
        PUBLIC SampleApp_ClusterList
        PUBLIC SampleApp_Flash_DstAddr
        PUBLIC SampleApp_Group
        PUBLIC SampleApp_Init
        FUNCTION SampleApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC SampleApp_MessageMSGCB
        FUNCTION SampleApp_MessageMSGCB,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 57, STACK
        PUBLIC SampleApp_NwkState
        PUBLIC SampleApp_Periodic_DstAddr
        PUBLIC SampleApp_ProcessEvent
        FUNCTION SampleApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC SampleApp_SendFlashMessage
        FUNCTION SampleApp_SendFlashMessage,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC SampleApp_SendPeriodicMessage
        FUNCTION SampleApp_SendPeriodicMessage,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC SampleApp_SimpleDesc
        PUBLIC SampleApp_TaskID
        PUBLIC SampleApp_TransID
        PUBLIC SampleApp_epDesc
        PUBWEAK _A_P1
        PUBWEAK __Constant_41200000
        PUBWEAK __Constant_42c80000
        PUBWEAK __Constant_447a0000
        PUBLIC sensor_value
        PUBLIC set_jw
        PUBLIC set_lhw
        PUBLIC set_shidu
        PUBLIC set_wendu
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
osal_memcpy         SYMBOL "osal_memcpy"
aps_AddGroup        SYMBOL "aps_AddGroup"
osal_msg_receive    SYMBOL "osal_msg_receive"
HalLedSet           SYMBOL "HalLedSet"
HalLedBlink         SYMBOL "HalLedBlink"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
DHT11               SYMBOL "DHT11"
get5                SYMBOL "get5"
get0                SYMBOL "get0"
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??DHT11?relay       SYMBOL "?relay", DHT11
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??afRegister?relay  SYMBOL "?relay", afRegister
??aps_AddGroup?relay SYMBOL "?relay", aps_AddGroup
??get0?relay        SYMBOL "?relay", get0
??get5?relay        SYMBOL "?relay", get5
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
SampleApp_Init      SYMBOL "SampleApp_Init"
??SampleApp_Init?relay SYMBOL "?relay", SampleApp_Init
SampleApp_MessageMSGCB SYMBOL "SampleApp_MessageMSGCB"
??SampleApp_MessageMSGCB?relay SYMBOL "?relay", SampleApp_MessageMSGCB
SampleApp_ProcessEvent SYMBOL "SampleApp_ProcessEvent"
??SampleApp_ProcessEvent?relay SYMBOL "?relay", SampleApp_ProcessEvent
SampleApp_SendFlashMessage SYMBOL "SampleApp_SendFlashMessage"
??SampleApp_SendFlashMessage?relay SYMBOL "?relay", SampleApp_SendFlashMessage
SampleApp_SendPeriodicMessage SYMBOL "SampleApp_SendPeriodicMessage"
??SampleApp_SendPeriodicMessage?relay SYMBOL "?relay", SampleApp_SendPeriodicMessage

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_AddGroup
        FUNCTION aps_AddGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN DHT11
        FUNCTION DHT11,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN get5
        FUNCTION get5,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN get0
        FUNCTION get0,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??DHT11?relay
        FUNCTION ??DHT11?relay,00H
        EXTERN ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??aps_AddGroup?relay
        FUNCTION ??aps_AddGroup?relay,00H
        EXTERN ??get0?relay
        FUNCTION ??get0?relay,00H
        EXTERN ??get5?relay
        FUNCTION ??get5?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN shidu_ge
        EXTERN shidu_shi
        EXTERN wendu_ge
        EXTERN wendu_shi

// F:\2019\¹ú´´-1100\ÏÂÎ»»ú³ÌÐò£¨CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp-end3.c
//    1 /**************************************************************************************************
//    2   Filename:       SampleApp.c
//    3   Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
//    4   Revision:       $Revision: 19453 $
//    5 
//    6   Description:    Sample Application (no Profile).
//    7 
//    8 
//    9   Copyright 2007 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This application isn't intended to do anything useful, it is
//   42   intended to be a simple example of an application's structure.
//   43 
//   44   This application sends it's messages either as broadcast or
//   45   broadcast filtered group messages.  The other (more normal)
//   46   message addressing is unicast.  Most of the other sample
//   47   applications are written to support the unicast message model.
//   48 
//   49   Key control:
//   50     SW1:  Sends a flash command to all devices in Group 1.
//   51     SW2:  Adds/Removes (toggles) this device in and out
//   52           of Group 1.  This will enable and disable the
//   53           reception of the flash command.
//   54 *********************************************************************/
//   55 
//   56 /*********************************************************************
//   57  * INCLUDES
//   58  */
//   59 #include "OSAL.h"
//   60 #include "ZGlobals.h"
//   61 #include "AF.h"
//   62 #include "aps_groups.h"
//   63 #include "ZDApp.h"
//   64 
//   65 #include "SampleApp.h"
//   66 #include "SampleAppHw.h"
//   67 
//   68 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f6H
// unsigned char volatile __sfr P1INP
P1INP:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//   69 
//   70 /* HAL */
//   71 #include "hal_lcd.h"
//   72 #include "hal_led.h"
//   73 #include "hal_key.h"
//   74 #include "ADC.h"
//   75 #include "dht11.h"
//   76 /*********************************************************************
//   77  * MACROS
//   78  */
//   79 
//   80 /*********************************************************************
//   81  * CONSTANTS
//   82  */
//   83 
//   84 /*********************************************************************
//   85  * TYPEDEFS
//   86  */
//   87 
//   88 /*********************************************************************
//   89  * GLOBAL VARIABLES
//   90  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   91 uint8 LedState = 0;
LedState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//   92 uint8 set_wendu=15;//ÉèÖÃµÄÎÂ¶ÈÖµ
set_wendu:
        DATA8
        DS 1
        REQUIRE `?<Initializer for set_wendu>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   93 uint8 set_shidu=60;//ÉèÖÃµÄÊª¶ÈÖµ
set_shidu:
        DATA8
        DS 1
        REQUIRE `?<Initializer for set_shidu>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   94 uint16 set_jw=2000;//ÉèÖÃµÄÒ»Ñõ»¯Ì¼Öµ
set_jw:
        DATA16
        DS 2
        REQUIRE `?<Initializer for set_jw>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   95 uint16 set_lhw=2000;//ÉèÖÃµÄÒ»Ñõ»¯Ì¼Öµ
set_lhw:
        DATA16
        DS 2
        REQUIRE `?<Initializer for set_lhw>`
        REQUIRE __INIT_XDATA_I
//   96 
//   97 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   98 const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
SampleApp_ClusterList:
        DATA16
        DW 1
        DW 2
        DW 3
        DW 4
//   99 {
//  100   SAMPLEAPP_PERIODIC_CLUSTERID,
//  101   SAMPLEAPP_FLASH_CLUSTERID,
//  102   SAMPLEAPP_COM_CLUSTERID,      
//  103   SAMPLEAPP_P2P_CLUSTERID      
//  104 };
//  105 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  106 const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
SampleApp_SimpleDesc:
        DB 20
        DATA16
        DW 3848
        DW 1
        DATA8
        DB 0
        DB 4
        DATA16
        DW SampleApp_ClusterList
        DATA8
        DB 4
        DATA16
        DW SampleApp_ClusterList
//  107 {
//  108   SAMPLEAPP_ENDPOINT,              //  int Endpoint;
//  109   SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
//  110   SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  111   SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//  112   SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
//  113   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//  114   (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
//  115   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//  116   (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
//  117 };
//  118 
//  119 // This is the Endpoint/Interface description.  It is defined here, but
//  120 // filled-in in SampleApp_Init().  Another way to go would be to fill
//  121 // in the structure here and make it a "const" (in code space).  The
//  122 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  123 endPointDesc_t SampleApp_epDesc;
SampleApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  124 
//  125 /*********************************************************************
//  126  * EXTERNAL VARIABLES
//  127  */
//  128 
//  129 /*********************************************************************
//  130  * EXTERNAL FUNCTIONS
//  131  */
//  132 
//  133 /*********************************************************************
//  134  * LOCAL VARIABLES
//  135  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  136 uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
SampleApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  137                           // This variable will be received when
//  138                           // SampleApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  139 devStates_t SampleApp_NwkState;
SampleApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  140 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  141 uint8 SampleApp_TransID;  // This is the unique message ID (counter)
SampleApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  142 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  143 afAddrType_t SampleApp_Periodic_DstAddr;  //¹ã²¥
SampleApp_Periodic_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  144 afAddrType_t SampleApp_Flash_DstAddr;//×é²¥
SampleApp_Flash_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  145 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  146 aps_Group_t SampleApp_Group;
SampleApp_Group:
        DS 18
        REQUIRE __INIT_XDATA_Z
//  147 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  148 uint8 SampleAppPeriodicCounter = 0;
SampleAppPeriodicCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  149 uint8 SampleAppFlashCounter = 0;
SampleAppFlashCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  150 uint8 sensor_value[20];//±£´æ´«¸ÐÆ÷Öµ
sensor_value:
        DS 20
        REQUIRE __INIT_XDATA_Z
//  151 
//  152 /*********************************************************************
//  153  * LOCAL FUNCTIONS
//  154  */
//  155 void SampleApp_HandleKeys( uint8 shift, uint8 keys );
//  156 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  157 void SampleApp_SendPeriodicMessage( void );
//  158 void SampleApp_SendFlashMessage( uint16 flashTime );
//  159 /*********************************************************************
//  160  * NETWORK LAYER CALLBACKS
//  161  */
//  162 
//  163 /*********************************************************************
//  164  * PUBLIC FUNCTIONS
//  165  */
//  166 
//  167 /*********************************************************************
//  168  * @fn      SampleApp_Init
//  169  *
//  170  * @brief   Initialization function for the Generic App Task.
//  171  *          This is called during initialization and should contain
//  172  *          any application specific initialization (ie. hardware
//  173  *          initialization/setup, table initialization, power up
//  174  *          notificaiton ... ).
//  175  *
//  176  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  177  *                    used to send messages and set timers.
//  178  *
//  179  * @return  none
//  180  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  181 void SampleApp_Init( uint8 task_id )
SampleApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function SampleApp_Init
        CODE
//  182 {
        FUNCALL SampleApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     A,R1
//  183   SampleApp_TaskID = task_id;
        MOV     DPTR,#SampleApp_TaskID
        MOVX    @DPTR,A
//  184   SampleApp_NwkState = DEV_INIT;
        MOV     DPTR,#SampleApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  185   SampleApp_TransID = 0;
        MOV     DPTR,#SampleApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  186 
//  187  
//  188   
//  189   // Device hardware initialization can be added here or in main() (Zmain.c).
//  190   // If the hardware is application specific - add it here.
//  191   // If the hardware is other parts of the device add it in main().
//  192 
//  193  #if defined ( BUILD_ALL_DEVICES )
//  194   // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
//  195   // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
//  196   // together - if they are - we will start up a coordinator. Otherwise,
//  197   // the device will start as a router.
//  198   if ( readCoordinatorJumper() )
//  199     zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
//  200   else
//  201     zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
//  202 #endif // BUILD_ALL_DEVICES
//  203 
//  204 #if defined ( HOLD_AUTO_START )
//  205   // HOLD_AUTO_START is a compile option that will surpress ZDApp
//  206   //  from starting the device and wait for the application to
//  207   //  start the device.
//  208   ZDOInitDevice(0);
//  209 #endif
//  210 
//  211   // Setup for the periodic message's destination address
//  212   // Broadcast to everyone
//  213   SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  214   SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  215   SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
        MOV     DPTR,#SampleApp_Periodic_DstAddr
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  216 
//  217   // Setup for the flash command's destination address - Group 1
//  218   SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
        MOV     DPTR,#SampleApp_Flash_DstAddr + 8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  219   SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  220   SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP; //×éºÅ1
        MOV     DPTR,#SampleApp_Flash_DstAddr
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  221   
//  222   // Fill out the endpoint description.
//  223   SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
        MOV     DPTR,#SampleApp_epDesc
        MOV     A,#0x14
        MOVX    @DPTR,A
//  224   SampleApp_epDesc.task_id = &SampleApp_TaskID;
        INC     DPTR
        MOV     A,#SampleApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  225   SampleApp_epDesc.simpleDesc
//  226             = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
        INC     DPTR
        MOV     A,#SampleApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  227   SampleApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  228 
//  229   // Register the endpoint description with the AF
//  230   afRegister( &SampleApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#SampleApp_epDesc & 0xff
        MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  231 
//  232   // Register for all key events - This app will handle all key events
//  233   RegisterForKeys( SampleApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  234 
//  235   // By default, all devices start out in Group 1
//  236   SampleApp_Group.ID = 0x0001;
        MOV     DPTR,#SampleApp_Group
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  237   osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     R2,#(SampleApp_Group + 2) & 0xff
        MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  238   aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
        ; Setup parameters for call to function aps_AddGroup
        MOV     R2,#SampleApp_Group & 0xff
        MOV     R3,#(SampleApp_Group >> 8) & 0xff
        MOV     R1,#0x14
        LCALL   ??aps_AddGroup?relay
//  239 
//  240 #if defined ( LCD_SUPPORTED )
//  241  // HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 ); 
//  242 #endif
//  243 }
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//  244 
//  245 /*********************************************************************
//  246  * @fn      SampleApp_ProcessEvent
//  247  *
//  248  * @brief   Generic Application Task event processor.  This function
//  249  *          is called to process all events for the task.  Events
//  250  *          include timers, messages and any other user defined events.
//  251  *
//  252  * @param   task_id  - The OSAL assigned task ID.
//  253  * @param   events - events to process.  This is a bit map and can
//  254  *                   contain more than one event.
//  255  *
//  256  * @return  none
//  257  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  258 uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
SampleApp_ProcessEvent:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function SampleApp_ProcessEvent
        CODE
//  259 { uint8 i;
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  260   afIncomingMSGPacket_t *MSGpkt;
//  261   (void)task_id;  // Intentionally unreferenced parameter
//  262 
//  263   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JZ      ??SampleApp_ProcessEvent_0
//  264   {
//  265     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??SampleApp_ProcessEvent_1
//  266     while ( MSGpkt )
//  267     {
//  268       switch ( MSGpkt->hdr.event )
//  269       {
//  270         // Received when a key is pressed
//  271         case KEY_CHANGE:
//  272         //  SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  273           break;
//  274 
//  275         // Received when a messages is received (OTA) for this endpoint
//  276         case AF_INCOMING_MSG_CMD:
//  277           SampleApp_MessageMSGCB( MSGpkt );
//  278           break;
//  279 
//  280         // Received whenever the device changes state in the network
//  281         case ZDO_STATE_CHANGE:
//  282           SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??SampleApp_ProcessEvent_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SampleApp_NwkState
        MOVX    @DPTR,A
//  283           if ((SampleApp_NwkState == DEV_ROUTER)|| (SampleApp_NwkState == DEV_END_DEVICE) )
        XRL     A,#0x7
        JZ      ??SampleApp_ProcessEvent_3
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??SampleApp_ProcessEvent_4
//  284           {
//  285               P1SEL&=~0x20;//×÷ÎªÆÕÍ¨IO¿Ú 
??SampleApp_ProcessEvent_3:
        ANL     0xf4,#0xdf
//  286               P1DIR|=0x20;  //P1_5¶¨ÒåÎªÊä³ö 
        ORL     0xfe,#0x20
//  287               P1INP&=~0x20; //´ò¿ªÉÏÀ­
        ANL     0xf6,#0xdf
//  288               P1_5=1;
        SETB    0x90.5
//  289               HalLedSet(HAL_LED_1,HAL_LED_MODE_ON);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  290               HalLedSet(HAL_LED_2,HAL_LED_MODE_ON);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x2
        LCALL   ??HalLedSet?relay
//  291               HalLedBlink (HAL_LED_1,4, 50, 500);
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0xc
        MOV     R5,#0x1
        MOV     R3,#0x32
        MOV     R2,#0x4
        MOV     R1,#0x1
        LCALL   ??HalLedBlink?relay
//  292             // osal_start_timerEx( SampleApp_TaskID,SAMPLEAPP_SEND_PERIODIC_MSG_EVT,2000 );//ÖÜÆÚ²É¼¯´«¸ÐÆ÷Öµ  
//  293           }
//  294           else
//  295           {
//  296             // Device is no longer in the network
//  297           }
//  298           break;
//  299 
//  300         default:
//  301           break;
//  302       }
//  303 
//  304       // Release the memory
//  305       osal_msg_deallocate( (uint8 *)MSGpkt );
??SampleApp_ProcessEvent_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  306 
//  307       // Next - if one is available
//  308       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??SampleApp_ProcessEvent_1:
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??SampleApp_ProcessEvent_5
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??SampleApp_ProcessEvent_6
        ADD     A,#0x49
        JZ      ??SampleApp_ProcessEvent_2
        SJMP    ??SampleApp_ProcessEvent_4
??SampleApp_ProcessEvent_6:
        ; Setup parameters for call to function SampleApp_MessageMSGCB
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??SampleApp_MessageMSGCB?relay
        SJMP    ??SampleApp_ProcessEvent_4
//  309     }
//  310 
//  311     // return unprocessed events
//  312     return (events ^ SYS_EVENT_MSG);
??SampleApp_ProcessEvent_5:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??SampleApp_ProcessEvent_7:
        MOV     R3,A
        SJMP    ??SampleApp_ProcessEvent_8
//  313   }
//  314 
//  315   // Send a message out - This event is generated by a timer
//  316   //  (setup in SampleApp_Init()).
//  317   if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
??SampleApp_ProcessEvent_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_ProcessEvent_9
//  318   {
//  319     // Setup to send message again in normal period (+ a little jitter)
//  320     osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  321        2000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x30
        MOV     R5,#0x7
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  322 
//  323     // return unprocessed events
//  324     return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
        MOV     A,R6
        XRL     A,#0x1
        MOV     R2,A
        MOV     A,R7
        SJMP    ??SampleApp_ProcessEvent_7
//  325   }
//  326 
//  327   // Discard unknown events
//  328   return 0;
??SampleApp_ProcessEvent_9:
        MOV     R2,#0x0
        MOV     R3,#0x0
??SampleApp_ProcessEvent_8:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
        REQUIRE P1SEL
        REQUIRE P1DIR
        REQUIRE P1INP
        REQUIRE _A_P1
//  329 }
//  330 
//  331 
//  332 /*********************************************************************
//  333  * LOCAL FUNCTIONS
//  334  */
//  335 
//  336 /*********************************************************************
//  337  * @fn      SampleApp_MessageMSGCB
//  338  *
//  339  * @brief   Data message processor callback.  This function processes
//  340  *          any incoming data - probably from other devices.  So, based
//  341  *          on cluster ID, perform the intended action.
//  342  *
//  343  * @param   none
//  344  *
//  345  * @return  none
//  346  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  347 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
SampleApp_MessageMSGCB:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function SampleApp_MessageMSGCB
        CODE
//  348 {
        FUNCALL SampleApp_MessageMSGCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, DHT11
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, get5
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, get0
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x16
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 26
        MOV     A,#-0x1a
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 48)
//  349   uint8 coor_to_end[4];//½ÓÊÕµÄÎÞÏßÊý¾Ý£¨²É¼¯£©
//  350   uint8 coor_to_con[4];//½ÓÊÕµÄÎÞÏßÊý¾Ý(¿ØÖÆ)
//  351   uint8 byte_len;//×Ö½Ú³¤¶È
//  352   uint8 end_sensor[15];
//  353   uint8 end_con[3];
//  354   uint8 wendu_ce1=0;//ÎÂ¶ÈÊµÊ±Öµ
//  355   uint8 shidu_cel=0;//Êª¶ÈÊµÊ±Öµ
//  356   uint16 jw_ce1=0;//coÊµÊ±Öµ
//  357   uint16 lhw_ce1=0;//coÊµÊ±Öµ
//  358   float temp;
//  359   switch ( pkt->clusterId )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for SampleApp_MessageMSGCB>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA8
        DATA
        DATA8
        DB        1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_2
        CODE
//  360   {    
//  361     case SAMPLEAPP_PERIODIC_CLUSTERID: //±íÊ¾ÖÜÆÚº¯Êý
//  362           osal_memcpy(coor_to_end,pkt->cmd.Data,pkt->cmd.DataLength);   // ¶ÔÎÞÏßÊý¾Ý½øÐÐ´¦Àí
??SampleApp_MessageMSGCB_1:
        ; Setup parameters for call to function osal_memcpy
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 51)
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_12:
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 48)
//  363           byte_len=pkt->cmd.DataLength;
//  364           if(coor_to_end[0]==0x03&&coor_to_end[1]==0x03)
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x3
        JZ      $+5
        LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x3
        JZ      $+5
        LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
//  365           {
//  366               end_sensor[0]=0x03;//µØÖ·
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        MOVX    @DPTR,A
//  367               end_sensor[1]=0x03;//¹¦ÄÜ´úÂë
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        MOVX    @DPTR,A
//  368               DHT11();  //»ñÈ¡ÎÂÊª¶È
        ; Setup parameters for call to function DHT11
        LCALL   ??DHT11?relay
//  369               end_sensor[2]=wendu_shi;
        MOV     DPTR,#wendu_shi
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  370               end_sensor[3]=wendu_ge;
        MOV     DPTR,#wendu_ge
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  371               end_sensor[4]=shidu_shi;
        MOV     DPTR,#shidu_shi
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  372               end_sensor[5]=shidu_ge;
        MOV     DPTR,#shidu_ge
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  373               wendu_ce1=wendu_shi*10+wendu_ge;
        MOV     DPTR,#wendu_ge
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     B,#0xa
        MOV     DPTR,#wendu_shi
        MOVX    A,@DPTR
        MUL     AB
        MOV     DPH,#(wendu_ge >> 8) & 0xff
        POP     DPL
        CFI CFA_SP SP+0
        MOV     R0,A
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     ?V0 + 13,A
//  374               shidu_cel=shidu_shi*10+shidu_ge;
        MOV     DPTR,#shidu_ge
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     B,#0xa
        MOV     DPTR,#shidu_shi
        MOVX    A,@DPTR
        MUL     AB
        MOV     DPH,#(shidu_ge >> 8) & 0xff
        POP     DPL
        CFI CFA_SP SP+0
        MOV     R0,A
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     ?V0 + 12,A
//  375               temp=3.33-get5();//»ñÈ¡¼×ÍéÖµ
        MOV     ?V0 + 0,#-0x48
        MOV     ?V0 + 1,#0x1e
        MOV     ?V0 + 2,#0x55
        MOV     ?V0 + 3,#0x40
        ; Setup parameters for call to function get5
        LCALL   ??get5?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_SUB
//  376               end_sensor[6]=(char)(temp)%10;
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,?V0 + 1
        MOV     ?V0 + 6,?V0 + 2
        MOV     ?V0 + 7,?V0 + 3
        MOV     R0,#?V0 + 4
        LCALL   ?FLT_TO_L
        MOV     A,?V0 + 4
        MOV     B,#0xa
        DIV     AB
        MOV     R2,B
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        LCALL   ?Subroutine1 & 0xFFFF
//  377               end_sensor[7]=(char)(temp*10)%10;
??CrossCallReturnLabel_0:
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 8
        LCALL   ?FLT_TO_L
        MOV     A,?V0 + 8
        MOV     B,#0xa
        DIV     AB
        MOV     R3,B
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R3
        LCALL   ?Subroutine2 & 0xFFFF
//  378               end_sensor[8]=(char)(temp*100)%10;
??CrossCallReturnLabel_2:
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 8
        LCALL   ?FLT_TO_L
        MOV     A,?V0 + 8
        MOV     B,#0xa
        DIV     AB
        MOV     R4,B
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
//  379               end_sensor[9]=(char)(temp*1000)%10;
        MOV     DPTR,#__Constant_447a0000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     A,?V0 + 0
        MOV     B,#0xa
        DIV     AB
        MOV     A,B
        MOV     ?V0 + 0,A
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  380                jw_ce1=end_sensor[6]*1000+ end_sensor[7]*100+ end_sensor[8]*10+ end_sensor[9];
        MOV     A,R2
        MOV     R0,A
        MOV     B,#-0x18
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x3
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,R3
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV     R6,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R7,A
//  381               temp=3.33-get0();//»ñÈ¡¼×ÍéÖµ
        MOV     ?V0 + 0,#-0x48
        MOV     ?V0 + 1,#0x1e
        MOV     ?V0 + 2,#0x55
        MOV     ?V0 + 3,#0x40
        ; Setup parameters for call to function get0
        LCALL   ??get0?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_SUB
//  382               end_sensor[10]=(char)(temp)%10;
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,?V0 + 1
        MOV     ?V0 + 6,?V0 + 2
        MOV     ?V0 + 7,?V0 + 3
        MOV     R0,#?V0 + 4
        LCALL   ?FLT_TO_L
        MOV     A,?V0 + 4
        MOV     B,#0xa
        DIV     AB
        MOV     R3,B
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R3
        LCALL   ?Subroutine1 & 0xFFFF
//  383               end_sensor[11]=(char)(temp*10)%10;
??CrossCallReturnLabel_1:
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 8
        LCALL   ?FLT_TO_L
        MOV     A,?V0 + 8
        MOV     B,#0xa
        DIV     AB
        MOV     R2,B
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        LCALL   ?Subroutine2 & 0xFFFF
//  384               end_sensor[12]=(char)(temp*100)%10;
??CrossCallReturnLabel_3:
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 8
        LCALL   ?FLT_TO_L
        MOV     A,?V0 + 8
        MOV     B,#0xa
        DIV     AB
        MOV     R4,B
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
//  385               end_sensor[13]=(char)(temp*1000)%10;
        MOV     DPTR,#__Constant_447a0000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     A,?V0 + 0
        MOV     B,#0xa
        DIV     AB
        MOV     A,B
        MOV     ?V0 + 0,A
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  386               lhw_ce1=end_sensor[10]*1000+ end_sensor[11]*100+ end_sensor[12]*10+ end_sensor[13];
        MOV     A,R3
        MOV     R0,A
        MOV     B,#-0x18
        MUL     AB
        XCH     A,R0
        MOV     R3,B
        MOV     B,#0x3
        MUL     AB
        ADD     A,R3
        MOV     R1,A
        MOV     A,R2
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_11:
        MOV     ?V0 + 0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
//  387              
//  388               end_sensor[14]=0x68;
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x68
        MOVX    @DPTR,A
//  389                if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
//  390                        SAMPLEAPP_PERIODIC_CLUSTERID,
//  391                        15,
//  392                        end_sensor,
//  393                        &SampleApp_TransID,
//  394                        AF_DISCV_ROUTE,
//  395                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 2,#0x1e
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 49)
        MOV     ?V0 + 2,#SampleApp_TransID & 0xff
        MOV     ?V0 + 3,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 51)
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 53)
        MOV     ?V0 + 2,#0xf
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 55)
        MOV     ?V0 + 2,#0x1
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 57)
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     A,R1
        JZ      $+5
        LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
//  396                 {
//  397                     //¶Ô´«¸ÐÆ÷½øÐÐ´¦Àí
//  398                   if(shidu_cel>set_shidu&&wendu_ce1>set_wendu&&jw_ce1<set_jw&&lhw_ce1<set_lhw)
        MOV     DPTR,#set_shidu
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,?V0 + 12
        JNC     ??SampleApp_MessageMSGCB_3
        MOV     DPTR,#set_wendu
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,?V0 + 13
        JNC     ??SampleApp_MessageMSGCB_3
        MOV     DPTR,#set_jw
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     C
        MOV     A,R6
        SUBB    A,R0
        MOV     A,R7
        SUBB    A,R1
        JNC     ??SampleApp_MessageMSGCB_3
        MOV     DPTR,#set_lhw
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,R0
        MOV     A,?V0 + 1
        SUBB    A,R1
        JNC     ??SampleApp_MessageMSGCB_3
//  399                   {
//  400                      P1_5=1;
        SETB    0x90.5
//  401                      HalLedSet(HAL_LED_1,HAL_LED_MODE_ON);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  402                      HalLedSet(HAL_LED_2,HAL_LED_MODE_ON);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
??SampleApp_MessageMSGCB_4:
        MOV     R1,#0x2
        LCALL   ??HalLedSet?relay
        LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
//  403                   }
//  404                   else
//  405                   {
//  406                      P1_5=0;
??SampleApp_MessageMSGCB_3:
        CLR     0x90.5
//  407                      HalLedSet(HAL_LED_1,HAL_LED_MODE_OFF);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  408                      HalLedSet(HAL_LED_2,HAL_LED_MODE_OFF);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        SJMP    ??SampleApp_MessageMSGCB_4
//  409                   }
//  410                 }
//  411                 else
//  412                 {
//  413                   // Error occurred in request to send.
//  414                 }            
//  415           }
//  416          break;
//  417         case  SAMPLEAPP_FLASH_CLUSTERID: //±íÊ¾²ÎÊýÏÂ·¢
//  418            osal_memcpy(coor_to_con,pkt->cmd.Data,pkt->cmd.DataLength);   // ¶ÔÎÞÏßÊý¾Ý½øÐÐ´¦Àí
??SampleApp_MessageMSGCB_2:
        ; Setup parameters for call to function osal_memcpy
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 51)
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 48)
//  419             if(coor_to_con[0]==0x03)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x3
        JZ      $+5
        LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
//  420            {
//  421              if(coor_to_con[1]==0x04)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??SampleApp_MessageMSGCB_5
//  422              {
//  423                set_wendu=coor_to_con[3];
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#set_wendu
        LCALL   ??Subroutine9_0 & 0xFFFF
//  424                end_con[0]=0x03;
//  425                end_con[1]=0x04;
??CrossCallReturnLabel_23:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
//  426                end_con[2]=0x68;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
//  427                AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
//  428                        SAMPLEAPP_FLASH_CLUSTERID,3,end_con,
//  429                        &SampleApp_TransID,
//  430                        AF_DISCV_ROUTE,
//  431                        AF_DEFAULT_RADIUS);
//  432              }
??CrossCallReturnLabel_4:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 49)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 51)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 53)
        MOV     ?V0 + 0,#0x3
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 55)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 57)
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 48)
//  433               if(coor_to_con[1]==0x05)
??SampleApp_MessageMSGCB_5:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??SampleApp_MessageMSGCB_6
//  434              {
//  435                set_shidu=coor_to_con[3];
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#set_shidu
        LCALL   ??Subroutine9_0 & 0xFFFF
//  436                end_con[0]=0x03;
//  437                end_con[1]=0x05;
??CrossCallReturnLabel_24:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x5
        MOVX    @DPTR,A
//  438                end_con[2]=0x68;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
//  439                AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
//  440                        SAMPLEAPP_FLASH_CLUSTERID,3,end_con,
//  441                        &SampleApp_TransID,
//  442                        AF_DISCV_ROUTE,
//  443                        AF_DEFAULT_RADIUS);
//  444              }
??CrossCallReturnLabel_5:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 49)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 51)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 53)
        MOV     ?V0 + 0,#0x3
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 55)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 57)
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 48)
//  445               if(coor_to_con[1]==0x06)
??SampleApp_MessageMSGCB_6:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??SampleApp_MessageMSGCB_7
//  446              {
//  447                set_jw=coor_to_con[2]*256+coor_to_con[3];
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#set_jw
        LCALL   ?Subroutine0 & 0xFFFF
//  448                end_con[0]=0x03;
//  449                end_con[1]=0x06;
??CrossCallReturnLabel_21:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//  450                end_con[2]=0x68;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
//  451                AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
//  452                        SAMPLEAPP_FLASH_CLUSTERID,3,end_con,
//  453                        &SampleApp_TransID,
//  454                        AF_DISCV_ROUTE,
//  455                        AF_DEFAULT_RADIUS);
//  456              }
??CrossCallReturnLabel_6:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 49)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 51)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 53)
        MOV     ?V0 + 0,#0x3
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 55)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 57)
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 48)
//  457               if(coor_to_con[1]==0x07)
??SampleApp_MessageMSGCB_7:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x7
        JNZ     ??SampleApp_MessageMSGCB_0
//  458              {
//  459                set_lhw=coor_to_con[2]*256+coor_to_con[3];
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#set_lhw
        LCALL   ?Subroutine0 & 0xFFFF
//  460                end_con[0]=0x03;
//  461                end_con[1]=0x07;
??CrossCallReturnLabel_22:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x7
        MOVX    @DPTR,A
//  462                end_con[2]=0x68;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
//  463                AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
//  464                        SAMPLEAPP_FLASH_CLUSTERID,3,end_con,
//  465                        &SampleApp_TransID,
//  466                        AF_DISCV_ROUTE,
//  467                        AF_DEFAULT_RADIUS);
//  468              }
//  469            }
//  470       break;
//  471 
//  472   }
??CrossCallReturnLabel_7:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 49)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 51)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 53)
        MOV     ?V0 + 0,#0x3
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 55)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 57)
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_18:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 48)
//  473 }
??SampleApp_MessageMSGCB_0:
        MOV     A,#0x1a
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R7,#0xe
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
        REQUIRE _A_P1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond4) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond4) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond4) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond4) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond5) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond5) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond5) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond5) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond6) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond6) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond6) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond6) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond6) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond6) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond6) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond7) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond7) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond7) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiPicker8 Using cfiCommon1
        CFI (cfiPicker8) NoFunction
        CFI (cfiPicker8) Picker
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
        MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiPicker8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond9 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 51)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond10) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond10) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond10) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond10) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond10) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 51)
        CFI Block cfiPicker11 Using cfiCommon1
        CFI (cfiPicker11) NoFunction
        CFI (cfiPicker11) Picker
        MOV     A,R2
        ADD     A,#0x1f
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RET
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiPicker11

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond12 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond13) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond13) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiPicker14 Using cfiCommon1
        CFI (cfiPicker14) NoFunction
        CFI (cfiPicker14) Picker
        MOV     B,#0x64
        MUL     AB
        MOV     R2,A
        MOV     R3,B
        MOV     A,R0
        ADD     A,R2
        MOV     R0,A
        MOV     A,R1
        ADDC    A,R3
        MOV     R1,A
        MOV     A,R4
        MOV     B,#0xa
        MUL     AB
        MOV     R2,A
        MOV     R3,B
        MOV     A,R0
        ADD     A,R2
        MOV     R0,A
        MOV     A,R1
        ADDC    A,R3
        MOV     R1,A
        MOV     A,R0
        ADD     A,?V0 + 0
        RET
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiPicker14

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond15 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond16) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiPicker17 Using cfiCommon1
        CFI (cfiPicker17) NoFunction
        CFI (cfiPicker17) Picker
        MOV     A,R2
        ADD     A,#0x21
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiPicker17

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond18 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond19) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond20) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond21) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond21) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond21) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiPicker22 Using cfiCommon1
        CFI (cfiPicker22) NoFunction
        CFI (cfiPicker22) Picker
        MOV     A,#0x68
        MOVX    @DPTR,A
        ; Setup parameters for call to function AF_DataRequest
        ; Setup parameters for call to function AF_DataRequest
        ; Setup parameters for call to function AF_DataRequest
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiPicker22

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond23 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond24) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiPicker25 Using cfiCommon1
        CFI (cfiPicker25) NoFunction
        CFI (cfiPicker25) Picker
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_19:
        MOV     DPTR,#__Constant_42c80000
        MOV     R0,#?V0 + 4
        RET
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiPicker25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond26 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond27) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiPicker28 Using cfiCommon1
        CFI (cfiPicker28) NoFunction
        CFI (cfiPicker28) Picker
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV     DPTR,#__Constant_41200000
        MOV     R0,#?V0 + 4
        RET
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiPicker28

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond29 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_3
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond30) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_0
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond31) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond31) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond31) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_1
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond32) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond32) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond32) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiPicker33 Using cfiCommon1
        CFI (cfiPicker33) NoFunction
        CFI (cfiPicker33) Picker
        MOVX    @DPTR,A
        MOV     ?V0 + 8,?V0 + 0
        MOV     ?V0 + 9,?V0 + 1
        MOV     ?V0 + 10,?V0 + 2
        MOV     ?V0 + 11,?V0 + 3
        RET
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiPicker33

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond34 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond35) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond35) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiPicker36 Using cfiCommon1
        CFI (cfiPicker36) NoFunction
        CFI (cfiPicker36) Picker
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiPicker36
        REQUIRE ??Subroutine9_0
        ; // Fall through to label ??Subroutine9_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine9_0:
        CFI Block cfiCond37 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_23
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond38) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond38) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond38) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond38) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond39) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond40) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond40) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiPicker41 Using cfiCommon1
        CFI (cfiPicker41) NoFunction
        CFI (cfiPicker41) Picker
        MOVX    @DPTR,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x3
        MOVX    @DPTR,A
        MOV     A,#0x1
        RET
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiPicker41
//  474 
//  475 /*********************************************************************
//  476  * @fn      SampleApp_SendPeriodicMessage
//  477  *
//  478  * @brief   Send the periodic message.
//  479  *
//  480  * @param   none
//  481  *
//  482  * @return  none
//  483  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  484 void SampleApp_SendPeriodicMessage( void )
SampleApp_SendPeriodicMessage:
        CFI Block cfiBlock42 Using cfiCommon0
        CFI Function SampleApp_SendPeriodicMessage
        CODE
//  485 {
        ; Saved register size: 0
        ; Auto size: 0
//  486   
//  487   
//  488   
//  489 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock42
//  490 
//  491 /*********************************************************************
//  492  * @fn      SampleApp_SendFlashMessage
//  493  *
//  494  * @brief   Send the flash message to group 1.
//  495  *
//  496  * @param   flashTime - in milliseconds
//  497  *
//  498  * @return  none
//  499  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  500 void SampleApp_SendFlashMessage( uint16 flashTime )
SampleApp_SendFlashMessage:
        CFI Block cfiBlock43 Using cfiCommon0
        CFI Function SampleApp_SendFlashMessage
        CODE
//  501 {
        ; Saved register size: 0
        ; Auto size: 0
//  502  
//  503 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock43

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for set_wendu>`:
        DATA8
        DB 15

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for set_shidu>`:
        DATA8
        DB 60

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for set_jw>`:
        DATA16
        DW 2000

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for set_lhw>`:
        DATA16
        DW 2000

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_SendPeriodicMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_SendPeriodicMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_SendFlashMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_SendFlashMessage

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Group 1">`:
        DB "Group 1"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_41200000:
        DD 41200000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_42c80000:
        DD 42C80000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_447a0000:
        DD 447A0000H

        END
//  504 
//  505 
//  506 
// 
// 1 636 bytes in segment BANKED_CODE
//    30 bytes in segment BANK_RELAYS
//     4 bytes in segment SFR_AN
//     6 bytes in segment XDATA_I
//     6 bytes in segment XDATA_ID
//    40 bytes in segment XDATA_ROM_C
//    74 bytes in segment XDATA_Z
// 
// 1 672 bytes of CODE  memory
//    28 bytes of CONST memory (+ 12 bytes shared)
//     0 bytes of DATA  memory (+  4 bytes shared)
//    80 bytes of XDATA memory
//
//Errors: none
//Warnings: 2
