///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.40194/W32 for 8051        09/Oct/2018  23:29:58 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\2019\Íõ¼üÄþ-20181005\³ÌÐò£¨²âÊÔÍ¨¹ý£©\ÏÂÎ»»ú³Ì /
//                          Ðò£¨CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\z /
//                          stack\Samples\SampleApp\Source\ADC.c              /
//    Command line       =  -f F:\2019\Íõ¼üÄþ-20181005\³ÌÐò£¨²âÊÔÍ¨¹ý£©\ÏÂÎ»» /
//                          ú³ÌÐò£¨CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tool /
//                          s\CC2530DB\f8wCoord.cfg (-DCPU32MHZ               /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f   /
//                          F:\2019\Íõ¼üÄþ-20181005\³ÌÐò£¨²âÊÔÍ¨¹ý£©\ÏÂÎ»»ú³Ì /
//                          Ðò£¨CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\Tools\C /
//                          C2530DB\f8wConfig.cfg (-DSECURE=0                 /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 F:\2019\Íõ¼üÄþ-20181005\³Ì /
//                          Ðò£¨²âÊÔÍ¨¹ý£©\ÏÂÎ»»ú³ÌÐò£¨CC2530£©\ZStack-CC2530 /
//                          -2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\So /
//                          urce\ADC.c -D ZIGBEEPRO -D ZTOOL_P1 -D xMT_TASK   /
//                          -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -lC               /
//                          F:\2019\Íõ¼üÄþ-20181005\³ÌÐò£¨²âÊÔÍ¨¹ý£©\ÏÂÎ»»ú³Ì /
//                          Ðò£¨CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pr /
//                          o\List\ -lA F:\2019\Íõ¼üÄþ-20181005\³ÌÐò£¨²âÊÔÍ¨¹ /
//                          ý£©\ÏÂÎ»»ú³ÌÐò£¨CC2530£©\ZStack-CC2530-2.3.0-1.4. /
//                          0\Projects\zstack\Samples\SampleApp\CC2530DB\Coor /
//                          dinatorEB-Pro\List\ --diag_suppress Pe001,Pa010   /
//                          -o F:\2019\Íõ¼üÄþ-20181005\³ÌÐò£¨²âÊÔÍ¨¹ý£©\ÏÂÎ»» /
//                          ú³ÌÐò£¨CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB /
//                          -Pro\Obj\ -e --debug --core=plain --dptr=16,1     /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I F:\2019\Íõ¼üÄþ-20181005\³ÌÐò£¨²âÊÔÍ¨¹ý£©\ÏÂÎ»» /
//                          ú³ÌÐò£¨CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\ -I           /
//                          F:\2019\Íõ¼üÄþ-20181005\³ÌÐò£¨²âÊÔÍ¨¹ý£©\ÏÂÎ»»ú³Ì /
//                          Ðò£¨CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\SOURCE\ -I    /
//                          F:\2019\Íõ¼üÄþ-20181005\³ÌÐò£¨²âÊÔÍ¨¹ý£©\ÏÂÎ»»ú³Ì /
//                          Ðò£¨CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\T /
//                          I2530DB\ -I F:\2019\Íõ¼üÄþ-20181005\³ÌÐò£¨²âÊÔÍ¨¹ /
//                          ý£©\ÏÂÎ»»ú³ÌÐò£¨CC2530£©\ZStack-CC2530-2.3.0-1.4. /
//                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\. /
//                          .\..\..\..\COMPONENTS\MT\ -I                      /
//                          F:\2019\Íõ¼üÄþ-20181005\³ÌÐò£¨²âÊÔÍ¨¹ý£©\ÏÂÎ»»ú³Ì /
//                          Ðò£¨CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\HAL\INCLUDE\ -I                         /
//                          F:\2019\Íõ¼üÄþ-20181005\³ÌÐò£¨²âÊÔÍ¨¹ý£©\ÏÂÎ»»ú³Ì /
//                          Ðò£¨CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\HAL\TARGET\CC2530EB\ -I                 /
//                          F:\2019\Íõ¼üÄþ-20181005\³ÌÐò£¨²âÊÔÍ¨¹ý£©\ÏÂÎ»»ú³Ì /
//                          Ðò£¨CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\OSAL\MCU\CCSOC\ -I                      /
//                          F:\2019\Íõ¼üÄþ-20181005\³ÌÐò£¨²âÊÔÍ¨¹ý£©\ÏÂÎ»»ú³Ì /
//                          Ðò£¨CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\OSAL\INCLUDE\ -I                        /
//                          F:\2019\Íõ¼üÄþ-20181005\³ÌÐò£¨²âÊÔÍ¨¹ý£©\ÏÂÎ»»ú³Ì /
//                          Ðò£¨CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\STACK\AF\ -I F:\2019\Íõ¼üÄþ-20181005\³Ì /
//                          Ðò£¨²âÊÔÍ¨¹ý£©\ÏÂÎ»»ú³ÌÐò£¨CC2530£©\ZStack-CC2530 /
//                          -2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\ -I    /
//                          F:\2019\Íõ¼üÄþ-20181005\³ÌÐò£¨²âÊÔÍ¨¹ý£©\ÏÂÎ»»ú³Ì /
//                          Ðò£¨CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\STACK\SEC\ -I                           /
//                          F:\2019\Íõ¼üÄþ-20181005\³ÌÐò£¨²âÊÔÍ¨¹ý£©\ÏÂÎ»»ú³Ì /
//                          Ðò£¨CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\STACK\SAPI\ -I                          /
//                          F:\2019\Íõ¼üÄþ-20181005\³ÌÐò£¨²âÊÔÍ¨¹ý£©\ÏÂÎ»»ú³Ì /
//                          Ðò£¨CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\STACK\SYS\ -I                           /
//                          F:\2019\Íõ¼üÄþ-20181005\³ÌÐò£¨²âÊÔÍ¨¹ý£©\ÏÂÎ»»ú³Ì /
//                          Ðò£¨CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\STACK\ZDO\ -I                           /
//                          F:\2019\Íõ¼üÄþ-20181005\³ÌÐò£¨²âÊÔÍ¨¹ý£©\ÏÂÎ»»ú³Ì /
//                          Ðò£¨CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\ZMAC\F8W\ -I F:\2019\Íõ¼üÄþ-20181005\³Ì /
//                          Ðò£¨²âÊÔÍ¨¹ý£©\ÏÂÎ»»ú³ÌÐò£¨CC2530£©\ZStack-CC2530 /
//                          -2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\COMPONENTS\ZMAC\ -I         /
//                          F:\2019\Íõ¼üÄþ-20181005\³ÌÐò£¨²âÊÔÍ¨¹ý£©\ÏÂÎ»»ú³Ì /
//                          Ðò£¨CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\SERVICES\SADDR\ -I                      /
//                          F:\2019\Íõ¼üÄþ-20181005\³ÌÐò£¨²âÊÔÍ¨¹ý£©\ÏÂÎ»»ú³Ì /
//                          Ðò£¨CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\SERVICES\SDATA\ -I                      /
//                          F:\2019\Íõ¼üÄþ-20181005\³ÌÐò£¨²âÊÔÍ¨¹ý£©\ÏÂÎ»»ú³Ì /
//                          Ðò£¨CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\MAC\INCLUDE\ -I                         /
//                          F:\2019\Íõ¼üÄþ-20181005\³ÌÐò£¨²âÊÔÍ¨¹ý£©\ÏÂÎ»»ú³Ì /
//                          Ðò£¨CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\MAC\HIGH_LEVEL\ -I                      /
//                          F:\2019\Íõ¼üÄþ-20181005\³ÌÐò£¨²âÊÔÍ¨¹ý£©\ÏÂÎ»»ú³Ì /
//                          Ðò£¨CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\MAC\LOW_LEVEL\srf04\ -I                 /
//                          F:\2019\Íõ¼üÄþ-20181005\³ÌÐò£¨²âÊÔÍ¨¹ý£©\ÏÂÎ»»ú³Ì /
//                          Ðò£¨CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz   /
//                          --require_prototypes                              /
//    List file          =  F:\2019\Íõ¼üÄþ-20181005\³ÌÐò£¨²âÊÔÍ¨¹ý£©\ÏÂÎ»»ú³Ì /
//                          Ðò£¨CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pr /
//                          o\List\ADC.s51                                    /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME ADC

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_DIV
        EXTERN ?FLT_MUL
        EXTERN ?L_MOV_X
        EXTERN ?UL_TO_FLT
        EXTERN ?US_SHR
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8

        FUNCTION ??Delay_nus?relay,0203H
        PUBLIC ??getHR202_6?relay
        FUNCTION ??getHR202_6?relay,0203H
        PUBLIC ??getLight_5?relay
        FUNCTION ??getLight_5?relay,0203H
        PUBWEAK ADCCFG
        PUBWEAK ADCCON1
        PUBWEAK ADCCON3
        PUBWEAK ADCH
        PUBWEAK ADCL
        FUNCTION Delay_nus,080203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBWEAK __Constant_40533333
        PUBWEAK __Constant_45fd0000
        PUBLIC getHR202_6
        FUNCTION getHR202_6,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC getLight_5
        FUNCTION getLight_5,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
getHR202_6          SYMBOL "getHR202_6"
??getHR202_6?relay  SYMBOL "?relay", getHR202_6
getLight_5          SYMBOL "getLight_5"
??getLight_5?relay  SYMBOL "?relay", getLight_5

// F:\2019\Íõ¼üÄþ-20181005\³ÌÐò£¨²âÊÔÍ¨¹ý£©\ÏÂÎ»»ú³ÌÐò£¨CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\ADC.c
//    1 #include "ADC.h"
//    2 #include<ioCC2530.h>

        ASEGN SFR_AN:DATA:NOROOT,0b4H
// unsigned char volatile __sfr ADCCON1
ADCCON1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b6H
// unsigned char volatile __sfr ADCCON3
ADCCON3:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0baH
// unsigned char volatile __sfr ADCL
ADCL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0bbH
// unsigned char volatile __sfr ADCH
ADCH:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f2H
// unsigned char volatile __sfr ADCCFG
ADCCFG:
        DATA8
        DS 1
//    3 static uint8 Delay_nus(uint16 i);
//    4 //¹âÕÕÖµ

        RSEG BANKED_CODE:CODE:NOROOT(0)
//    5 float getLight_5(void) 
getLight_5:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function getLight_5
        CODE
//    6   {   
        FUNCALL getLight_5, Delay_nus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
//    7         char temp7[2];
//    8         float num7;
//    9         unsigned int  adc7;
//   10         ADCH &= 0X00;		//ÇåEOC±êÖ¾	
        MOV     A,0xbb
        MOV     0xbb,#0x0
//   11          ADCL &= 0X00;
        MOV     A,0xba
        MOV     0xba,#0x0
//   12         ADCCFG |= 0X20;         //ÅäÖÃÎª¶Ë¿Ú0ÊäÈë
        ORL     0xf2,#0x20
//   13 	ADCCON3=0xb5;		//µ¥´Î×ª»»,²Î¿¼µçÑ¹ÎªµçÔ´µçÑ¹£¬¶ÔP05½øÐÐ²ÉÑù,14Î»·Ö±æÂÊ					
        MOV     0xb6,#-0x4b
//   14 	ADCCON1 = 0X30;		//Í£Ö¹A/D
        MOV     0xb4,#0x30
//   15 	ADCCON1 |= 0X40;	//Æô¶¯A/D  
        ORL     0xb4,#0x40
//   16         
//   17       //  Delay_nus(500); 
//   18         while((!(ADCCON1 & 0x80))&&Delay_nus(200));
??getLight_5_0:
        MOV     A,0xb4
        MOV     C,0xE0 /* A   */.7
        JC      ??getLight_5_1
        ; Setup parameters for call to function Delay_nus
        MOV     R2,#-0x38
        MOV     R3,#0x0
        LCALL   ??Delay_nus?relay
        MOV     A,R1
        JNZ     ??getLight_5_0
//   19         //Delay_nus(50); 
//   20         ADCCFG &=~0X20; 
??getLight_5_1:
        ANL     0xf2,#0xdf
//   21         temp7[1] = ADCL;
        MOV     A,0xba
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine2 & 0xFFFF
//   22         temp7[0] = ADCH;
//   23         ADCCON1 = 0X30;	
//   24         adc7 = (uint8)temp7[1];
//   25         adc7 |= ( (uint8) temp7[0] )<<8;
??CrossCallReturnLabel_2:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine1 & 0xFFFF
//   26         if(adc7&0x8000)adc7 = 0;
??CrossCallReturnLabel_0:
        JZ      ??getLight_5_2
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R0
        CFI EndBlock cfiBlock0
//   27         adc7>>=2;
//   28         num7 = adc7*3.3/8096;
//   29         return num7;           
??getLight_5_2:
        REQUIRE ?Subroutine0
        REQUIRE ADCH
        REQUIRE ADCL
        REQUIRE ADCCFG
        REQUIRE ADCCON3
        REQUIRE ADCCON1
        ; // Fall through to label ?Subroutine0
//   30   }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?US_SHR
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_40533333
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_45fd0000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_DIV
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//   31 //Êª¶È´«¸ÐÆ÷

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   32 float getHR202_6(void)
getHR202_6:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function getHR202_6
        CODE
//   33   {   
        FUNCALL getHR202_6, Delay_nus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
//   34          char temp4[2];
//   35         float num4;
//   36         unsigned int  adc4;
//   37         ADCH &= 0X00;		//ÇåEOC±êÖ¾	
        MOV     A,0xbb
        MOV     0xbb,#0x0
//   38         ADCL &= 0X00;
        MOV     A,0xba
        MOV     0xba,#0x0
//   39         ADCCFG |= 0X40;
        ORL     0xf2,#0x40
//   40 	ADCCON3=0xb6;		//µ¥´Î×ª»»,²Î¿¼µçÑ¹ÎªµçÔ´µçÑ¹£¬¶ÔP06½øÐÐ²ÉÑù,14Î»·Ö±æÂÊ					
        MOV     0xb6,#-0x4a
//   41 	ADCCON1 = 0X30;		//Í£Ö¹A/D
        MOV     0xb4,#0x30
//   42 	ADCCON1 |= 0X40;	//Æô¶¯A/D  
        ORL     0xb4,#0x40
//   43         
//   44       //  Delay_nus(500); 
//   45         while((!(ADCCON1 & 0x80))&&Delay_nus(200));
??getHR202_6_0:
        MOV     A,0xb4
        MOV     C,0xE0 /* A   */.7
        JC      ??getHR202_6_1
        ; Setup parameters for call to function Delay_nus
        MOV     R2,#-0x38
        MOV     R3,#0x0
        LCALL   ??Delay_nus?relay
        MOV     A,R1
        JNZ     ??getHR202_6_0
//   46         //Delay_nus(50); 
//   47         ADCCFG &=~0X40;
??getHR202_6_1:
        ANL     0xf2,#0xbf
//   48         temp4[1] = ADCL;
        MOV     A,0xba
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine2 & 0xFFFF
//   49         temp4[0] = ADCH;
//   50         ADCCON1 = 0X30;	
//   51         adc4 = (uint8)temp4[1];
//   52         adc4 |= ( (uint8) temp4[0] )<<8;
??CrossCallReturnLabel_3:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine1 & 0xFFFF
//   53         if(adc4&0x8000)adc4 = 0;
??CrossCallReturnLabel_1:
        JZ      ??getHR202_6_2
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R0
//   54         adc4>>=2;
//   55         num4 = adc4*3.3/8096;
//   56         return num4;           
??getHR202_6_2:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock2
        REQUIRE ADCH
        REQUIRE ADCL
        REQUIRE ADCCFG
        REQUIRE ADCCON3
        REQUIRE ADCCON1
//   57   }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        MOVX    @DPTR,A
        MOV     A,0xbb
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     0xb4,#0x30
        MOV     A,#0x1
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker8 Using cfiCommon1
        CFI (cfiPicker8) NoFunction
        CFI (cfiPicker8) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        MOV     ?V0 + 0,A
        MOV     A,R1
        MOV     ?V0 + 1,A
        ANL     A,#0x80
        RET
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiPicker8
//   58 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   59 uint8 Delay_nus(uint16 i)
Delay_nus:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function Delay_nus
        CODE
//   60 {
        ; Saved register size: 0
        ; Auto size: 0
        SJMP    ??Delay_nus_0
//   61    while(i--)
//   62    {
//   63       asm("NOP"); 
??Delay_nus_1:
        NOP
//   64       asm("NOP");
        NOP
//   65       asm("NOP");
        NOP
//   66    }
??Delay_nus_0:
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R2
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R3,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??Delay_nus_1
//   67    return 0;
        MOV     R1,#0x0
        LJMP    ?BRET
        CFI EndBlock cfiBlock9
//   68 }

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_40533333:
        DD 40533333H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_45fd0000:
        DD 45FD0000H

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??getLight_5?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    getLight_5

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??getHR202_6?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    getHR202_6

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Delay_nus?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Delay_nus

        END
//   69       
//   70           
//   71      
// 
// 285 bytes in segment BANKED_CODE
//  18 bytes in segment BANK_RELAYS
//   5 bytes in segment SFR_AN
//   8 bytes in segment XDATA_ROM_C
// 
// 303 bytes of CODE  memory
//   0 bytes of CONST memory (+ 8 bytes shared)
//   0 bytes of DATA  memory (+ 5 bytes shared)
//
//Errors: none
//Warnings: none
