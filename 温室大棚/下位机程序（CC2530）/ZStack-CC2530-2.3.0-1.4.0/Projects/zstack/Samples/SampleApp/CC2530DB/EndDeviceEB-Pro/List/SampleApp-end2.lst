###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.40194/W32 for 8051         16/Dec/2018  13:33:32 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\So #
#                          urce\SampleApp-end2.c                              #
#    Command line       =  -f F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg     #
#                          (-DCPU32MHZ -DROOT=__near_func -DBLINK_LEDS) -f    #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg       #
#                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\So #
#                          urce\SampleApp-end2.c -D ZIGBEEPRO -D              #
#                          NWK_AUTO_POLL -D ZTOOL_P1 -D xMT_TASK -D           #
#                          xMT_SYS_FUNC -D xMT_ZDO_FUNC -D                    #
#                          LCD_SUPPORTED=DEBUG -lC F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã– #
#                          Ú£®CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\Lis #
#                          t\ -lA F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStac #
#                          k-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\EndDeviceEB-Pro\List\                #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\EndDeviceEB-Pro\Obj\ -e --debug             #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã– #
#                          Ú£®CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\ -I                 #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\SOURCE\ -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£® #
#                          CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530D #
#                          B\ -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack #
#                          -CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sample #
#                          App\CC2530DB\..\..\..\..\..\COMPONENTS\MT\ -I      #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I   #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530 #
#                          EB\ -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStac #
#                          k-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\C #
#                          CSOC\ -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZSt #
#                          ack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INC #
#                          LUDE\ -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZSt #
#                          ack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF #
#                          \ -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack- #
#                          CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\   #
#                          -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\ -I  #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\ -I    #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\ -I     #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\ -I     #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I      #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\ZMAC\ -I          #
#                          F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\   #
#                          -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA #
#                          \ -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack- #
#                          CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\ #
#                           -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVE #
#                          L\ -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack #
#                          -CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sample #
#                          App\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEV #
#                          EL\srf04\ -I F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£© #
#                          \ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\ #
#                          LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz                  #
#                          --require_prototypes                               #
#    List file          =  F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\EndDeviceEB-Pro\List\SampleApp-end2.lst     #
#    Object file        =  F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\EndDeviceEB-Pro\Obj\SampleApp-end2.r51      #
#                                                                             #
#                                                                             #
###############################################################################

F:\2019\Œ¬ “¥Û≈Ô\œ¬Œªª˙≥Ã–Ú£®CC2530£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp-end2.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xa0
   \   union <unnamed> volatile __sfr _A_P2
   \                     _A_P2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf5
   \   unsigned char volatile __sfr P2SEL
   \                     P2SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "ADC.h"
     75          #include "dht11.h"
     76          
     77          //≥¨…˘≤®“˝Ω≈¡¨Ω”∂®“Â
     78          #define Echo P2_0
     79          #define Trig P2_1
     80          /*********************************************************************
     81           * MACROS
     82           */
     83          
     84          /*********************************************************************
     85           * CONSTANTS
     86           */
     87          
     88          /*********************************************************************
     89           * TYPEDEFS
     90           */
     91          
     92          /*********************************************************************
     93           * GLOBAL VARIABLES
     94           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     95          uint8 LedState = 0;
   \                     LedState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
     96          uint16 set_gz=2000;//…Ë÷√µƒπ‚’’÷µ
   \                     set_gz:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for set_gz>`
   \   000002                REQUIRE __INIT_XDATA_I
     97          
     98          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     99          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0300         DW 3
   \   000006   0400         DW 4
    100          {
    101            SAMPLEAPP_PERIODIC_CLUSTERID,
    102            SAMPLEAPP_FLASH_CLUSTERID,
    103            SAMPLEAPP_COM_CLUSTERID,      
    104            SAMPLEAPP_P2P_CLUSTERID      
    105          };
    106          

   \                                 In  segment XDATA_ROM_C, align 1
    107          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   04           DB 4
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   04           DB 4
   \   00000A   ....         DW SampleApp_ClusterList
    108          {
    109            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    110            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    111            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    112            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    113            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    114            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    115            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    116            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    117            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    118          };
    119          
    120          // This is the Endpoint/Interface description.  It is defined here, but
    121          // filled-in in SampleApp_Init().  Another way to go would be to fill
    122          // in the structure here and make it a "const" (in code space).  The
    123          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    124          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    125          
    126          /*********************************************************************
    127           * EXTERNAL VARIABLES
    128           */
    129          
    130          /*********************************************************************
    131           * EXTERNAL FUNCTIONS
    132           */
    133          
    134          /*********************************************************************
    135           * LOCAL VARIABLES
    136           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    138                                    // This variable will be received when
    139                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    141          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    143          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          afAddrType_t SampleApp_Periodic_DstAddr;  //π„≤•
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          afAddrType_t SampleApp_Flash_DstAddr;//◊È≤•
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    146          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    148          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          uint8 sensor_value[20];//±£¥Ê¥´∏–∆˜÷µ
   \                     sensor_value:
   \   000000                DS 20
   \   000014                REQUIRE __INIT_XDATA_Z
    152          void delay_us(void); //1 us—” ±
    153          void delay_10us(void); //10 us—” ±
    154          void delay_20us(void); //20 us—” ±
    155          
    156          /*********************************************************************
    157           * LOCAL FUNCTIONS
    158           */
    159          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    160          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    161          void SampleApp_SendPeriodicMessage( void );
    162          void SampleApp_SendFlashMessage( uint16 flashTime );
    163          /*********************************************************************
    164           * NETWORK LAYER CALLBACKS
    165           */
    166          
    167          /*********************************************************************
    168           * PUBLIC FUNCTIONS
    169           */
    170          
    171          /*********************************************************************
    172           * @fn      SampleApp_Init
    173           *
    174           * @brief   Initialization function for the Generic App Task.
    175           *          This is called during initialization and should contain
    176           *          any application specific initialization (ie. hardware
    177           *          initialization/setup, table initialization, power up
    178           *          notificaiton ... ).
    179           *
    180           * @param   task_id - the ID assigned by OSAL.  This ID should be
    181           *                    used to send messages and set timers.
    182           *
    183           * @return  none
    184           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    185          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    186          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    187            SampleApp_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#SampleApp_TaskID
   \   000009   F0           MOVX    @DPTR,A
    188            SampleApp_NwkState = DEV_INIT;
   \   00000A   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    189            SampleApp_TransID = 0;
   \   000010   90....       MOV     DPTR,#SampleApp_TransID
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
    190          
    191           
    192            
    193            // Device hardware initialization can be added here or in main() (Zmain.c).
    194            // If the hardware is application specific - add it here.
    195            // If the hardware is other parts of the device add it in main().
    196          
    197           #if defined ( BUILD_ALL_DEVICES )
    198            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    199            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    200            // together - if they are - we will start up a coordinator. Otherwise,
    201            // the device will start as a router.
    202            if ( readCoordinatorJumper() )
    203              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    204            else
    205              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    206          #endif // BUILD_ALL_DEVICES
    207          
    208          #if defined ( HOLD_AUTO_START )
    209            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    210            //  from starting the device and wait for the application to
    211            //  start the device.
    212            ZDOInitDevice(0);
    213          #endif
    214          
    215            // Setup for the periodic message's destination address
    216            // Broadcast to everyone
    217            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000015   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000018   740F         MOV     A,#0xf
   \   00001A   F0           MOVX    @DPTR,A
    218            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00001B   A3           INC     DPTR
   \   00001C   7414         MOV     A,#0x14
   \   00001E   F0           MOVX    @DPTR,A
    219            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   00001F   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000022   74FF         MOV     A,#-0x1
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   F0           MOVX    @DPTR,A
    220          
    221            // Setup for the flash command's destination address - Group 1
    222            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000027   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   00002A   7401         MOV     A,#0x1
   \   00002C   F0           MOVX    @DPTR,A
    223            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00002D   A3           INC     DPTR
   \   00002E   7414         MOV     A,#0x14
   \   000030   F0           MOVX    @DPTR,A
    224            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP; //◊È∫≈1
   \   000031   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000034   7401         MOV     A,#0x1
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   E4           CLR     A
   \   000039   F0           MOVX    @DPTR,A
    225            
    226            // Fill out the endpoint description.
    227            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   00003A   90....       MOV     DPTR,#SampleApp_epDesc
   \   00003D   7414         MOV     A,#0x14
   \   00003F   F0           MOVX    @DPTR,A
    228            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000040   A3           INC     DPTR
   \   000041   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000043   F0           MOVX    @DPTR,A
   \   000044   A3           INC     DPTR
   \   000045   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000047   F0           MOVX    @DPTR,A
    229            SampleApp_epDesc.simpleDesc
    230                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000048   A3           INC     DPTR
   \   000049   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   A3           INC     DPTR
   \   00004D   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   00004F   F0           MOVX    @DPTR,A
    231            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000050   A3           INC     DPTR
   \   000051   E4           CLR     A
   \   000052   F0           MOVX    @DPTR,A
    232          
    233            // Register the endpoint description with the AF
    234            afRegister( &SampleApp_epDesc );
   \   000053                ; Setup parameters for call to function afRegister
   \   000053   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000055   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000057   12....       LCALL   ??afRegister?relay
    235          
    236            // Register for all key events - This app will handle all key events
    237            RegisterForKeys( SampleApp_TaskID );
   \   00005A                ; Setup parameters for call to function RegisterForKeys
   \   00005A   90....       MOV     DPTR,#SampleApp_TaskID
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F9           MOV     R1,A
   \   00005F   12....       LCALL   ??RegisterForKeys?relay
    238          
    239            // By default, all devices start out in Group 1
    240            SampleApp_Group.ID = 0x0001;
   \   000062   90....       MOV     DPTR,#SampleApp_Group
   \   000065   7401         MOV     A,#0x1
   \   000067   F0           MOVX    @DPTR,A
   \   000068   A3           INC     DPTR
   \   000069   E4           CLR     A
   \   00006A   F0           MOVX    @DPTR,A
    241            osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
   \   00006B                ; Setup parameters for call to function osal_memcpy
   \   00006B   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   00006E   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000071   F5..         MOV     ?V0 + 2,A
   \   000073   78..         MOV     R0,#?V0 + 0
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000078   7C07         MOV     R4,#0x7
   \   00007A   7D00         MOV     R5,#0x0
   \   00007C   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   00007E   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   000080   12....       LCALL   ??osal_memcpy?relay
   \   000083   7403         MOV     A,#0x3
   \   000085   12....       LCALL   ?DEALLOC_XSTACK8
    242            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   000088                ; Setup parameters for call to function aps_AddGroup
   \   000088   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   00008A   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   00008C   7914         MOV     R1,#0x14
   \   00008E   12....       LCALL   ??aps_AddGroup?relay
    243          
    244          #if defined ( LCD_SUPPORTED )
    245           // HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 ); 
    246          #endif
    247          }
   \   000091   7F03         MOV     R7,#0x3
   \   000093   02....       LJMP    ?BANKED_LEAVE_XDATA
    248          
    249          /*********************************************************************
    250           * @fn      SampleApp_ProcessEvent
    251           *
    252           * @brief   Generic Application Task event processor.  This function
    253           *          is called to process all events for the task.  Events
    254           *          include timers, messages and any other user defined events.
    255           *
    256           * @param   task_id  - The OSAL assigned task ID.
    257           * @param   events - events to process.  This is a bit map and can
    258           *                   contain more than one event.
    259           *
    260           * @return  none
    261           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    262          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    263          { uint8 i;
                         ^
Warning[Pe177]: variable "i" was declared but never referenced
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    264            afIncomingMSGPacket_t *MSGpkt;
    265            (void)task_id;  // Intentionally unreferenced parameter
    266          
    267            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6070         JZ      ??SampleApp_ProcessEvent_0
    268            {
    269              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   803A         SJMP    ??SampleApp_ProcessEvent_1
    270              while ( MSGpkt )
    271              {
    272                switch ( MSGpkt->hdr.event )
    273                {
    274                  // Received when a key is pressed
    275                  case KEY_CHANGE:
    276                  //  SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    277                    break;
    278          
    279                  // Received when a messages is received (OTA) for this endpoint
    280                  case AF_INCOMING_MSG_CMD:
    281                    SampleApp_MessageMSGCB( MSGpkt );
    282                    break;
    283          
    284                  // Received whenever the device changes state in the network
    285                  case ZDO_STATE_CHANGE:
    286                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    287                    if ((SampleApp_NwkState == DEV_ROUTER)|| (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7024         JNZ     ??SampleApp_ProcessEvent_4
    288                    {
    289                        HalLedSet(HAL_LED_1,HAL_LED_MODE_OFF);
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function HalLedSet
   \   00001E   7A00         MOV     R2,#0x0
   \   000020   7901         MOV     R1,#0x1
   \   000022   12....       LCALL   ??HalLedSet?relay
    290                        HalLedSet(HAL_LED_2,HAL_LED_MODE_OFF);
   \   000025                ; Setup parameters for call to function HalLedSet
   \   000025   7A00         MOV     R2,#0x0
   \   000027   7902         MOV     R1,#0x2
   \   000029   12....       LCALL   ??HalLedSet?relay
    291                        HalLedBlink (HAL_LED_1,4, 50, 500);
   \   00002C                ; Setup parameters for call to function HalLedBlink
   \   00002C   7CF4         MOV     R4,#-0xc
   \   00002E   7D01         MOV     R5,#0x1
   \   000030   7B32         MOV     R3,#0x32
   \   000032   7A04         MOV     R2,#0x4
   \   000034   7901         MOV     R1,#0x1
   \   000036   12....       LCALL   ??HalLedBlink?relay
    292                         P2SEL &= ~0x03;  //P2_0 , P2_1…Ë÷√Œ™Õ®”√io£ª   
   \   000039   53F5FC       ANL     0xf5,#0xfc
    293                         P2DIR &= ~0x01;  //P2_0…Ë÷√Œ™ ‰»Îƒ£ Ω£ª
   \   00003C   53FFFE       ANL     0xff,#0xfe
    294                         P2DIR |=  0x02;  //P2_1…Ë÷√Œ™ ‰≥ˆƒ£ Ω£ª
   \   00003F   43FF02       ORL     0xff,#0x2
    295                      // osal_start_timerEx( SampleApp_TaskID,SAMPLEAPP_SEND_PERIODIC_MSG_EVT,2000 );//÷‹∆⁄≤…ºØ¥´∏–∆˜÷µ  
    296                    }
    297                    else
    298                    {
    299                      // Device is no longer in the network
    300                    }
    301                    break;
    302          
    303                  default:
    304                    break;
    305                }
    306          
    307                // Release the memory
    308                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   000042                ; Setup parameters for call to function osal_msg_deallocate
   \   000042   AA..         MOV     R2,?V0 + 0
   \   000044   AB..         MOV     R3,?V0 + 1
   \   000046   12....       LCALL   ??osal_msg_deallocate?relay
    309          
    310                // Next - if one is available
    311                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000049                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000049   90....       MOV     DPTR,#SampleApp_TaskID
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F9           MOV     R1,A
   \   00004E   12....       LCALL   ??osal_msg_receive?relay
   \   000051   8A..         MOV     ?V0 + 0,R2
   \   000053   8B..         MOV     ?V0 + 1,R3
   \   000055   E5..         MOV     A,?V0 + 0
   \   000057   45..         ORL     A,?V0 + 1
   \   000059   601A         JZ      ??SampleApp_ProcessEvent_5
   \   00005B   85..82       MOV     DPL,?V0 + 0
   \   00005E   85..83       MOV     DPH,?V0 + 1
   \   000061   E0           MOVX    A,@DPTR
   \   000062   24E6         ADD     A,#-0x1a
   \   000064   6006         JZ      ??SampleApp_ProcessEvent_6
   \   000066   2449         ADD     A,#0x49
   \   000068   60A5         JZ      ??SampleApp_ProcessEvent_2
   \   00006A   80D6         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   00006C                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   00006C   AA..         MOV     R2,?V0 + 0
   \   00006E   AB..         MOV     R3,?V0 + 1
   \   000070   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000073   80CD         SJMP    ??SampleApp_ProcessEvent_4
    312              }
    313          
    314              // return unprocessed events
    315              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000075   EE           MOV     A,R6
   \   000076   FA           MOV     R2,A
   \   000077   EF           MOV     A,R7
   \   000078   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_7:
   \   00007A   FB           MOV     R3,A
   \   00007B   8020         SJMP    ??SampleApp_ProcessEvent_8
    316            }
    317          
    318            // Send a message out - This event is generated by a timer
    319            //  (setup in SampleApp_Init()).
    320            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   00007D   EE           MOV     A,R6
   \   00007E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000080   5017         JNC     ??SampleApp_ProcessEvent_9
    321            {
    322              // Setup to send message again in normal period (+ a little jitter)
    323              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    324                 2000);
   \   000082                ; Setup parameters for call to function osal_start_timerEx
   \   000082   7CD0         MOV     R4,#-0x30
   \   000084   7D07         MOV     R5,#0x7
   \   000086   7A01         MOV     R2,#0x1
   \   000088   7B00         MOV     R3,#0x0
   \   00008A   90....       MOV     DPTR,#SampleApp_TaskID
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   F9           MOV     R1,A
   \   00008F   12....       LCALL   ??osal_start_timerEx?relay
    325          
    326              // return unprocessed events
    327              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   000092   EE           MOV     A,R6
   \   000093   6401         XRL     A,#0x1
   \   000095   FA           MOV     R2,A
   \   000096   EF           MOV     A,R7
   \   000097   80E1         SJMP    ??SampleApp_ProcessEvent_7
    328            }
    329          
    330            // Discard unknown events
    331            return 0;
   \                     ??SampleApp_ProcessEvent_9:
   \   000099   7A00         MOV     R2,#0x0
   \   00009B   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_8:
   \   00009D   7F04         MOV     R7,#0x4
   \   00009F   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000A2                REQUIRE P2SEL
   \   0000A2                REQUIRE P2DIR
    332          }
    333          
    334          
    335          /*********************************************************************
    336           * LOCAL FUNCTIONS
    337           */
    338          
    339          /*********************************************************************
    340           * @fn      SampleApp_MessageMSGCB
    341           *
    342           * @brief   Data message processor callback.  This function processes
    343           *          any incoming data - probably from other devices.  So, based
    344           *          on cluster ID, perform the intended action.
    345           *
    346           * @param   none
    347           *
    348           * @return  none
    349           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    350          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    351          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 26
   \   000005   74E6         MOV     A,#-0x1a
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    352            int us_count=0;
   \   00000A   7E00         MOV     R6,#0x0
   \   00000C   7F00         MOV     R7,#0x0
    353            unsigned int distance_data=0;
    354            uint8 coor_to_end[4];//Ω” ’µƒŒﬁœﬂ ˝æ›£®≤…ºØ£©
    355            uint8 coor_to_con[4];//Ω” ’µƒŒﬁœﬂ ˝æ›(øÿ÷∆)
    356            uint8 byte_len;//◊÷Ω⁄≥§∂»
                         ^
Warning[Pe550]: variable "byte_len" was set but never used
    357            uint8 end_sensor[15];
    358            uint8 end_con[3];
    359            uint16 gz_ce1=0;//π‚’’ µ ±÷µ
    360            float temp;
    361            switch ( pkt->clusterId )
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 1,A
   \   00001D   78..         MOV     R0,#?V0 + 0
   \   00001F   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   000022   0100         DW        1
   \   000024   01           DB        1
   \   000025   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000027   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000029   ....         DW        ??SampleApp_MessageMSGCB_2
    362            {    
    363              case SAMPLEAPP_PERIODIC_CLUSTERID: //±Ì æ÷‹∆⁄∫Ø ˝
    364                    osal_memcpy(coor_to_end,pkt->cmd.Data,pkt->cmd.DataLength);   // ∂‘Œﬁœﬂ ˝æ›Ω¯––¥¶¿Ì
   \                     ??SampleApp_MessageMSGCB_1:
   \   00002B                ; Setup parameters for call to function osal_memcpy
   \   00002B   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000031   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000034   740A         MOV     A,#0xa
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   AA82         MOV     R2,DPL
   \   00003B   AB83         MOV     R3,DPH
   \   00003D   12....       LCALL   ??osal_memcpy?relay
   \   000040   7403         MOV     A,#0x3
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
    365                    byte_len=pkt->cmd.DataLength;
    366                    if(coor_to_end[0]==0x02&&coor_to_end[1]==0x03)
   \   000045   7407         MOV     A,#0x7
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   6402         XRL     A,#0x2
   \   00004D   6003         JZ      $+5
   \   00004F   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
   \   000052   7408         MOV     A,#0x8
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   E0           MOVX    A,@DPTR
   \   000058   6403         XRL     A,#0x3
   \   00005A   6003         JZ      $+5
   \   00005C   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
    367                    {
    368                        end_sensor[0]=0x02;//µÿ÷∑
   \   00005F   740B         MOV     A,#0xb
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   7402         MOV     A,#0x2
   \   000066   F0           MOVX    @DPTR,A
    369                        end_sensor[1]=0x03;//π¶ƒ‹¥˙¬Î
   \   000067   740C         MOV     A,#0xc
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   7403         MOV     A,#0x3
   \   00006E   F0           MOVX    @DPTR,A
    370                        temp=get6();//ªÒ»°π‚’’÷µ
   \   00006F                ; Setup parameters for call to function get6
   \   00006F   12....       LCALL   ??get6?relay
   \   000072   8A..         MOV     ?V0 + 0,R2
   \   000074   8B..         MOV     ?V0 + 1,R3
   \   000076   8C..         MOV     ?V0 + 2,R4
   \   000078   8D..         MOV     ?V0 + 3,R5
    371                        end_sensor[2]=(char)(temp)%10;
   \   00007A   8A..         MOV     ?V0 + 4,R2
   \   00007C   8B..         MOV     ?V0 + 5,R3
   \   00007E   8C..         MOV     ?V0 + 6,R4
   \   000080   8D..         MOV     ?V0 + 7,R5
   \   000082   78..         MOV     R0,#?V0 + 4
   \   000084   12....       LCALL   ?FLT_TO_L
   \   000087   E5..         MOV     A,?V0 + 4
   \   000089   75F00A       MOV     B,#0xa
   \   00008C   84           DIV     AB
   \   00008D   ABF0         MOV     R3,B
   \   00008F   740D         MOV     A,#0xd
   \   000091   12....       LCALL   ?XSTACK_DISP0_8
   \   000094   EB           MOV     A,R3
   \   000095   F0           MOVX    @DPTR,A
    372                        end_sensor[3]=(char)(temp*10)%10;
   \   000096   8A..         MOV     ?V0 + 8,R2
   \   000098   85....       MOV     ?V0 + 9,?V0 + 1
   \   00009B   8C..         MOV     ?V0 + 10,R4
   \   00009D   8D..         MOV     ?V0 + 11,R5
   \   00009F   90....       MOV     DPTR,#__Constant_41200000
   \   0000A2   78..         MOV     R0,#?V0 + 4
   \   0000A4   12....       LCALL   ?L_MOV_X
   \   0000A7   78..         MOV     R0,#?V0 + 8
   \   0000A9   79..         MOV     R1,#?V0 + 4
   \   0000AB   12....       LCALL   ?FLT_MUL
   \   0000AE   78..         MOV     R0,#?V0 + 8
   \   0000B0   12....       LCALL   ?FLT_TO_L
   \   0000B3   E5..         MOV     A,?V0 + 8
   \   0000B5   75F00A       MOV     B,#0xa
   \   0000B8   84           DIV     AB
   \   0000B9   AAF0         MOV     R2,B
   \   0000BB   740E         MOV     A,#0xe
   \   0000BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C0   EA           MOV     A,R2
   \   0000C1   F0           MOVX    @DPTR,A
    373                        end_sensor[4]=(char)(temp*100)%10;
   \   0000C2   85....       MOV     ?V0 + 8,?V0 + 0
   \   0000C5   85....       MOV     ?V0 + 9,?V0 + 1
   \   0000C8   8C..         MOV     ?V0 + 10,R4
   \   0000CA   8D..         MOV     ?V0 + 11,R5
   \   0000CC   90....       MOV     DPTR,#__Constant_42c80000
   \   0000CF   78..         MOV     R0,#?V0 + 4
   \   0000D1   12....       LCALL   ?L_MOV_X
   \   0000D4   78..         MOV     R0,#?V0 + 8
   \   0000D6   79..         MOV     R1,#?V0 + 4
   \   0000D8   12....       LCALL   ?FLT_MUL
   \   0000DB   78..         MOV     R0,#?V0 + 8
   \   0000DD   12....       LCALL   ?FLT_TO_L
   \   0000E0   E5..         MOV     A,?V0 + 8
   \   0000E2   75F00A       MOV     B,#0xa
   \   0000E5   84           DIV     AB
   \   0000E6   ACF0         MOV     R4,B
   \   0000E8   740F         MOV     A,#0xf
   \   0000EA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000ED   EC           MOV     A,R4
   \   0000EE   F0           MOVX    @DPTR,A
    374                        end_sensor[5]=(char)(temp*1000)%10;
   \   0000EF   90....       MOV     DPTR,#__Constant_447a0000
   \   0000F2   78..         MOV     R0,#?V0 + 4
   \   0000F4   12....       LCALL   ?L_MOV_X
   \   0000F7   78..         MOV     R0,#?V0 + 0
   \   0000F9   79..         MOV     R1,#?V0 + 4
   \   0000FB   12....       LCALL   ?FLT_MUL
   \   0000FE   78..         MOV     R0,#?V0 + 0
   \   000100   12....       LCALL   ?FLT_TO_L
   \   000103   E5..         MOV     A,?V0 + 0
   \   000105   75F00A       MOV     B,#0xa
   \   000108   84           DIV     AB
   \   000109   E5F0         MOV     A,B
   \   00010B   F5..         MOV     ?V0 + 0,A
   \   00010D   7410         MOV     A,#0x10
   \   00010F   12....       LCALL   ?XSTACK_DISP0_8
   \   000112   E5..         MOV     A,?V0 + 0
   \   000114   F0           MOVX    @DPTR,A
    375                        gz_ce1=end_sensor[2]*1000+ end_sensor[3]*100+ end_sensor[4]*10+ end_sensor[5];//π‚’’÷µ
   \   000115   EB           MOV     A,R3
   \   000116   F8           MOV     R0,A
   \   000117   75F0E8       MOV     B,#-0x18
   \   00011A   A4           MUL     AB
   \   00011B   C8           XCH     A,R0
   \   00011C   ABF0         MOV     R3,B
   \   00011E   75F003       MOV     B,#0x3
   \   000121   A4           MUL     AB
   \   000122   2B           ADD     A,R3
   \   000123   F9           MOV     R1,A
   \   000124   EA           MOV     A,R2
   \   000125   75F064       MOV     B,#0x64
   \   000128   A4           MUL     AB
   \   000129   FA           MOV     R2,A
   \   00012A   ABF0         MOV     R3,B
   \   00012C   E8           MOV     A,R0
   \   00012D   2A           ADD     A,R2
   \   00012E   F8           MOV     R0,A
   \   00012F   E9           MOV     A,R1
   \   000130   3B           ADDC    A,R3
   \   000131   F9           MOV     R1,A
   \   000132   EC           MOV     A,R4
   \   000133   75F00A       MOV     B,#0xa
   \   000136   A4           MUL     AB
   \   000137   FA           MOV     R2,A
   \   000138   ABF0         MOV     R3,B
   \   00013A   E8           MOV     A,R0
   \   00013B   2A           ADD     A,R2
   \   00013C   F8           MOV     R0,A
   \   00013D   E9           MOV     A,R1
   \   00013E   3B           ADDC    A,R3
   \   00013F   F9           MOV     R1,A
   \   000140   E8           MOV     A,R0
   \   000141   25..         ADD     A,?V0 + 0
   \   000143   F5..         MOV     ?V0 + 0,A
   \   000145   E9           MOV     A,R1
   \   000146   3400         ADDC    A,#0x0
   \   000148   F5..         MOV     ?V0 + 1,A
    376                         //¥•∑¢“˝Ω≈Trig≤˙…˙“ª∏ˆ20usµƒ∏ﬂµÁ∆Ω
    377                        Trig=1;
   \   00014A   D2A1         SETB    0xa0.1
    378                        delay_20us();
   \   00014C                ; Setup parameters for call to function delay_20us
   \   00014C   12....       LCALL   ??delay_20us?relay
    379                        Trig=0;         
   \   00014F   C2A1         CLR     0xa0.1
    380                    
    381                        //µ»¥˝Echoªÿ≤®“˝Ω≈±‰∏ﬂµÁ∆Ω
    382                        while(Echo==0); 
   \                     ??SampleApp_MessageMSGCB_3:
   \   000151   A2A0         MOV     C,0xa0.0
   \   000153   50FC         JNC     ??SampleApp_MessageMSGCB_3
    383                    
    384                        while(Echo==1)//ªÿ≤®“ª÷± «∏ﬂµÁ∆Ω
   \                     ??SampleApp_MessageMSGCB_4:
   \   000155   A2A0         MOV     C,0xa0.0
   \   000157   5011         JNC     ??SampleApp_MessageMSGCB_5
    385                        {
    386                        //10us—” ±
    387                            delay_10us();
   \   000159                ; Setup parameters for call to function Onboard_wait
   \   000159   7A0A         MOV     R2,#0xa
   \   00015B   7B00         MOV     R3,#0x0
   \   00015D   12....       LCALL   ??Onboard_wait?relay
    388                            us_count++;
   \   000160   EE           MOV     A,R6
   \   000161   2401         ADD     A,#0x1
   \   000163   0E           INC     R6
   \   000164   EF           MOV     A,R7
   \   000165   3400         ADDC    A,#0x0
   \   000167   FF           MOV     R7,A
   \   000168   80EB         SJMP    ??SampleApp_MessageMSGCB_4
    389                        }
    390                    
    391                        //≤‚ ‘ ±∆¡±Œ
    392                        distance_data=us_count*10;//º∆À„ ±º‰
    393                        distance_data/=58;//º∆À„æ‡¿Î,µ•Œªcm
   \                     ??SampleApp_MessageMSGCB_5:
   \   00016A   EE           MOV     A,R6
   \   00016B   75F00A       MOV     B,#0xa
   \   00016E   A4           MUL     AB
   \   00016F   FE           MOV     R6,A
   \   000170   A8F0         MOV     R0,B
   \   000172   75F00A       MOV     B,#0xa
   \   000175   EF           MOV     A,R7
   \   000176   A4           MUL     AB
   \   000177   28           ADD     A,R0
   \   000178   FF           MOV     R7,A
   \   000179   EE           MOV     A,R6
   \   00017A   F8           MOV     R0,A
   \   00017B   EF           MOV     A,R7
   \   00017C   F9           MOV     R1,A
   \   00017D   7A3A         MOV     R2,#0x3a
   \   00017F   7B00         MOV     R3,#0x0
   \   000181   12....       LCALL   ?US_DIV_MOD
    394                            
    395                        if(distance_data>=1000)
   \   000184   E8           MOV     A,R0
   \   000185   94E8         SUBB    A,#-0x18
   \   000187   E9           MOV     A,R1
   \   000188   9403         SUBB    A,#0x3
   \   00018A   4009         JC      ??SampleApp_MessageMSGCB_6
    396                        {
    397                           end_sensor[6]='0';//≥¨ ±£¨≤ª¥¶¿Ì
   \                     ??SampleApp_MessageMSGCB_7:
   \   00018C   7411         MOV     A,#0x11
   \   00018E   12....       LCALL   ?XSTACK_DISP0_8
   \   000191   7430         MOV     A,#0x30
   \   000193   8010         SJMP    ??SampleApp_MessageMSGCB_8
    398                        }
    399                        else
    400                        {
    401                           if(distance_data>=10)
   \                     ??SampleApp_MessageMSGCB_6:
   \   000195   C3           CLR     C
   \   000196   E8           MOV     A,R0
   \   000197   940A         SUBB    A,#0xa
   \   000199   E9           MOV     A,R1
   \   00019A   9400         SUBB    A,#0x0
   \   00019C   50EE         JNC     ??SampleApp_MessageMSGCB_7
    402                           {
    403                             end_sensor[6]='0';//’˝≥£
    404                           }
    405                           else
    406                           {
    407                              end_sensor[6]='1';//“Ï≥££¨”–»ÀøøΩ¸
   \   00019E   7411         MOV     A,#0x11
   \   0001A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A3   7431         MOV     A,#0x31
   \                     ??SampleApp_MessageMSGCB_8:
   \   0001A5   F0           MOVX    @DPTR,A
    408                           }
    409                        }
    410                       
    411                        end_sensor[7]=0x68;
   \   0001A6   7412         MOV     A,#0x12
   \   0001A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AB   7468         MOV     A,#0x68
   \   0001AD   F0           MOVX    @DPTR,A
    412                         if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    413                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    414                                 8,
    415                                 end_sensor,
    416                                 &SampleApp_TransID,
    417                                 AF_DISCV_ROUTE,
    418                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   0001AE                ; Setup parameters for call to function AF_DataRequest
   \   0001AE   75..1E       MOV     ?V0 + 2,#0x1e
   \   0001B1   78..         MOV     R0,#?V0 + 2
   \   0001B3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001B6   75....       MOV     ?V0 + 2,#SampleApp_TransID & 0xff
   \   0001B9   75....       MOV     ?V0 + 3,#(SampleApp_TransID >> 8) & 0xff
   \   0001BC   78..         MOV     R0,#?V0 + 2
   \   0001BE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C1   740E         MOV     A,#0xe
   \   0001C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C6   8582..       MOV     ?V0 + 2,DPL
   \   0001C9   8583..       MOV     ?V0 + 3,DPH
   \   0001CC   78..         MOV     R0,#?V0 + 2
   \   0001CE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D1   75..08       MOV     ?V0 + 2,#0x8
   \   0001D4   75..00       MOV     ?V0 + 3,#0x0
   \   0001D7   78..         MOV     R0,#?V0 + 2
   \   0001D9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001DC   75..01       MOV     ?V0 + 2,#0x1
   \   0001DF   78..         MOV     R0,#?V0 + 2
   \   0001E1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E4   7920         MOV     R1,#0x20
   \   0001E6   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   0001E8   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   0001EA   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   0001EC   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   0001EE   12....       LCALL   ??AF_DataRequest?relay
   \   0001F1   7409         MOV     A,#0x9
   \   0001F3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001F6   E9           MOV     A,R1
   \   0001F7   6003         JZ      $+5
   \   0001F9   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
    419                          {
    420                           
    421                            if(gz_ce1<set_gz)//π‚’’≤ª◊„£¨
   \   0001FC   90....       MOV     DPTR,#set_gz
   \   0001FF   E0           MOVX    A,@DPTR
   \   000200   F8           MOV     R0,A
   \   000201   A3           INC     DPTR
   \   000202   E0           MOVX    A,@DPTR
   \   000203   F9           MOV     R1,A
   \   000204   C3           CLR     C
   \   000205   E5..         MOV     A,?V0 + 0
   \   000207   98           SUBB    A,R0
   \   000208   E5..         MOV     A,?V0 + 1
   \   00020A   99           SUBB    A,R1
   \   00020B   5011         JNC     ??SampleApp_MessageMSGCB_9
    422                            {
    423                               HalLedSet(HAL_LED_1,HAL_LED_MODE_ON);
   \   00020D                ; Setup parameters for call to function HalLedSet
   \   00020D   7A01         MOV     R2,#0x1
   \   00020F   7901         MOV     R1,#0x1
   \   000211   12....       LCALL   ??HalLedSet?relay
    424                               HalLedSet(HAL_LED_2,HAL_LED_MODE_ON);
   \   000214                ; Setup parameters for call to function HalLedSet
   \   000214   7A01         MOV     R2,#0x1
   \                     ??SampleApp_MessageMSGCB_10:
   \   000216   7902         MOV     R1,#0x2
   \   000218   12....       LCALL   ??HalLedSet?relay
   \   00021B   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
    425                            }
    426                            else
    427                            {
    428                               HalLedSet(HAL_LED_1,HAL_LED_MODE_OFF);
   \                     ??SampleApp_MessageMSGCB_9:
   \   00021E                ; Setup parameters for call to function HalLedSet
   \   00021E   7A00         MOV     R2,#0x0
   \   000220   7901         MOV     R1,#0x1
   \   000222   12....       LCALL   ??HalLedSet?relay
    429                               HalLedSet(HAL_LED_2,HAL_LED_MODE_OFF);
   \   000225                ; Setup parameters for call to function HalLedSet
   \   000225   7A00         MOV     R2,#0x0
   \   000227   80ED         SJMP    ??SampleApp_MessageMSGCB_10
    430                            }
    431                          }
    432                          else
    433                          {
    434                            // Error occurred in request to send.
    435                          }            
    436                    }
    437                   break;
    438                  case  SAMPLEAPP_FLASH_CLUSTERID: //±Ì æ≤Œ ˝œ¬∑¢
    439                     osal_memcpy(coor_to_con,pkt->cmd.Data,pkt->cmd.DataLength);   // ∂‘Œﬁœﬂ ˝æ›Ω¯––¥¶¿Ì
   \                     ??SampleApp_MessageMSGCB_2:
   \   000229                ; Setup parameters for call to function osal_memcpy
   \   000229   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00022C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00022F   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000232   7406         MOV     A,#0x6
   \   000234   12....       LCALL   ?XSTACK_DISP0_8
   \   000237   AA82         MOV     R2,DPL
   \   000239   AB83         MOV     R3,DPH
   \   00023B   12....       LCALL   ??osal_memcpy?relay
   \   00023E   7403         MOV     A,#0x3
   \   000240   12....       LCALL   ?DEALLOC_XSTACK8
    440                      if(coor_to_con[0]==0x02)
   \   000243   7403         MOV     A,#0x3
   \   000245   12....       LCALL   ?XSTACK_DISP0_8
   \   000248   E0           MOVX    A,@DPTR
   \   000249   6402         XRL     A,#0x2
   \   00024B   707D         JNZ     ??SampleApp_MessageMSGCB_0
    441                     {
    442                       if(coor_to_con[1]==0x04)
   \   00024D   7404         MOV     A,#0x4
   \   00024F   12....       LCALL   ?XSTACK_DISP0_8
   \   000252   E0           MOVX    A,@DPTR
   \   000253   6404         XRL     A,#0x4
   \   000255   7073         JNZ     ??SampleApp_MessageMSGCB_0
    443                       {
    444                         set_gz=coor_to_con[2]*256+coor_to_con[3];
   \   000257   7405         MOV     A,#0x5
   \   000259   12....       LCALL   ?XSTACK_DISP0_8
   \   00025C   E0           MOVX    A,@DPTR
   \   00025D   F9           MOV     R1,A
   \   00025E   7406         MOV     A,#0x6
   \   000260   12....       LCALL   ?XSTACK_DISP0_8
   \   000263   E0           MOVX    A,@DPTR
   \   000264   90....       MOV     DPTR,#set_gz
   \   000267   F0           MOVX    @DPTR,A
   \   000268   A3           INC     DPTR
   \   000269   E9           MOV     A,R1
   \   00026A   F0           MOVX    @DPTR,A
    445                         end_con[0]=0x02;
   \   00026B   85..82       MOV     DPL,?XSP + 0
   \   00026E   85..83       MOV     DPH,?XSP + 1
   \   000271   7402         MOV     A,#0x2
   \   000273   F0           MOVX    @DPTR,A
    446                         end_con[1]=0x04;
   \   000274   14           DEC     A
   \   000275   12....       LCALL   ?XSTACK_DISP0_8
   \   000278   7404         MOV     A,#0x4
   \   00027A   F0           MOVX    @DPTR,A
    447                         end_con[2]=0x68;
   \   00027B   7402         MOV     A,#0x2
   \   00027D   12....       LCALL   ?XSTACK_DISP0_8
   \   000280   7468         MOV     A,#0x68
   \   000282   F0           MOVX    @DPTR,A
    448                         AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    449                                 SAMPLEAPP_FLASH_CLUSTERID,3,end_con,
    450                                 &SampleApp_TransID,
    451                                 AF_DISCV_ROUTE,
    452                                 AF_DEFAULT_RADIUS);
   \   000283                ; Setup parameters for call to function AF_DataRequest
   \   000283   75..1E       MOV     ?V0 + 0,#0x1e
   \   000286   78..         MOV     R0,#?V0 + 0
   \   000288   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00028B   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00028E   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000291   78..         MOV     R0,#?V0 + 0
   \   000293   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000296   7403         MOV     A,#0x3
   \   000298   12....       LCALL   ?XSTACK_DISP0_8
   \   00029B   8582..       MOV     ?V0 + 0,DPL
   \   00029E   8583..       MOV     ?V0 + 1,DPH
   \   0002A1   78..         MOV     R0,#?V0 + 0
   \   0002A3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002A6   75..03       MOV     ?V0 + 0,#0x3
   \   0002A9   8E..         MOV     ?V0 + 1,R6
   \   0002AB   78..         MOV     R0,#?V0 + 0
   \   0002AD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002B0   75..02       MOV     ?V0 + 0,#0x2
   \   0002B3   78..         MOV     R0,#?V0 + 0
   \   0002B5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002B8   7920         MOV     R1,#0x20
   \   0002BA   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   0002BC   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   0002BE   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   0002C0   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   0002C2   12....       LCALL   ??AF_DataRequest?relay
   \   0002C5   7409         MOV     A,#0x9
   \   0002C7   12....       LCALL   ?DEALLOC_XSTACK8
    453                       }
    454                      
    455                       
    456                     }
    457                    
    458              
    459                break;
    460          
    461            }
    462          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   0002CA   741A         MOV     A,#0x1a
   \   0002CC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002CF   7F0C         MOV     R7,#0xc
   \   0002D1   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0002D4                REQUIRE _A_P2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EA           MOV     A,R2
   \   000001   241F         ADD     A,#0x1f
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FC           MOV     R4,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FD           MOV     R5,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   EA           MOV     A,R2
   \   000001   2421         ADD     A,#0x21
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F5..         MOV     ?V0 + 0,A
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F5..         MOV     ?V0 + 1,A
   \   000011   8E..         MOV     ?V0 + 2,R6
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   22           RET
    463          
    464          /*********************************************************************
    465           * @fn      SampleApp_SendPeriodicMessage
    466           *
    467           * @brief   Send the periodic message.
    468           *
    469           * @param   none
    470           *
    471           * @return  none
    472           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    473          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    474          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    475            
    476            
    477            
    478          }
   \   000000   02....       LJMP    ?BRET
    479          
    480          /*********************************************************************
    481           * @fn      SampleApp_SendFlashMessage
    482           *
    483           * @brief   Send the flash message to group 1.
    484           *
    485           * @param   flashTime - in milliseconds
    486           *
    487           * @return  none
    488           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    489          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    490          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    491           
    492          }
   \   000000   02....       LJMP    ?BRET
    493          
    494          //—” ±∫Ø ˝

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    495          void delay_us(void) //1 us—” ±
   \                     delay_us:
    496          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    497              MicroWait(1);   
   \   000004                ; Setup parameters for call to function Onboard_wait
   \   000004   7A01         MOV     R2,#0x1
   \   000006   80..         SJMP    ??Subroutine3_0
    498          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine3_0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   12....       LCALL   ??Onboard_wait?relay
   \   000005   D083         POP     DPH
   \   000007   D082         POP     DPL
   \   000009   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    499          void delay_10us(void) //10 us—” ±
   \                     delay_10us:
    500          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    501             MicroWait(10);
   \   000004                ; Setup parameters for call to function Onboard_wait
   \   000004                REQUIRE ?Subroutine0
   \   000004                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7A0A         MOV     R2,#0xa
   \   000002                REQUIRE ??Subroutine3_0
   \   000002                ; // Fall through to label ??Subroutine3_0
    502          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    503          void delay_20us(void) //20 us—” ±
   \                     delay_20us:
    504          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    505             MicroWait(10);
   \   000004                ; Setup parameters for call to function Onboard_wait
   \   000004   7A0A         MOV     R2,#0xa
   \   000006   7B00         MOV     R3,#0x0
   \   000008   12....       LCALL   ??Onboard_wait?relay
    506             MicroWait(10);
   \   00000B                ; Setup parameters for call to function Onboard_wait
   \   00000B   80..         SJMP    ?Subroutine0
    507          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for set_gz>`:
   \   000000   D007         DW 2000

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??delay_us?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    delay_us

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??delay_10us?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    delay_10us

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??delay_20us?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    delay_20us

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_41200000:
   \   000000   00002041     DD 41200000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_42c80000:
   \   000000   0000C842     DD 42C80000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_447a0000:
   \   000000   00007A44     DD 447A0000H
    508          

   Maximum stack usage in bytes:

     Function                      ISTACK PSTACK XSTACK
     --------                      ------ ------ ------
     SampleApp_Init                    0      0     14
       -> afRegister                   0      0     22
       -> RegisterForKeys              0      0     22
       -> osal_memcpy                  0      0     28
       -> aps_AddGroup                 0      0     22
     SampleApp_MessageMSGCB            1      0     67
       -> osal_memcpy                  0      0     98
       -> get6                         0      0     92
       -> delay_20us                   0      0     92
       -> Onboard_wait                 0      0     92
       -> AF_DataRequest               0      0    110
       -> HalLedSet                    0      0     92
       -> HalLedSet                    0      0     92
       -> HalLedSet                    0      0     92
       -> HalLedSet                    0      0     92
       -> osal_memcpy                  0      0     98
       -> AF_DataRequest               0      0    110
     SampleApp_ProcessEvent            0      0     12
       -> osal_msg_receive             0      0     24
       -> HalLedSet                    0      0     24
       -> HalLedSet                    0      0     24
       -> HalLedBlink                  0      0     24
       -> osal_msg_deallocate          0      0     24
       -> osal_msg_receive             0      0     24
       -> SampleApp_MessageMSGCB       0      0     24
       -> osal_start_timerEx           0      0     24
     SampleApp_SendFlashMessage        0      0      0
     SampleApp_SendPeriodicMessage     0      0      0
     delay_10us                        2      0      0
       -> Onboard_wait                 4      0      0
     delay_20us                        2      0     46
       -> Onboard_wait                 4      0      0
       -> Onboard_wait                 4      0      0
     delay_us                          2      0      0
       -> Onboard_wait                 4      0      0


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     _A_P2                                    1
     P2SEL                                    1
     P2DIR                                    1
     LedState                                 1
     set_gz                                   2
     SampleApp_ClusterList                    8
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     sensor_value                            20
     SampleApp_Init                         150
     SampleApp_ProcessEvent                 162
     SampleApp_MessageMSGCB                 724
     ?Subroutine2                            16
     ?Subroutine1                            22
     SampleApp_SendPeriodicMessage            3
     SampleApp_SendFlashMessage               3
     delay_us                                 8
     ??Subroutine3_0                         12
     delay_10us                               4
     ?Subroutine0                             2
     delay_20us                              13
     ?<Initializer for set_gz>                2
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ??delay_us?relay                         6
     ??delay_10us?relay                       6
     ??delay_20us?relay                       6
     ?<Constant "Group 1">                    8
     __Constant_41200000                      4
     __Constant_42c80000                      4
     __Constant_447a0000                      4

 
 1 119 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
     3 bytes in segment SFR_AN
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
    40 bytes in segment XDATA_ROM_C
    74 bytes in segment XDATA_Z
 
 1 169 bytes of CODE  memory
    28 bytes of CONST memory (+ 12 bytes shared)
     0 bytes of DATA  memory (+  3 bytes shared)
    76 bytes of XDATA memory

Errors: none
Warnings: 2
