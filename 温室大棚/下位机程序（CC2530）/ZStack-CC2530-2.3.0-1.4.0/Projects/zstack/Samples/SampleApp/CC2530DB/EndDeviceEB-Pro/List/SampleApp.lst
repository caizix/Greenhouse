###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.40194/W32 for 8051         05/Oct/2018  13:58:25 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZStac #
#                          k-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\Source\SampleApp.c                            #
#    Command line       =  -f F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZS #
#                          tack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev. #
#                          cfg (-DCPU32MHZ -DROOT=__near_func -DBLINK_LEDS)   #
#                          -f F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZS #
#                          tack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig #
#                          .cfg (-DSECURE=0 -DZG_SECURE_DYNAMIC=0             #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZStac #
#                          k-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\Source\SampleApp.c -D ZIGBEEPRO -D            #
#                          NWK_AUTO_POLL -D ZTOOL_P1 -D xMT_TASK -D           #
#                          xMT_SYS_FUNC -D xMT_ZDO_FUNC -D                    #
#                          LCD_SUPPORTED=DEBUG -lC F:\2019\Íõ¼üÄþ-20181005\ÏÂ #
#                          Î»»ú³ÌÐò£¨zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB- #
#                          Pro\List\ -lA F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨ #
#                          zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\List\  #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZStac #
#                          k-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\EndDeviceEB-Pro\Obj\ -e --debug      #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I F:\2019\Íõ¼üÄþ-20181005\ÏÂ #
#                          Î»»ú³ÌÐò£¨zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\ -I          #
#                          F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZStac #
#                          k-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\SOURCE\ -I                        #
#                          F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZStac #
#                          k-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I          #
#                          F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZStac #
#                          k-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\ -I     #
#                          F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZStac #
#                          k-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUD #
#                          E\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£© #
#                          \ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\ #
#                          TARGET\CC2530EB\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú #
#                          ³ÌÐò£¨zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\OSAL\MCU\CCSOC\ -I                       #
#                          F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZStac #
#                          k-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLU #
#                          DE\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£ #
#                          ©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STA #
#                          CK\AF\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigb #
#                          ee£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          STACK\NWK\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨ #
#                          zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\STACK\SEC\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³Ì #
#                          Ðò£¨zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\STACK\SAPI\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ #
#                          »»ú³ÌÐò£¨zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\COMPONENTS\STACK\SYS\ -I                         #
#                          F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZStac #
#                          k-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\ #
#                           -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\Z #
#                          Stack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F #
#                          8W\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£ #
#                          ©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMA #
#                          C\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£© #
#                          \ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERV #
#                          ICES\SADDR\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£ #
#                          ¨zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\SERVICES\SDATA\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂ #
#                          Î»»ú³ÌÐò£¨zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ #
#                          ..\COMPONENTS\MAC\INCLUDE\ -I                      #
#                          F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZStac #
#                          k-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_L #
#                          EVEL\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbe #
#                          e£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\M #
#                          AC\LOW_LEVEL\srf04\ -I F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ #
#                          »»ú³ÌÐò£¨zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\      #
#                          -Ohz --require_prototypes                          #
#    List file          =  F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZStac #
#                          k-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\EndDeviceEB-Pro\List\SampleApp.lst   #
#    Object file        =  F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZStac #
#                          k-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\EndDeviceEB-Pro\Obj\SampleApp.r51    #
#                                                                             #
#                                                                             #
###############################################################################

F:\2019\Íõ¼üÄþ-20181005\ÏÂÎ»»ú³ÌÐò£¨zigbee£©\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf6
   \   unsigned char volatile __sfr P1INP
   \                     P1INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "ADC.h"
     75          #include "DS18B20.h"
     76          /*********************************************************************
     77           * MACROS
     78           */
     79          #define DATA_PIN_1 P0_4            //¶¨ÒåP0.4¿ÚÎª¼ÌµçÆ÷µÄ¿ØÖÆ¶Ë
     80          
     81          /*********************************************************************
     82           * CONSTANTS
     83           */
     84          
     85          /*********************************************************************
     86           * TYPEDEFS
     87           */
     88          
     89          /*********************************************************************
     90           * GLOBAL VARIABLES
     91           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     92          uint8 LedState = 0;
   \                     LedState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     93          
     94          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     95          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0300         DW 3
   \   000006   0400         DW 4
     96          {
     97            SAMPLEAPP_PERIODIC_CLUSTERID,
     98            SAMPLEAPP_FLASH_CLUSTERID,
     99            SAMPLEAPP_COM_CLUSTERID,      
    100            SAMPLEAPP_P2P_CLUSTERID      
    101          };
    102          

   \                                 In  segment XDATA_ROM_C, align 1
    103          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   04           DB 4
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   04           DB 4
   \   00000A   ....         DW SampleApp_ClusterList
    104          {
    105            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    106            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    107            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    108            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    109            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    110            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    111            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    112            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    113            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    114          };
    115          
    116          // This is the Endpoint/Interface description.  It is defined here, but
    117          // filled-in in SampleApp_Init().  Another way to go would be to fill
    118          // in the structure here and make it a "const" (in code space).  The
    119          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    120          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    121          
    122          /*********************************************************************
    123           * EXTERNAL VARIABLES
    124           */
    125          
    126          /*********************************************************************
    127           * EXTERNAL FUNCTIONS
    128           */
    129          
    130          /*********************************************************************
    131           * LOCAL VARIABLES
    132           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    134                                    // This variable will be received when
    135                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    137          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    139          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          afAddrType_t SampleApp_Periodic_DstAddr;  //¹ã²¥
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          afAddrType_t SampleApp_Flash_DstAddr;//×é²¥
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    142          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    144          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          uint8 flag_coord=0,flag_end_1=0;//Éè±¸±êÖ¾
   \                     flag_coord:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     flag_end_1:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    148          extern uint8 sensor_data_value[2];

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          uint8 sensor_value[20];//±£´æ´«¸ÐÆ÷Öµ
   \                     sensor_value:
   \   000000                DS 20
   \   000014                REQUIRE __INIT_XDATA_Z
    150          
    151          /*********************************************************************
    152           * LOCAL FUNCTIONS
    153           */
    154          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    155          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    156          void SampleApp_SendPeriodicMessage( void );
    157          void SampleApp_SendFlashMessage( uint16 flashTime );
    158          
    159          void LCD_Init(void) ;
    160          void delay(void);
    161          uint8 delay_nus(uint16 i);
    162          void read_data(uint8 * pSensorValue);
    163          void DataChange(uint8 * pSensorValue,uint8 * pChBuf);
    164          static void rxCB(uint8 port,uint8 event);
    165          /*********************************************************************
    166           * NETWORK LAYER CALLBACKS
    167           */
    168          
    169          /*********************************************************************
    170           * PUBLIC FUNCTIONS
    171           */
    172          
    173          /*********************************************************************
    174           * @fn      SampleApp_Init
    175           *
    176           * @brief   Initialization function for the Generic App Task.
    177           *          This is called during initialization and should contain
    178           *          any application specific initialization (ie. hardware
    179           *          initialization/setup, table initialization, power up
    180           *          notificaiton ... ).
    181           *
    182           * @param   task_id - the ID assigned by OSAL.  This ID should be
    183           *                    used to send messages and set timers.
    184           *
    185           * @return  none
    186           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    187          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    188          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV     A,#-0x1d
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
    189            SampleApp_TaskID = task_id;
   \   00000B   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000E   F0           MOVX    @DPTR,A
    190            SampleApp_NwkState = DEV_INIT;
   \   00000F   90....       MOV     DPTR,#SampleApp_NwkState
   \   000012   7401         MOV     A,#0x1
   \   000014   F0           MOVX    @DPTR,A
    191            SampleApp_TransID = 0;
   \   000015   90....       MOV     DPTR,#SampleApp_TransID
   \   000018   E4           CLR     A
   \   000019   F0           MOVX    @DPTR,A
    192          
    193           P0SEL &= ~0x10;                 //ÉèÖÃP0.4ÎªÆÕÍ¨IO¿Ú
   \   00001A   53F3EF       ANL     0xf3,#0xef
    194           P0DIR &= ~0x10;                 //P0.4¶¨ÒåÎªÊäÈë¿Ú
   \   00001D   53FDEF       ANL     0xfd,#0xef
    195             //ÏÂÃæÁù¾äÊÇÎÒ¼ÓµÄ£¬³õÊ¼»¯´®¿ÚµÄ
    196            halUARTCfg_t uartConfig;//¶¥Ò»¸ö´®¿Ú½á¹¹Ìå
    197            uartConfig.configured             =TRUE;//´®¿ÚÅäÖÃÎªÕæ
   \   000020   85..82       MOV     DPL,?XSP + 0
   \   000023   85..83       MOV     DPH,?XSP + 1
   \   000026   04           INC     A
   \   000027   F0           MOVX    @DPTR,A
    198            uartConfig.baudRate               =HAL_UART_BR_9600;//²¨ÌØÂÊÎª9600
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   E4           CLR     A
   \   00002C   F0           MOVX    @DPTR,A
    199            uartConfig.flowControl            =FALSE;//Á÷¿ØÖÆÎª¼Ù
   \   00002D   7402         MOV     A,#0x2
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
    200            uartConfig.callBackFunc       =    rxCB;
   \   000034   741B         MOV     A,#0x1b
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   74..         MOV     A,#??rxCB?relay & 0xff
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   A3           INC     DPTR
   \   00003D   74..         MOV     A,#(??rxCB?relay >> 8) & 0xff
   \   00003F   F0           MOVX    @DPTR,A
    201            HalUARTOpen(HAL_UART_PORT_0,&uartConfig);// ´ò¿ª´®¿Ú0
   \   000040                ; Setup parameters for call to function HalUARTOpen
   \   000040   85..82       MOV     DPL,?XSP + 0
   \   000043   85..83       MOV     DPH,?XSP + 1
   \   000046   AA82         MOV     R2,DPL
   \   000048   AB83         MOV     R3,DPH
   \   00004A   7900         MOV     R1,#0x0
   \   00004C   12....       LCALL   ??HalUARTOpen?relay
    202            
    203            // Device hardware initialization can be added here or in main() (Zmain.c).
    204            // If the hardware is application specific - add it here.
    205            // If the hardware is other parts of the device add it in main().
    206          
    207           #if defined ( BUILD_ALL_DEVICES )
    208            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    209            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    210            // together - if they are - we will start up a coordinator. Otherwise,
    211            // the device will start as a router.
    212            if ( readCoordinatorJumper() )
    213              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    214            else
    215              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    216          #endif // BUILD_ALL_DEVICES
    217          
    218          #if defined ( HOLD_AUTO_START )
    219            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    220            //  from starting the device and wait for the application to
    221            //  start the device.
    222            ZDOInitDevice(0);
    223          #endif
    224          
    225            // Setup for the periodic message's destination address
    226            // Broadcast to everyone
    227            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00004F   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000052   740F         MOV     A,#0xf
   \   000054   F0           MOVX    @DPTR,A
    228            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000055   A3           INC     DPTR
   \   000056   7414         MOV     A,#0x14
   \   000058   F0           MOVX    @DPTR,A
    229            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000059   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00005C   74FF         MOV     A,#-0x1
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   \   000060   F0           MOVX    @DPTR,A
    230          
    231            // Setup for the flash command's destination address - Group 1
    232            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000061   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000064   7401         MOV     A,#0x1
   \   000066   F0           MOVX    @DPTR,A
    233            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000067   A3           INC     DPTR
   \   000068   7414         MOV     A,#0x14
   \   00006A   F0           MOVX    @DPTR,A
    234            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP; //×éºÅ1
   \   00006B   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   00006E   7401         MOV     A,#0x1
   \   000070   F0           MOVX    @DPTR,A
   \   000071   A3           INC     DPTR
   \   000072   E4           CLR     A
   \   000073   F0           MOVX    @DPTR,A
    235            
    236            // Fill out the endpoint description.
    237            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000074   90....       MOV     DPTR,#SampleApp_epDesc
   \   000077   7414         MOV     A,#0x14
   \   000079   F0           MOVX    @DPTR,A
    238            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   00007A   A3           INC     DPTR
   \   00007B   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   A3           INC     DPTR
   \   00007F   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000081   F0           MOVX    @DPTR,A
    239            SampleApp_epDesc.simpleDesc
    240                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000082   A3           INC     DPTR
   \   000083   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000085   F0           MOVX    @DPTR,A
   \   000086   A3           INC     DPTR
   \   000087   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000089   F0           MOVX    @DPTR,A
    241            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   00008A   A3           INC     DPTR
   \   00008B   E4           CLR     A
   \   00008C   F0           MOVX    @DPTR,A
    242          
    243            // Register the endpoint description with the AF
    244            afRegister( &SampleApp_epDesc );
   \   00008D                ; Setup parameters for call to function afRegister
   \   00008D   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   00008F   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000091   12....       LCALL   ??afRegister?relay
    245          
    246            // Register for all key events - This app will handle all key events
    247            RegisterForKeys( SampleApp_TaskID );
   \   000094                ; Setup parameters for call to function RegisterForKeys
   \   000094   90....       MOV     DPTR,#SampleApp_TaskID
   \   000097   E0           MOVX    A,@DPTR
   \   000098   F9           MOV     R1,A
   \   000099   12....       LCALL   ??RegisterForKeys?relay
    248          
    249            // By default, all devices start out in Group 1
    250            SampleApp_Group.ID = 0x0001;
   \   00009C   90....       MOV     DPTR,#SampleApp_Group
   \   00009F   7401         MOV     A,#0x1
   \   0000A1   F0           MOVX    @DPTR,A
   \   0000A2   A3           INC     DPTR
   \   0000A3   E4           CLR     A
   \   0000A4   F0           MOVX    @DPTR,A
    251            osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
   \   0000A5                ; Setup parameters for call to function osal_memcpy
   \   0000A5   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   0000A8   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   0000AB   F5..         MOV     ?V0 + 2,A
   \   0000AD   78..         MOV     R0,#?V0 + 0
   \   0000AF   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B2   7C07         MOV     R4,#0x7
   \   0000B4   7D00         MOV     R5,#0x0
   \   0000B6   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000B8   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000BA   12....       LCALL   ??osal_memcpy?relay
   \   0000BD   7403         MOV     A,#0x3
   \   0000BF   12....       LCALL   ?DEALLOC_XSTACK8
    252            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000C2                ; Setup parameters for call to function aps_AddGroup
   \   0000C2   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000C4   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000C6   7914         MOV     R1,#0x14
   \   0000C8   12....       LCALL   ??aps_AddGroup?relay
    253          
    254          #if defined ( LCD_SUPPORTED )
    255           // HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 ); 
    256          #endif
    257          }
   \   0000CB   741D         MOV     A,#0x1d
   \   0000CD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D0   7F03         MOV     R7,#0x3
   \   0000D2   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000D5                REQUIRE P0SEL
   \   0000D5                REQUIRE P0DIR
    258          
    259          /*********************************************************************
    260           * @fn      SampleApp_ProcessEvent
    261           *
    262           * @brief   Generic Application Task event processor.  This function
    263           *          is called to process all events for the task.  Events
    264           *          include timers, messages and any other user defined events.
    265           *
    266           * @param   task_id  - The OSAL assigned task ID.
    267           * @param   events - events to process.  This is a bit map and can
    268           *                   contain more than one event.
    269           *
    270           * @return  none
    271           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    272          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    273          { uint8 i;
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    274            afIncomingMSGPacket_t *MSGpkt;
    275            (void)task_id;  // Intentionally unreferenced parameter
    276          
    277            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7003         JNZ     $+5
   \   00000D   02....       LJMP    ??SampleApp_ProcessEvent_0 & 0xFFFF
    278            {
    279              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000010                ; Setup parameters for call to function osal_msg_receive
   \   000010   8010         SJMP    ??SampleApp_ProcessEvent_1
    280              while ( MSGpkt )
    281              {
    282                switch ( MSGpkt->hdr.event )
    283                {
    284                  // Received when a key is pressed
    285                  case KEY_CHANGE:
    286                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    287                    break;
    288          
    289                  // Received when a messages is received (OTA) for this endpoint
    290                  case AF_INCOMING_MSG_CMD:
    291                    SampleApp_MessageMSGCB( MSGpkt );
    292                    break;
    293          
    294                  // Received whenever the device changes state in the network
    295                  case ZDO_STATE_CHANGE:
    296                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
    297                    if ( (SampleApp_NwkState == DEV_ZB_COORD) ||
    298                           (SampleApp_NwkState == DEV_ROUTER)
    299                        || (SampleApp_NwkState == DEV_END_DEVICE) )
    300                    {
    301                     
    302                     HalLcd_HW_Init(); //oled ³õÊ¼»¯
    303                      for(i=0; i<5; i++)
    304                      {
    305                           LCD_P16x16Ch(16+16*i, 0, i);//ÏÔÊ¾¶à¹¦ÄÜÊß²Ë
    306                      }
    307                      for(i=0; i<5; i++)
    308                      {
    309                           LCD_P16x16Ch(16+16*i, 2, 5+i);//ÏÔÊ¾´óÅïµÄÉè¼Æ
    310                      }
    311                      
    312                      for(i=0; i<3; i++)
    313                      {
    314                           LCD_P16x16Ch(32+16*i, 4, 10+i);//ÏÔÊ¾Íõ¼üÁÖ
    315                      }
    316                      LCD_P8x16Str(16, 6, "3158116124");         
    317                       if ( SampleApp_NwkState == DEV_ZB_COORD)
    318                       {
    319                           flag_coord=1;flag_end_1=0;
    320                           
    321                       } else if  (    (SampleApp_NwkState == DEV_ROUTER)  || (SampleApp_NwkState == DEV_END_DEVICE) )
    322                               {
    323                                   flag_coord=0,flag_end_1=1;//ÖÕ¶Ë½Úµã
    324                                   P1_0=1;P1_1=1;
    325                                    P1SEL&=~0x20;//×÷ÎªÆÕÍ¨IO¿Ú 
    326                         P1DIR|=0x20;  //P1_5¶¨ÒåÎªÊä³ö 
    327                         P1INP&=~0x20; //´ò¿ªÉÏÀ­
    328          
    329                         P1SEL&=~0x40;//×÷ÎªÆÕÍ¨IO¿Ú 
    330                         P1DIR|=0x40;  //P1_6¶¨ÒåÎªÊä³ö 
    331                         P1INP&=~0x40; //´ò¿ªÉÏÀ­
    332          
    333                         P1SEL&=~0x80;//×÷ÎªÆÕÍ¨IO¿Ú 
    334                         P1DIR|=0x80;  //P1_7¶¨ÒåÎªÊä³ö 
    335                         P1INP&=~0x80; //´ò¿ªÉÏÀ­
    336                                   osal_start_timerEx( SampleApp_TaskID,
    337                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    338                                        2000 );//ÖÜÆÚ²É¼¯´«¸ÐÆ÷Öµ
    339                                }
    340                           else {
    341                                        flag_coord=0;flag_end_1=0;;
   \                     ??SampleApp_ProcessEvent_2:
   \   000012   90....       MOV     DPTR,#flag_coord
   \   000015   E4           CLR     A
   \   000016   F0           MOVX    @DPTR,A
   \   000017   90....       MOV     DPTR,#flag_end_1
   \                     ??SampleApp_ProcessEvent_3:
   \   00001A   F0           MOVX    @DPTR,A
    342                                }
    343                    
    344                    }
    345                    else
    346                    {
    347                      // Device is no longer in the network
    348                    }
    349                    break;
    350          
    351                  default:
    352                    break;
    353                }
    354          
    355                // Release the memory
    356                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   00001B                ; Setup parameters for call to function osal_msg_deallocate
   \   00001B   AA..         MOV     R2,?V0 + 0
   \   00001D   AB..         MOV     R3,?V0 + 1
   \   00001F   12....       LCALL   ??osal_msg_deallocate?relay
    357          
    358                // Next - if one is available
    359                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000022                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000022   90....       MOV     DPTR,#SampleApp_TaskID
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F9           MOV     R1,A
   \   000027   12....       LCALL   ??osal_msg_receive?relay
   \   00002A   8A..         MOV     ?V0 + 0,R2
   \   00002C   8B..         MOV     ?V0 + 1,R3
   \   00002E   E5..         MOV     A,?V0 + 0
   \   000030   45..         ORL     A,?V0 + 1
   \   000032   7003         JNZ     $+5
   \   000034   02....       LJMP    ??SampleApp_ProcessEvent_5 & 0xFFFF
   \   000037   85..82       MOV     DPL,?V0 + 0
   \   00003A   85..83       MOV     DPH,?V0 + 1
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   24E6         ADD     A,#-0x1a
   \   000040   6006         JZ      ??SampleApp_ProcessEvent_6
   \   000042   2449         ADD     A,#0x49
   \   000044   600B         JZ      ??SampleApp_ProcessEvent_7
   \   000046   80D3         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000048                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000048   AA..         MOV     R2,?V0 + 0
   \   00004A   AB..         MOV     R3,?V0 + 1
   \   00004C   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   00004F   80CA         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   90....       MOV     DPTR,#SampleApp_NwkState
   \   000056   F0           MOVX    @DPTR,A
   \   000057   6409         XRL     A,#0x9
   \   000059   600A         JZ      ??SampleApp_ProcessEvent_8
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   6407         XRL     A,#0x7
   \   00005E   6005         JZ      ??SampleApp_ProcessEvent_8
   \   000060   E0           MOVX    A,@DPTR
   \   000061   6406         XRL     A,#0x6
   \   000063   70B6         JNZ     ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_8:
   \   000065                ; Setup parameters for call to function HalLcd_HW_Init
   \   000065   12....       LCALL   ??HalLcd_HW_Init?relay
   \   000068   75..00       MOV     ?V0 + 2,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   00006B                ; Setup parameters for call to function LCD_P16x16Ch
   \   00006B   AB..         MOV     R3,?V0 + 2
   \   00006D   7A00         MOV     R2,#0x0
   \   00006F   EB           MOV     A,R3
   \   000070   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000073   40F6         JC      ??SampleApp_ProcessEvent_9
   \   000075   75..00       MOV     ?V0 + 2,#0x0
   \                     ??SampleApp_ProcessEvent_10:
   \   000078                ; Setup parameters for call to function LCD_P16x16Ch
   \   000078   7405         MOV     A,#0x5
   \   00007A   25..         ADD     A,?V0 + 2
   \   00007C   FB           MOV     R3,A
   \   00007D   7A02         MOV     R2,#0x2
   \   00007F   E5..         MOV     A,?V0 + 2
   \   000081   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000084   40F2         JC      ??SampleApp_ProcessEvent_10
   \   000086   75..00       MOV     ?V0 + 2,#0x0
   \                     ??SampleApp_ProcessEvent_11:
   \   000089                ; Setup parameters for call to function LCD_P16x16Ch
   \   000089   740A         MOV     A,#0xa
   \   00008B   25..         ADD     A,?V0 + 2
   \   00008D   FB           MOV     R3,A
   \   00008E   7A04         MOV     R2,#0x4
   \   000090   E5..         MOV     A,?V0 + 2
   \   000092   C4           SWAP    A
   \   000093   54F0         ANL     A,#0xf0
   \   000095   2420         ADD     A,#0x20
   \   000097   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00009A   9403         SUBB    A,#0x3
   \   00009C   40EB         JC      ??SampleApp_ProcessEvent_11
   \   00009E                ; Setup parameters for call to function LCD_P8x16Str
   \   00009E   7C..         MOV     R4,#`?<Constant "3158116124">` & 0xff
   \   0000A0   7D..         MOV     R5,#(`?<Constant "3158116124">` >> 8) & 0xff
   \   0000A2   7A06         MOV     R2,#0x6
   \   0000A4   7910         MOV     R1,#0x10
   \   0000A6   12....       LCALL   ??LCD_P8x16Str?relay
   \   0000A9   90....       MOV     DPTR,#SampleApp_NwkState
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   6409         XRL     A,#0x9
   \   0000AF   700D         JNZ     ??SampleApp_ProcessEvent_12
   \   0000B1   90....       MOV     DPTR,#flag_coord
   \   0000B4   7401         MOV     A,#0x1
   \   0000B6   F0           MOVX    @DPTR,A
   \   0000B7   90....       MOV     DPTR,#flag_end_1
   \   0000BA   E4           CLR     A
   \   0000BB   02....       LJMP    ??SampleApp_ProcessEvent_3 & 0xFFFF
   \                     ??SampleApp_ProcessEvent_12:
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   6407         XRL     A,#0x7
   \   0000C1   6008         JZ      ??SampleApp_ProcessEvent_13
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   6406         XRL     A,#0x6
   \   0000C6   6003         JZ      $+5
   \   0000C8   02....       LJMP    ??SampleApp_ProcessEvent_2 & 0xFFFF
   \                     ??SampleApp_ProcessEvent_13:
   \   0000CB   90....       MOV     DPTR,#flag_coord
   \   0000CE   E4           CLR     A
   \   0000CF   F0           MOVX    @DPTR,A
   \   0000D0   90....       MOV     DPTR,#flag_end_1
   \   0000D3   04           INC     A
   \   0000D4   F0           MOVX    @DPTR,A
   \   0000D5   D290         SETB    0x90.0
   \   0000D7   D291         SETB    0x90.1
   \   0000D9   53F4DF       ANL     0xf4,#0xdf
   \   0000DC   43FE20       ORL     0xfe,#0x20
   \   0000DF   53F6DF       ANL     0xf6,#0xdf
   \   0000E2   53F4BF       ANL     0xf4,#0xbf
   \   0000E5   43FE40       ORL     0xfe,#0x40
   \   0000E8   53F6BF       ANL     0xf6,#0xbf
   \   0000EB   53F47F       ANL     0xf4,#0x7f
   \   0000EE   43FE80       ORL     0xfe,#0x80
   \   0000F1   53F67F       ANL     0xf6,#0x7f
   \   0000F4                ; Setup parameters for call to function osal_start_timerEx
   \   0000F4   7CD0         MOV     R4,#-0x30
   \   0000F6   7D07         MOV     R5,#0x7
   \   0000F8   FA           MOV     R2,A
   \   0000F9   7B00         MOV     R3,#0x0
   \   0000FB   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   F9           MOV     R1,A
   \   000100   12....       LCALL   ??osal_start_timerEx?relay
   \   000103   02....       LJMP    ??SampleApp_ProcessEvent_4 & 0xFFFF
    360              }
    361          
    362              // return unprocessed events
    363              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000106   EE           MOV     A,R6
   \   000107   FA           MOV     R2,A
   \   000108   EF           MOV     A,R7
   \   000109   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_14:
   \   00010B   FB           MOV     R3,A
   \   00010C   8023         SJMP    ??SampleApp_ProcessEvent_15
    364            }
    365          
    366            // Send a message out - This event is generated by a timer
    367            //  (setup in SampleApp_Init()).
    368            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   00010E   EE           MOV     A,R6
   \   00010F   A2E0         MOV     C,0xE0 /* A   */.0
   \   000111   501A         JNC     ??SampleApp_ProcessEvent_16
    369            {
    370              // Send the periodic message
    371              SampleApp_SendPeriodicMessage();//²É¼¯ÎÂ¶È+Êª¶È+¹âÃô+ÈËÌåºìÍâ
   \   000113                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   000113   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    372          
    373              // Setup to send message again in normal period (+ a little jitter)
    374              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    375                 2000);
   \   000116                ; Setup parameters for call to function osal_start_timerEx
   \   000116   7CD0         MOV     R4,#-0x30
   \   000118   7D07         MOV     R5,#0x7
   \   00011A   7A01         MOV     R2,#0x1
   \   00011C   7B00         MOV     R3,#0x0
   \   00011E   90....       MOV     DPTR,#SampleApp_TaskID
   \   000121   E0           MOVX    A,@DPTR
   \   000122   F9           MOV     R1,A
   \   000123   12....       LCALL   ??osal_start_timerEx?relay
    376          
    377              // return unprocessed events
    378              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   000126   EE           MOV     A,R6
   \   000127   6401         XRL     A,#0x1
   \   000129   FA           MOV     R2,A
   \   00012A   EF           MOV     A,R7
   \   00012B   80DE         SJMP    ??SampleApp_ProcessEvent_14
    379            }
    380          
    381            // Discard unknown events
    382            return 0;
   \                     ??SampleApp_ProcessEvent_16:
   \   00012D   7A00         MOV     R2,#0x0
   \   00012F   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_15:
   \   000131   7F04         MOV     R7,#0x4
   \   000133   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000136                REQUIRE _A_P1
   \   000136                REQUIRE P1SEL
   \   000136                REQUIRE P1DIR
   \   000136                REQUIRE P1INP
    383          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   C4           SWAP    A
   \   000001   54F0         ANL     A,#0xf0
   \   000003   2410         ADD     A,#0x10
   \   000005   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000008   9405         SUBB    A,#0x5
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F9           MOV     R1,A
   \   000001   12....       LCALL   ??LCD_P16x16Ch?relay
   \   000004   05..         INC     ?V0 + 2
   \   000006   E5..         MOV     A,?V0 + 2
   \   000008   C3           CLR     C
   \   000009   22           RET
    384          
    385          /*********************************************************************
    386           * Event Generation Functions
    387           */
    388          /*********************************************************************
    389           * @fn      SampleApp_HandleKeys
    390           *
    391           * @brief   Handles all key events for this device.
    392           *
    393           * @param   shift - true if in shift/alt.
    394           * @param   keys - bit field for key events. Valid entries:
    395           *                 HAL_KEY_SW_2
    396           *                 HAL_KEY_SW_1
    397           *
    398           * @return  none
    399           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    400          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    401          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    402          
    403            (void)shift;  // Intentionally unreferenced parameter
    404            
    405            if ( keys & HAL_KEY_SW_6 )
    406            {
    407           
    408            }
    409          
    410            if ( keys & HAL_KEY_SW_1 )
    411            {
    412              /* The Flashr Command is sent to Group 1.
    413               * This key toggles this device in and out of group 1.
    414               * If this device doesn't belong to group 1, this application
    415               * will not receive the Flash command sent to group 1.
    416               */
    417            /*  aps_Group_t *grp;
    418              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    419              if ( grp )
    420              {
    421                // Remove from the group
    422                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    423              }
    424              else
    425              {
    426                // Add to the flash group
    427                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
    428              }*/
    429            }
    430            
    431          }
   \   000000   02....       LJMP    ?BRET
    432          
    433          /*********************************************************************
    434           * LOCAL FUNCTIONS
    435           */
    436          
    437          /*********************************************************************
    438           * @fn      SampleApp_MessageMSGCB
    439           *
    440           * @brief   Data message processor callback.  This function processes
    441           *          any incoming data - probably from other devices.  So, based
    442           *          on cluster ID, perform the intended action.
    443           *
    444           * @param   none
    445           *
    446           * @return  none
    447           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    448          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    449          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    450            uint8 buffer[2];
                         ^
Warning[Pe177]: variable "buffer" was declared but never referenced
    451            switch ( pkt->clusterId )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6401         XRL     A,#0x1
   \   00000F   7002         JNZ     ??SampleApp_MessageMSGCB_0
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \                     ??SampleApp_MessageMSGCB_0:
   \   000013   702B         JNZ     ??SampleApp_MessageMSGCB_1
    452            {    
    453              case SAMPLEAPP_PERIODIC_CLUSTERID:   
    454                if(flag_coord==1)
   \   000015   90....       MOV     DPTR,#flag_coord
   \   000018   E0           MOVX    A,@DPTR
   \   000019   6401         XRL     A,#0x1
   \   00001B   7023         JNZ     ??SampleApp_MessageMSGCB_1
    455                {
    456                HalUARTWrite(0, pkt->cmd.Data, pkt->cmd.DataLength); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
   \   00001D                ; Setup parameters for call to function HalUARTWrite
   \   00001D   EA           MOV     A,R2
   \   00001E   241F         ADD     A,#0x1f
   \   000020   F582         MOV     DPL,A
   \   000022   EB           MOV     A,R3
   \   000023   3400         ADDC    A,#0x0
   \   000025   F583         MOV     DPH,A
   \   000027   E0           MOVX    A,@DPTR
   \   000028   FC           MOV     R4,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FD           MOV     R5,A
   \   00002C   EA           MOV     A,R2
   \   00002D   2421         ADD     A,#0x21
   \   00002F   F582         MOV     DPL,A
   \   000031   EB           MOV     A,R3
   \   000032   3400         ADDC    A,#0x0
   \   000034   F583         MOV     DPH,A
   \   000036   E0           MOVX    A,@DPTR
   \   000037   FA           MOV     R2,A
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   FB           MOV     R3,A
   \   00003B   7900         MOV     R1,#0x0
   \   00003D   12....       LCALL   ??HalUARTWrite?relay
    457                }
    458                 
    459              
    460                break;
    461          
    462            }
    463          }
   \                     ??SampleApp_MessageMSGCB_1:
   \   000040   D083         POP     DPH
   \   000042   D082         POP     DPL
   \   000044   02....       LJMP    ?BRET
    464          
    465          /*********************************************************************
    466           * @fn      SampleApp_SendPeriodicMessage
    467           *
    468           * @brief   Send the periodic message.
    469           *
    470           * @param   none
    471           *
    472           * @return  none
    473           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    474          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    475          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    476             float temp;
    477             uint8 wendu[3];
    478             uint8 HR2[3];
    479             uint8 Light_5[5];
    480             uint8 i;
    481            sensor_value[0]='R';//ÖÕ¶Ë±êÖ¾
   \   00000A   90....       MOV     DPTR,#sensor_value
   \   00000D   7452         MOV     A,#0x52
   \   00000F   F0           MOVX    @DPTR,A
    482            read_data(sensor_data_value);// ¶ÁÈ¡ÎÂ¶È
   \   000010                ; Setup parameters for call to function read_data
   \   000010   7A..         MOV     R2,#sensor_data_value & 0xff
   \   000012   7B..         MOV     R3,#(sensor_data_value >> 8) & 0xff
   \   000014   12....       LCALL   ??read_data?relay
    483            DataChange(sensor_data_value,ch1); //Êý¾Ý´¦Àí£¨1,2£©
   \   000017                ; Setup parameters for call to function DataChange
   \   000017   7C..         MOV     R4,#ch1 & 0xff
   \   000019   7D..         MOV     R5,#(ch1 >> 8) & 0xff
   \   00001B   7A..         MOV     R2,#sensor_data_value & 0xff
   \   00001D   7B..         MOV     R3,#(sensor_data_value >> 8) & 0xff
   \   00001F   12....       LCALL   ??DataChange?relay
    484            wendu[0]=sensor_value[1];
   \   000022   90....       MOV     DPTR,#sensor_value + 1
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F8           MOV     R0,A
   \   000027   7403         MOV     A,#0x3
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E8           MOV     A,R0
   \   00002D   F0           MOVX    @DPTR,A
    485            wendu[1]=sensor_value[2];
   \   00002E   90....       MOV     DPTR,#sensor_value + 2
   \   000031   E0           MOVX    A,@DPTR
   \   000032   C0E0         PUSH    A
   \   000034   7404         MOV     A,#0x4
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   D0E0         POP     A
   \   00003B   F0           MOVX    @DPTR,A
    486            wendu[2]='\0';//½áÊø±êÖ¾ 
   \   00003C   7405         MOV     A,#0x5
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   E4           CLR     A
   \   000042   F0           MOVX    @DPTR,A
    487            if(sensor_value[1]<'3')
   \   000043   E8           MOV     A,R0
   \   000044   C3           CLR     C
   \   000045   9433         SUBB    A,#0x33
   \   000047   5004         JNC     ??SampleApp_SendPeriodicMessage_0
    488            {
    489              P1_0=0;//ÔöÎÂ
   \   000049   C290         CLR     0x90.0
   \   00004B   8002         SJMP    ??SampleApp_SendPeriodicMessage_1
    490            }
    491            else{
    492              P1_0=1;//
   \                     ??SampleApp_SendPeriodicMessage_0:
   \   00004D   D290         SETB    0x90.0
    493            }
    494            temp=getHR202_6()*33;//»ñÈ¡Êª¶ÈÖµ£¨0-100£©
   \                     ??SampleApp_SendPeriodicMessage_1:
   \   00004F                ; Setup parameters for call to function getHR202_6
   \   00004F   12....       LCALL   ??getHR202_6?relay
   \   000052   8A..         MOV     ?V0 + 4,R2
   \   000054   8B..         MOV     ?V0 + 5,R3
   \   000056   8C..         MOV     ?V0 + 6,R4
   \   000058   8D..         MOV     ?V0 + 7,R5
   \   00005A   90....       MOV     DPTR,#__Constant_42040000
   \   00005D   78..         MOV     R0,#?V0 + 0
   \   00005F   12....       LCALL   ?L_MOV_X
   \   000062   78..         MOV     R0,#?V0 + 4
   \   000064   79..         MOV     R1,#?V0 + 0
   \   000066   12....       LCALL   ?FLT_MUL
    495            if(temp>=99)temp=99;
   \   000069   90....       MOV     DPTR,#__Constant_42c60000
   \   00006C   78..         MOV     R0,#?V0 + 0
   \   00006E   12....       LCALL   ?L_MOV_X
   \   000071   78..         MOV     R0,#?V0 + 4
   \   000073   79..         MOV     R1,#?V0 + 0
   \   000075   12....       LCALL   ?FLT_GE
   \   000078   500A         JNC     ??SampleApp_SendPeriodicMessage_2
   \   00007A   90....       MOV     DPTR,#__Constant_42c60000
   \   00007D   78..         MOV     R0,#?V0 + 4
   \   00007F   12....       LCALL   ?L_MOV_X
   \   000082   8011         SJMP    ??SampleApp_SendPeriodicMessage_3
    496            
    497            if(temp>55)
   \                     ??SampleApp_SendPeriodicMessage_2:
   \   000084   90....       MOV     DPTR,#__Constant_425c0001
   \   000087   78..         MOV     R0,#?V0 + 0
   \   000089   12....       LCALL   ?L_MOV_X
   \   00008C   78..         MOV     R0,#?V0 + 4
   \   00008E   79..         MOV     R1,#?V0 + 0
   \   000090   12....       LCALL   ?FLT_GE
   \   000093   5004         JNC     ??SampleApp_SendPeriodicMessage_4
    498            {
    499               P1_1=1;//
   \                     ??SampleApp_SendPeriodicMessage_3:
   \   000095   D291         SETB    0x90.1
   \   000097   8002         SJMP    ??SampleApp_SendPeriodicMessage_5
    500            }
    501            else{
    502               P1_1=0;//¼ÓÊª
   \                     ??SampleApp_SendPeriodicMessage_4:
   \   000099   C291         CLR     0x90.1
    503            }
    504            
    505            HR2[0]=(char)(temp)%10+48;
   \                     ??SampleApp_SendPeriodicMessage_5:
   \   00009B   78..         MOV     R0,#?V0 + 4
   \   00009D   12....       LCALL   ?FLT_TO_L
   \   0000A0   A8..         MOV     R0,?V0 + 4
   \   0000A2   E8           MOV     A,R0
   \   0000A3   75F00A       MOV     B,#0xa
   \   0000A6   84           DIV     AB
   \   0000A7   E5F0         MOV     A,B
   \   0000A9   2430         ADD     A,#0x30
   \   0000AB   85..82       MOV     DPL,?XSP + 0
   \   0000AE   85..83       MOV     DPH,?XSP + 1
   \   0000B1   F0           MOVX    @DPTR,A
    506            HR2[1]=(char)(temp)/10+48;
   \   0000B2   75F00A       MOV     B,#0xa
   \   0000B5   E8           MOV     A,R0
   \   0000B6   84           DIV     AB
   \   0000B7   2430         ADD     A,#0x30
   \   0000B9   C0E0         PUSH    A
   \   0000BB   7401         MOV     A,#0x1
   \   0000BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C0   D0E0         POP     A
   \   0000C2   F0           MOVX    @DPTR,A
    507            HR2[2]='\0';//½áÊø±êÖ¾ 
   \   0000C3   7402         MOV     A,#0x2
   \   0000C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C8   E4           CLR     A
   \   0000C9   F0           MOVX    @DPTR,A
    508            for(i=0;i<2;i++)
   \   0000CA   F5..         MOV     ?V0 + 0,A
    509            sensor_value[3+i]=HR2[i];//Êý¾Ý´¦Àí£¨3,4£©
   \                     ??SampleApp_SendPeriodicMessage_6:
   \   0000CC   85..82       MOV     DPL,?V0 + 0
   \   0000CF   A882         MOV     R0,DPL
   \   0000D1   85..82       MOV     DPL,?XSP + 0
   \   0000D4   85..83       MOV     DPH,?XSP + 1
   \   0000D7   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000DA   C0E0         PUSH    A
   \   0000DC   74..         MOV     A,#(sensor_value + 3) & 0xff
   \   0000DE   28           ADD     A,R0
   \   0000DF   F582         MOV     DPL,A
   \   0000E1   74..         MOV     A,#((sensor_value + 3) >> 8) & 0xff
   \   0000E3   3400         ADDC    A,#0x0
   \   0000E5   F583         MOV     DPH,A
   \   0000E7   D0E0         POP     A
   \   0000E9   F0           MOVX    @DPTR,A
   \   0000EA   05..         INC     ?V0 + 0
   \   0000EC   E5..         MOV     A,?V0 + 0
   \   0000EE   C3           CLR     C
   \   0000EF   9402         SUBB    A,#0x2
   \   0000F1   40D9         JC      ??SampleApp_SendPeriodicMessage_6
    510          
    511            temp=getLight_5();//»ñÈ¡¹âÕÕÖµ
   \   0000F3                ; Setup parameters for call to function getLight_5
   \   0000F3   12....       LCALL   ??getLight_5?relay
   \   0000F6   8A..         MOV     ?V0 + 4,R2
   \   0000F8   8B..         MOV     ?V0 + 5,R3
   \   0000FA   8C..         MOV     ?V0 + 6,R4
   \   0000FC   8D..         MOV     ?V0 + 7,R5
    512            Light_5[0]=(char)(temp)%10+48;
   \   0000FE   8A..         MOV     ?V0 + 0,R2
   \   000100   8B..         MOV     ?V0 + 1,R3
   \   000102   8C..         MOV     ?V0 + 2,R4
   \   000104   8D..         MOV     ?V0 + 3,R5
   \   000106   78..         MOV     R0,#?V0 + 0
   \   000108   12....       LCALL   ?FLT_TO_L
   \   00010B   E5..         MOV     A,?V0 + 0
   \   00010D   75F00A       MOV     B,#0xa
   \   000110   84           DIV     AB
   \   000111   E5F0         MOV     A,B
   \   000113   2430         ADD     A,#0x30
   \   000115   C0E0         PUSH    A
   \   000117   7406         MOV     A,#0x6
   \   000119   12....       LCALL   ?XSTACK_DISP0_8
   \   00011C   D0E0         POP     A
   \   00011E   12....       LCALL   ?Subroutine2 & 0xFFFF
    513            Light_5[1]=(char)(temp*10)%10+48;
   \                     ??CrossCallReturnLabel_2:
   \   000121   90....       MOV     DPTR,#__Constant_41200000
   \   000124   78..         MOV     R0,#?V0 + 8
   \   000126   12....       LCALL   ?L_MOV_X
   \   000129   78..         MOV     R0,#?V0 + 0
   \   00012B   79..         MOV     R1,#?V0 + 8
   \   00012D   12....       LCALL   ?FLT_MUL
   \   000130   78..         MOV     R0,#?V0 + 0
   \   000132   12....       LCALL   ?FLT_TO_L
   \   000135   E5..         MOV     A,?V0 + 0
   \   000137   75F00A       MOV     B,#0xa
   \   00013A   84           DIV     AB
   \   00013B   E5F0         MOV     A,B
   \   00013D   2430         ADD     A,#0x30
   \   00013F   C0E0         PUSH    A
   \   000141   7407         MOV     A,#0x7
   \   000143   12....       LCALL   ?XSTACK_DISP0_8
   \   000146   D0E0         POP     A
   \   000148   12....       LCALL   ?Subroutine2 & 0xFFFF
    514            Light_5[2]=(char)(temp*100)%10+48;
   \                     ??CrossCallReturnLabel_3:
   \   00014B   90....       MOV     DPTR,#__Constant_42c80000
   \   00014E   78..         MOV     R0,#?V0 + 8
   \   000150   12....       LCALL   ?L_MOV_X
   \   000153   78..         MOV     R0,#?V0 + 0
   \   000155   79..         MOV     R1,#?V0 + 8
   \   000157   12....       LCALL   ?FLT_MUL
   \   00015A   78..         MOV     R0,#?V0 + 0
   \   00015C   12....       LCALL   ?FLT_TO_L
   \   00015F   E5..         MOV     A,?V0 + 0
   \   000161   75F00A       MOV     B,#0xa
   \   000164   84           DIV     AB
   \   000165   E5F0         MOV     A,B
   \   000167   2430         ADD     A,#0x30
   \   000169   C0E0         PUSH    A
   \   00016B   7408         MOV     A,#0x8
   \   00016D   12....       LCALL   ?XSTACK_DISP0_8
   \   000170   D0E0         POP     A
   \   000172   F0           MOVX    @DPTR,A
    515            Light_5[3]=(char)(temp*1000)%10+48;
   \   000173   90....       MOV     DPTR,#__Constant_447a0000
   \   000176   78..         MOV     R0,#?V0 + 0
   \   000178   12....       LCALL   ?L_MOV_X
   \   00017B   78..         MOV     R0,#?V0 + 4
   \   00017D   79..         MOV     R1,#?V0 + 0
   \   00017F   12....       LCALL   ?FLT_MUL
   \   000182   78..         MOV     R0,#?V0 + 4
   \   000184   12....       LCALL   ?FLT_TO_L
   \   000187   E5..         MOV     A,?V0 + 4
   \   000189   75F00A       MOV     B,#0xa
   \   00018C   84           DIV     AB
   \   00018D   E5F0         MOV     A,B
   \   00018F   2430         ADD     A,#0x30
   \   000191   C0E0         PUSH    A
   \   000193   7409         MOV     A,#0x9
   \   000195   12....       LCALL   ?XSTACK_DISP0_8
   \   000198   D0E0         POP     A
   \   00019A   F0           MOVX    @DPTR,A
    516            Light_5[4]='\0';//½áÊø±êÖ¾ 
   \   00019B   740A         MOV     A,#0xa
   \   00019D   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A0   E4           CLR     A
   \   0001A1   F0           MOVX    @DPTR,A
    517            for(i=0;i<4;i++)
   \   0001A2   F5..         MOV     ?V0 + 0,A
    518            sensor_value[5+i]=Light_5[i];
   \                     ??SampleApp_SendPeriodicMessage_7:
   \   0001A4   85..82       MOV     DPL,?V0 + 0
   \   0001A7   A882         MOV     R0,DPL
   \   0001A9   7406         MOV     A,#0x6
   \   0001AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AE   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0001B1   C0E0         PUSH    A
   \   0001B3   74..         MOV     A,#(sensor_value + 5) & 0xff
   \   0001B5   28           ADD     A,R0
   \   0001B6   F582         MOV     DPL,A
   \   0001B8   74..         MOV     A,#((sensor_value + 5) >> 8) & 0xff
   \   0001BA   3400         ADDC    A,#0x0
   \   0001BC   F583         MOV     DPH,A
   \   0001BE   D0E0         POP     A
   \   0001C0   F0           MOVX    @DPTR,A
   \   0001C1   05..         INC     ?V0 + 0
   \   0001C3   E5..         MOV     A,?V0 + 0
   \   0001C5   C3           CLR     C
   \   0001C6   9404         SUBB    A,#0x4
   \   0001C8   40DA         JC      ??SampleApp_SendPeriodicMessage_7
    519            
    520             if(DATA_PIN_1 == 1)
   \   0001CA   A284         MOV     C,0x80.4
   \   0001CC   5015         JNC     ??SampleApp_SendPeriodicMessage_8
    521            { 
    522              MicroWait (10000);     // Wait 10ms
   \   0001CE                ; Setup parameters for call to function Onboard_wait
   \   0001CE   7A10         MOV     R2,#0x10
   \   0001D0   7B27         MOV     R3,#0x27
   \   0001D2   12....       LCALL   ??Onboard_wait?relay
    523              if(DATA_PIN_1 == 1)
   \   0001D5   A284         MOV     C,0x80.4
   \   0001D7   5012         JNC     ??SampleApp_SendPeriodicMessage_9
    524              {     
    525                 sensor_value[9] = 0x31;       //ÓÐÈË½øÈë
   \   0001D9   90....       MOV     DPTR,#sensor_value + 9
   \   0001DC   7431         MOV     A,#0x31
   \   0001DE   F0           MOVX    @DPTR,A
    526                 P1_5=0;
   \   0001DF   C295         CLR     0x90.5
   \   0001E1   8008         SJMP    ??SampleApp_SendPeriodicMessage_9
    527              }
    528            }  
    529            else 
    530            {  
    531                sensor_value[9] = 0x30; 
   \                     ??SampleApp_SendPeriodicMessage_8:
   \   0001E3   90....       MOV     DPTR,#sensor_value + 9
   \   0001E6   7430         MOV     A,#0x30
   \   0001E8   F0           MOVX    @DPTR,A
    532               P1_5=1;
   \   0001E9   D295         SETB    0x90.5
    533            }  
    534           
    535            sensor_value[10]='#';
   \                     ??SampleApp_SendPeriodicMessage_9:
   \   0001EB   90....       MOV     DPTR,#sensor_value + 10
   \   0001EE   7423         MOV     A,#0x23
   \   0001F0   F0           MOVX    @DPTR,A
    536            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    537                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    538                                 11,
    539                                 sensor_value,
    540                                 &SampleApp_TransID,
    541                                 AF_DISCV_ROUTE,
    542                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   0001F1                ; Setup parameters for call to function AF_DataRequest
   \   0001F1   75..1E       MOV     ?V0 + 0,#0x1e
   \   0001F4   78..         MOV     R0,#?V0 + 0
   \   0001F6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001F9   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   0001FC   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   0001FF   78..         MOV     R0,#?V0 + 0
   \   000201   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000204   75....       MOV     ?V0 + 0,#sensor_value & 0xff
   \   000207   75....       MOV     ?V0 + 1,#(sensor_value >> 8) & 0xff
   \   00020A   78..         MOV     R0,#?V0 + 0
   \   00020C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00020F   75..0B       MOV     ?V0 + 0,#0xb
   \   000212   75..00       MOV     ?V0 + 1,#0x0
   \   000215   78..         MOV     R0,#?V0 + 0
   \   000217   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00021A   75..01       MOV     ?V0 + 0,#0x1
   \   00021D   78..         MOV     R0,#?V0 + 0
   \   00021F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000222   7920         MOV     R1,#0x20
   \   000224   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000226   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000228   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00022A   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00022C   12....       LCALL   ??AF_DataRequest?relay
   \   00022F   7409         MOV     A,#0x9
   \   000231   12....       LCALL   ?DEALLOC_XSTACK8
    543            {
    544              
    545            }
    546            else
    547            {
    548              // Error occurred in request to send.
    549            }
    550             LCD_CLS();//ÇåÆÁ
   \   000234                ; Setup parameters for call to function LCD_CLS
   \   000234   12....       LCALL   ??LCD_CLS?relay
    551             LCD_P16x16Ch(8, 0, 13);//ÏÔÊ¾ÎÂ
   \   000237                ; Setup parameters for call to function LCD_P16x16Ch
   \   000237   7B0D         MOV     R3,#0xd
   \   000239   7A00         MOV     R2,#0x0
   \   00023B   7908         MOV     R1,#0x8
   \   00023D   12....       LCALL   ??LCD_P16x16Ch?relay
    552             LCD_P16x16Ch(24,0, 15);//ÏÔÊ¾¶È
   \   000240                ; Setup parameters for call to function LCD_P16x16Ch
   \   000240   7B0F         MOV     R3,#0xf
   \   000242   7A00         MOV     R2,#0x0
   \   000244   7918         MOV     R1,#0x18
   \   000246   12....       LCALL   ??LCD_P16x16Ch?relay
    553             LCD_P16x16Ch(40,0, 16);//ÏÔÊ¾Öµ
   \   000249                ; Setup parameters for call to function LCD_P16x16Ch
   \   000249   7B10         MOV     R3,#0x10
   \   00024B   7A00         MOV     R2,#0x0
   \   00024D   7928         MOV     R1,#0x28
   \   00024F   12....       LCALL   ??LCD_P16x16Ch?relay
    554             LCD_P8x16Str(56, 0, ":");//:
   \   000252                ; Setup parameters for call to function LCD_P8x16Str
   \   000252   7C..         MOV     R4,#`?<Constant ":">` & 0xff
   \   000254   7D..         MOV     R5,#(`?<Constant ":">` >> 8) & 0xff
   \   000256   7A00         MOV     R2,#0x0
   \   000258   7938         MOV     R1,#0x38
   \   00025A   12....       LCALL   ??LCD_P8x16Str?relay
    555             LCD_P8x16Str(64, 0, wendu);//ÑÌÎíÖµ
   \   00025D                ; Setup parameters for call to function LCD_P8x16Str
   \   00025D   7403         MOV     A,#0x3
   \   00025F   12....       LCALL   ?XSTACK_DISP0_8
   \   000262   AC82         MOV     R4,DPL
   \   000264   AD83         MOV     R5,DPH
   \   000266   7A00         MOV     R2,#0x0
   \   000268   7940         MOV     R1,#0x40
   \   00026A   12....       LCALL   ??LCD_P8x16Str?relay
    556             LCD_P16x16Ch(80,0, 24);//ÏÔÊ¾¡æ
   \   00026D                ; Setup parameters for call to function LCD_P16x16Ch
   \   00026D   7B18         MOV     R3,#0x18
   \   00026F   7A00         MOV     R2,#0x0
   \   000271   7950         MOV     R1,#0x50
   \   000273   12....       LCALL   ??LCD_P16x16Ch?relay
    557             
    558             LCD_P16x16Ch(8, 2, 14);//ÏÔÊ¾Êª
   \   000276                ; Setup parameters for call to function LCD_P16x16Ch
   \   000276   7B0E         MOV     R3,#0xe
   \   000278   7A02         MOV     R2,#0x2
   \   00027A   7908         MOV     R1,#0x8
   \   00027C   12....       LCALL   ??LCD_P16x16Ch?relay
    559             LCD_P16x16Ch(24,2, 15);//ÏÔÊ¾¶È
   \   00027F                ; Setup parameters for call to function LCD_P16x16Ch
   \   00027F   7B0F         MOV     R3,#0xf
   \   000281   7A02         MOV     R2,#0x2
   \   000283   7918         MOV     R1,#0x18
   \   000285   12....       LCALL   ??LCD_P16x16Ch?relay
    560             LCD_P16x16Ch(40,2, 16);//ÏÔÊ¾Öµ
   \   000288                ; Setup parameters for call to function LCD_P16x16Ch
   \   000288   7B10         MOV     R3,#0x10
   \   00028A   7A02         MOV     R2,#0x2
   \   00028C   7928         MOV     R1,#0x28
   \   00028E   12....       LCALL   ??LCD_P16x16Ch?relay
    561             LCD_P8x16Str(56, 2, ":");//:
   \   000291                ; Setup parameters for call to function LCD_P8x16Str
   \   000291   7C..         MOV     R4,#`?<Constant ":">` & 0xff
   \   000293   7D..         MOV     R5,#(`?<Constant ":">` >> 8) & 0xff
   \   000295   7A02         MOV     R2,#0x2
   \   000297   7938         MOV     R1,#0x38
   \   000299   12....       LCALL   ??LCD_P8x16Str?relay
    562             LCD_P8x16Str(64, 2, HR2);//ÑÌÎíÖµ
   \   00029C                ; Setup parameters for call to function LCD_P8x16Str
   \   00029C   85..82       MOV     DPL,?XSP + 0
   \   00029F   85..83       MOV     DPH,?XSP + 1
   \   0002A2   AC82         MOV     R4,DPL
   \   0002A4   AD83         MOV     R5,DPH
   \   0002A6   7A02         MOV     R2,#0x2
   \   0002A8   7940         MOV     R1,#0x40
   \   0002AA   12....       LCALL   ??LCD_P8x16Str?relay
    563             LCD_P8x16Str(80, 2, "%");//:
   \   0002AD                ; Setup parameters for call to function LCD_P8x16Str
   \   0002AD   7C..         MOV     R4,#`?<Constant "%">` & 0xff
   \   0002AF   7D..         MOV     R5,#(`?<Constant "%">` >> 8) & 0xff
   \   0002B1   7A02         MOV     R2,#0x2
   \   0002B3   7950         MOV     R1,#0x50
   \   0002B5   12....       LCALL   ??LCD_P8x16Str?relay
    564             for(i=0; i<2; i++)
   \   0002B8   75..00       MOV     ?V0 + 0,#0x0
    565             {
    566               LCD_P16x16Ch(8+16*i, 4, 17+i);//ÏÔÊ¾¹âÕÕ
   \                     ??SampleApp_SendPeriodicMessage_10:
   \   0002BB                ; Setup parameters for call to function LCD_P16x16Ch
   \   0002BB   7411         MOV     A,#0x11
   \   0002BD   25..         ADD     A,?V0 + 0
   \   0002BF   FB           MOV     R3,A
   \   0002C0   7A04         MOV     R2,#0x4
   \   0002C2   E5..         MOV     A,?V0 + 0
   \   0002C4   C4           SWAP    A
   \   0002C5   54F0         ANL     A,#0xf0
   \   0002C7   2408         ADD     A,#0x8
   \   0002C9   F9           MOV     R1,A
   \   0002CA   12....       LCALL   ??LCD_P16x16Ch?relay
    567             }
   \   0002CD   05..         INC     ?V0 + 0
   \   0002CF   E5..         MOV     A,?V0 + 0
   \   0002D1   C3           CLR     C
   \   0002D2   9402         SUBB    A,#0x2
   \   0002D4   40E5         JC      ??SampleApp_SendPeriodicMessage_10
    568              LCD_P8x16Str(40, 4, ":");//:
   \   0002D6                ; Setup parameters for call to function LCD_P8x16Str
   \   0002D6   7C..         MOV     R4,#`?<Constant ":">` & 0xff
   \   0002D8   7D..         MOV     R5,#(`?<Constant ":">` >> 8) & 0xff
   \   0002DA   7A04         MOV     R2,#0x4
   \   0002DC   7928         MOV     R1,#0x28
   \   0002DE   12....       LCALL   ??LCD_P8x16Str?relay
    569              LCD_P8x16Str(48, 4, Light_5);//huoyan
   \   0002E1                ; Setup parameters for call to function LCD_P8x16Str
   \   0002E1   7406         MOV     A,#0x6
   \   0002E3   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E6   AC82         MOV     R4,DPL
   \   0002E8   AD83         MOV     R5,DPH
   \   0002EA   7A04         MOV     R2,#0x4
   \   0002EC   7930         MOV     R1,#0x30
   \   0002EE   12....       LCALL   ??LCD_P8x16Str?relay
    570              LCD_P8x16Str(80, 4, "Lx");//mmol
   \   0002F1                ; Setup parameters for call to function LCD_P8x16Str
   \   0002F1   7C..         MOV     R4,#`?<Constant "Lx">` & 0xff
   \   0002F3   7D..         MOV     R5,#(`?<Constant "Lx">` >> 8) & 0xff
   \   0002F5   7A04         MOV     R2,#0x4
   \   0002F7   7950         MOV     R1,#0x50
   \   0002F9   12....       LCALL   ??LCD_P8x16Str?relay
    571              
    572              if(sensor_value[9]==0x31)
   \   0002FC   90....       MOV     DPTR,#sensor_value + 9
   \   0002FF   E0           MOVX    A,@DPTR
   \   000300   6431         XRL     A,#0x31
   \   000302   7012         JNZ     ??SampleApp_SendPeriodicMessage_11
    573              {
    574                LCD_P16x16Ch(8, 6, 19);//ÏÔÊ¾ÎÂ
   \   000304                ; Setup parameters for call to function LCD_P16x16Ch
   \   000304   7B13         MOV     R3,#0x13
   \   000306   12....       LCALL   ?Subroutine3 & 0xFFFF
    575                LCD_P16x16Ch(24,6, 21);//ÏÔÊ¾¶È
    576                LCD_P16x16Ch(40,6, 22);//ÏÔÊ¾Öµ
    577                LCD_P16x16Ch(56,6, 23);//ÏÔÊ¾Öµ
    578                LCD_P8x16Str(72, 6, "!!!");//mmol
   \                     ??CrossCallReturnLabel_4:
   \   000309                ; Setup parameters for call to function LCD_P8x16Str
   \   000309   7C..         MOV     R4,#`?<Constant "!!!">` & 0xff
   \   00030B   7D..         MOV     R5,#(`?<Constant "!!!">` >> 8) & 0xff
   \   00030D   7A06         MOV     R2,#0x6
   \   00030F   7948         MOV     R1,#0x48
   \   000311   12....       LCALL   ??LCD_P8x16Str?relay
   \   000314   8005         SJMP    ??CrossCallReturnLabel_5
    579              }
    580              else
    581              {
    582                LCD_P16x16Ch(8, 6, 20);//ÏÔÊ¾ÎÂ
   \                     ??SampleApp_SendPeriodicMessage_11:
   \   000316                ; Setup parameters for call to function LCD_P16x16Ch
   \   000316   7B14         MOV     R3,#0x14
   \   000318   12....       LCALL   ?Subroutine3 & 0xFFFF
    583                LCD_P16x16Ch(24,6, 21);//ÏÔÊ¾¶È
    584                LCD_P16x16Ch(40,6, 22);//ÏÔÊ¾Öµ
    585                LCD_P16x16Ch(56,6, 23);//ÏÔÊ¾Öµ
    586              }
    587                
    588               
    589          }
   \                     ??CrossCallReturnLabel_5:
   \   00031B   740B         MOV     A,#0xb
   \   00031D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000320   7F0C         MOV     R7,#0xc
   \   000322   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000325                REQUIRE _A_P1
   \   000325                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E583         MOV     A,DPH
   \   000007   3400         ADDC    A,#0x0
   \   000009   F583         MOV     DPH,A
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7A06         MOV     R2,#0x6
   \   000002   7908         MOV     R1,#0x8
   \   000004   12....       LCALL   ??LCD_P16x16Ch?relay
   \   000007                ; Setup parameters for call to function LCD_P16x16Ch
   \   000007                ; Setup parameters for call to function LCD_P16x16Ch
   \   000007   7B15         MOV     R3,#0x15
   \   000009   7A06         MOV     R2,#0x6
   \   00000B   7918         MOV     R1,#0x18
   \   00000D   12....       LCALL   ??LCD_P16x16Ch?relay
   \   000010                ; Setup parameters for call to function LCD_P16x16Ch
   \   000010                ; Setup parameters for call to function LCD_P16x16Ch
   \   000010   7B16         MOV     R3,#0x16
   \   000012   7A06         MOV     R2,#0x6
   \   000014   7928         MOV     R1,#0x28
   \   000016   12....       LCALL   ??LCD_P16x16Ch?relay
   \   000019                ; Setup parameters for call to function LCD_P16x16Ch
   \   000019                ; Setup parameters for call to function LCD_P16x16Ch
   \   000019   7B17         MOV     R3,#0x17
   \   00001B   7A06         MOV     R2,#0x6
   \   00001D   7938         MOV     R1,#0x38
   \   00001F   12....       LCALL   ??LCD_P16x16Ch?relay
   \   000022   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A..         MOV     ?V0 + 0,R2
   \   000003   8B..         MOV     ?V0 + 1,R3
   \   000005   8C..         MOV     ?V0 + 2,R4
   \   000007   8D..         MOV     ?V0 + 3,R5
   \   000009   22           RET
    590          
    591          /*********************************************************************
    592           * @fn      SampleApp_SendFlashMessage
    593           *
    594           * @brief   Send the flash message to group 1.
    595           *
    596           * @param   flashTime - in milliseconds
    597           *
    598           * @return  none
    599           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    600          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    601          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    602            uint8 buffer[3];
    603            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    604            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    605            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    606          
    607            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    608                                 SAMPLEAPP_FLASH_CLUSTERID,
    609                                 3,
    610                                 buffer,
    611                                 &SampleApp_TransID,
    612                                 AF_DISCV_ROUTE,
    613                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??AF_DataRequest?relay
   \   00006C   7409         MOV     A,#0x9
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
    614            {
    615            }
    616            else
    617            {
    618              // Error occurred in request to send.
    619            }
    620          }
   \   000071   7403         MOV     A,#0x3
   \   000073                REQUIRE ?Subroutine0
   \   000073                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    621          
    622          /*********************************************************************
    623          *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    624          void delay(void)
   \                     delay:
    625          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    626            unsigned int i;
    627            unsigned char j;
    628          
    629            for(i=0;i<1000;i++)
   \   000000   78E8         MOV     R0,#-0x18
   \   000002   7903         MOV     R1,#0x3
    630            {
    631              for(j=0;j<200;j++)
   \                     ??delay_0:
   \   000004   74C8         MOV     A,#-0x38
    632              {
    633                asm("NOP");
   \                     ??delay_1:
   \   000006   00           NOP
    634                asm("NOP");
   \   000007   00           NOP
    635                asm("NOP");
   \   000008   00           NOP
    636              }
   \   000009   14           DEC     A
   \   00000A   70FA         JNZ     ??delay_1
    637            }
   \   00000C   E8           MOV     A,R0
   \   00000D   24FF         ADD     A,#-0x1
   \   00000F   18           DEC     R0
   \   000010   E9           MOV     A,R1
   \   000011   34FF         ADDC    A,#-0x1
   \   000013   F9           MOV     R1,A
   \   000014   E8           MOV     A,R0
   \   000015   49           ORL     A,R1
   \   000016   70EC         JNZ     ??delay_0
    638          }
   \   000018   02....       LJMP    ?BRET
    639          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    640          uint8 delay_nus(uint16 i)
   \                     delay_nus:
    641          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   8003         SJMP    ??delay_nus_0
    642             while(i--)
    643             {
    644                asm("NOP"); 
   \                     ??delay_nus_1:
   \   000002   00           NOP
    645                asm("NOP");
   \   000003   00           NOP
    646                asm("NOP");
   \   000004   00           NOP
    647             }
   \                     ??delay_nus_0:
   \   000005   EA           MOV     A,R2
   \   000006   F8           MOV     R0,A
   \   000007   EB           MOV     A,R3
   \   000008   F9           MOV     R1,A
   \   000009   E8           MOV     A,R0
   \   00000A   24FF         ADD     A,#-0x1
   \   00000C   1A           DEC     R2
   \   00000D   E9           MOV     A,R1
   \   00000E   34FF         ADDC    A,#-0x1
   \   000010   FB           MOV     R3,A
   \   000011   E8           MOV     A,R0
   \   000012   49           ORL     A,R1
   \   000013   70ED         JNZ     ??delay_nus_1
    648             return 0;
   \   000015   7900         MOV     R1,#0x0
   \   000017   02....       LJMP    ?BRET
    649          }
    650          //ÏÂÃæÕâ¸ö»Øµ÷º¯ÊýÊÇÎÒ¼ÓµÄ£¬´Ó´®¿Ú0¶ÁÈ¡2¸ö×Ö·û£¬·Å½øuartbuf

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    651          static void rxCB(uint8 port,uint8 event)
   \                     rxCB:
    652          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    653            uint8 uartbuf[2];
    654            HalUARTRead(0,uartbuf,2);//½ÓÊÕÖ¸Ê¾µÆ¿ØÖÆÐÅÏ¢
   \   00000A                ; Setup parameters for call to function HalUARTRead
   \   00000A   7C02         MOV     R4,#0x2
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   AA82         MOV     R2,DPL
   \   000016   AB83         MOV     R3,DPH
   \   000018   7900         MOV     R1,#0x0
   \   00001A   12....       LCALL   ??HalUARTRead?relay
    655              //ÎÞÏß´«Êä¸øÖÕ¶Ë
    656             AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    657                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    658                                 2,
    659                                 uartbuf,
    660                                 &SampleApp_TransID,
    661                                 AF_DISCV_ROUTE,
    662                                 AF_DEFAULT_RADIUS );
   \   00001D                ; Setup parameters for call to function AF_DataRequest
   \   00001D   75..1E       MOV     ?V0 + 0,#0x1e
   \   000020   78..         MOV     R0,#?V0 + 0
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000025   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000028   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00002B   78..         MOV     R0,#?V0 + 0
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000030   7403         MOV     A,#0x3
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   8582..       MOV     ?V0 + 0,DPL
   \   000038   8583..       MOV     ?V0 + 1,DPH
   \   00003B   78..         MOV     R0,#?V0 + 0
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   75..02       MOV     ?V0 + 0,#0x2
   \   000043   75..00       MOV     ?V0 + 1,#0x0
   \   000046   78..         MOV     R0,#?V0 + 0
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   75..01       MOV     ?V0 + 0,#0x1
   \   00004E   78..         MOV     R0,#?V0 + 0
   \   000050   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000053   7920         MOV     R1,#0x20
   \   000055   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000057   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000059   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00005B   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00005D   12....       LCALL   ??AF_DataRequest?relay
   \   000060   7409         MOV     A,#0x9
   \   000062   12....       LCALL   ?DEALLOC_XSTACK8
    663          
    664          }
   \   000065   7402         MOV     A,#0x2
   \   000067   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??delay?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    delay

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??delay_nus?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    delay_nus

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxCB

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "3158116124">`:
   \   000000   33313538     DB "3158116124"
   \            31313631
   \            323400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ":">`:
   \   000000   3A00         DB ":"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%">`:
   \   000000   2500         DB "%"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Lx">`:
   \   000000   4C7800       DB "Lx"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "!!!">`:
   \   000000   21212100     DB "!!!"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_42040000:
   \   000000   00000442     DD 42040000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_42c60000:
   \   000000   0000C642     DD 42C60000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_425c0001:
   \   000000   01005C42     DD 425C0001H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_41200000:
   \   000000   00002041     DD 41200000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_42c80000:
   \   000000   0000C842     DD 42C80000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_447a0000:
   \   000000   00007A44     DD 447A0000H

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0      0
     SampleApp_Init                     0      0     43
       -> HalUARTOpen                   0      0     80
       -> afRegister                    0      0     80
       -> RegisterForKeys               0      0     80
       -> osal_memcpy                   0      0     86
       -> aps_AddGroup                  0      0     80
     SampleApp_MessageMSGCB             2      0     12
       -> HalUARTWrite                  4      0      0
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> HalLcd_HW_Init                0      0     24
       -> LCD_P16x16Ch                  0      0     24
       -> LCD_P16x16Ch                  0      0     24
       -> LCD_P16x16Ch                  0      0     24
       -> LCD_P8x16Str                  0      0     24
       -> osal_start_timerEx            0      0     24
       -> SampleApp_SendPeriodicMessage
                                        0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     22
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      1      0     52
       -> read_data                     0      0     62
       -> DataChange                    0      0     62
       -> getHR202_6                    0      0     62
       -> getLight_5                    0      0     62
       -> Onboard_wait                  0      0     62
       -> AF_DataRequest                0      0     80
       -> LCD_CLS                       0      0     62
       -> LCD_P16x16Ch                  0      0     62
       -> LCD_P16x16Ch                  0      0     62
       -> LCD_P16x16Ch                  0      0     62
       -> LCD_P8x16Str                  0      0     62
       -> LCD_P8x16Str                  0      0     62
       -> LCD_P16x16Ch                  0      0     62
       -> LCD_P16x16Ch                  0      0     62
       -> LCD_P16x16Ch                  0      0     62
       -> LCD_P16x16Ch                  0      0     62
       -> LCD_P8x16Str                  0      0     62
       -> LCD_P8x16Str                  0      0     62
       -> LCD_P8x16Str                  0      0     62
       -> LCD_P16x16Ch                  0      0     62
       -> LCD_P8x16Str                  0      0     62
       -> LCD_P8x16Str                  0      0     62
       -> LCD_P8x16Str                  0      0     62
       -> LCD_P16x16Ch                  0      0     62
       -> LCD_P16x16Ch                  0      0     62
       -> LCD_P16x16Ch                  0      0     62
       -> LCD_P16x16Ch                  0      0     62
       -> LCD_P8x16Str                  0      0     62
       -> LCD_P16x16Ch                  0      0     62
       -> LCD_P16x16Ch                  0      0     62
       -> LCD_P16x16Ch                  0      0     62
       -> LCD_P16x16Ch                  0      0     62
     delay                              0      0      0
     delay_nus                          0      0      0
     rxCB                               0      0     21
       -> HalUARTRead                   0      0     24
       -> AF_DataRequest                0      0     42


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     _A_P0                                    1
     _A_P1                                    1
     P0SEL                                    1
     P1SEL                                    1
     P1INP                                    1
     P0DIR                                    1
     P1DIR                                    1
     LedState                                 1
     SampleApp_ClusterList                    8
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     flag_coord                               1
     flag_end_1                               1
     sensor_value                            20
     SampleApp_Init                         213
     SampleApp_ProcessEvent                 310
     ?Subroutine1                            11
     ?Subroutine5                            10
     SampleApp_HandleKeys                     3
     SampleApp_MessageMSGCB                  71
     SampleApp_SendPeriodicMessage          805
     ?Subroutine4                            13
     ?Subroutine3                            35
     ?Subroutine2                            10
     SampleApp_SendFlashMessage             115
     ?Subroutine0                             8
     delay                                   27
     delay_nus                               26
     rxCB                                   106
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ??delay?relay                            6
     ??delay_nus?relay                        6
     ??rxCB?relay                             6
     ?<Constant "Group 1">                    8
     ?<Constant "3158116124">                11
     ?<Constant ":">                          2
     ?<Constant "%">                          2
     ?<Constant "Lx">                         3
     ?<Constant "!!!">                        4
     __Constant_42040000                      4
     __Constant_42c60000                      4
     __Constant_425c0001                      4
     __Constant_41200000                      4
     __Constant_42c80000                      4
     __Constant_447a0000                      4

 
 1 763 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
     7 bytes in segment SFR_AN
    74 bytes in segment XDATA_ROM_C
    76 bytes in segment XDATA_Z
 
 1 817 bytes of CODE  memory
    50 bytes of CONST memory (+ 24 bytes shared)
     0 bytes of DATA  memory (+  7 bytes shared)
    76 bytes of XDATA memory

Errors: none
Warnings: 1
